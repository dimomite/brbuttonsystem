
UsbHidCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000607c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f8  080061f8  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  080061f8  080061f8  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061f8  080061f8  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061fc  080061fc  000161fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08006200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  2000016c  0800636c  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  0800636c  00020944  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128c5  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e74  00000000  00000000  00032a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  000358d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  000365b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d29  00000000  00000000  00037128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3b6  00000000  00000000  0004de51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f86a  00000000  00000000  0005b207  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000caa71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003264  00000000  00000000  000caaec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000016c 	.word	0x2000016c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006170 	.word	0x08006170

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000170 	.word	0x20000170
 8000148:	08006170 	.word	0x08006170

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f005 fa38 	bl	80055dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	200000dc 	.word	0x200000dc
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200001a8 	.word	0x200001a8

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200001a8 	.word	0x200001a8

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	4013      	ands	r3, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e001      	b.n	8000746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
 800075e:	4613      	mov	r3, r2
 8000760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000762:	787b      	ldrb	r3, [r7, #1]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800076e:	e003      	b.n	8000778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	041a      	lsls	r2, r3, #16
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	611a      	str	r2, [r3, #16]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4013      	ands	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 fb2c 	bl	8005e00 <HAL_GPIO_EXTI_Callback>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010400 	.word	0x40010400

080007b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	b08b      	sub	sp, #44	; 0x2c
 80007b8:	af06      	add	r7, sp, #24
 80007ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e0d3      	b.n	800096e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d106      	bne.n	80007e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f005 f826 	bl	800582c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2203      	movs	r2, #3
 80007e4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fd93 	bl	8002318 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	687e      	ldr	r6, [r7, #4]
 80007fa:	466d      	mov	r5, sp
 80007fc:	f106 0410 	add.w	r4, r6, #16
 8000800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	602b      	str	r3, [r5, #0]
 8000808:	1d33      	adds	r3, r6, #4
 800080a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800080c:	6838      	ldr	r0, [r7, #0]
 800080e:	f001 fd5c 	bl	80022ca <USB_CoreInit>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2202      	movs	r2, #2
 800081c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	e0a4      	b.n	800096e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fd90 	bl	8002350 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e035      	b.n	80008a2 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	015b      	lsls	r3, r3, #5
 800083c:	4413      	add	r3, r2
 800083e:	3329      	adds	r3, #41	; 0x29
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	015b      	lsls	r3, r3, #5
 800084a:	4413      	add	r3, r2
 800084c:	3328      	adds	r3, #40	; 0x28
 800084e:	7bfa      	ldrb	r2, [r7, #15]
 8000850:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	7bfa      	ldrb	r2, [r7, #15]
 8000856:	b291      	uxth	r1, r2
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	015b      	lsls	r3, r3, #5
 800085c:	4413      	add	r3, r2
 800085e:	3336      	adds	r3, #54	; 0x36
 8000860:	460a      	mov	r2, r1
 8000862:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	015b      	lsls	r3, r3, #5
 800086a:	4413      	add	r3, r2
 800086c:	332b      	adds	r3, #43	; 0x2b
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	015b      	lsls	r3, r3, #5
 8000878:	4413      	add	r3, r2
 800087a:	3338      	adds	r3, #56	; 0x38
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	015b      	lsls	r3, r3, #5
 8000886:	4413      	add	r3, r2
 8000888:	333c      	adds	r3, #60	; 0x3c
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	3302      	adds	r3, #2
 8000894:	015b      	lsls	r3, r3, #5
 8000896:	4413      	add	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	3301      	adds	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d3c4      	bcc.n	8000836 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e031      	b.n	8000916 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	015b      	lsls	r3, r3, #5
 80008b8:	4413      	add	r3, r2
 80008ba:	f203 1329 	addw	r3, r3, #297	; 0x129
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	015b      	lsls	r3, r3, #5
 80008c8:	4413      	add	r3, r2
 80008ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80008ce:	7bfa      	ldrb	r2, [r7, #15]
 80008d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	015b      	lsls	r3, r3, #5
 80008d8:	4413      	add	r3, r2
 80008da:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	015b      	lsls	r3, r3, #5
 80008e8:	4413      	add	r3, r2
 80008ea:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	015b      	lsls	r3, r3, #5
 80008f8:	4413      	add	r3, r2
 80008fa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	330a      	adds	r3, #10
 8000908:	015b      	lsls	r3, r3, #5
 800090a:	4413      	add	r3, r2
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	3301      	adds	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	7bfa      	ldrb	r2, [r7, #15]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3c8      	bcc.n	80008b2 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	687e      	ldr	r6, [r7, #4]
 8000928:	466d      	mov	r5, sp
 800092a:	f106 0410 	add.w	r4, r6, #16
 800092e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	602b      	str	r3, [r5, #0]
 8000936:	1d33      	adds	r3, r6, #4
 8000938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800093a:	6838      	ldr	r0, [r7, #0]
 800093c:	f001 fd14 	bl	8002368 <USB_DevInit>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d005      	beq.n	8000952 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2202      	movs	r2, #2
 800094a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e00d      	b.n	800096e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f002 fd51 	bl	800340e <USB_DevDisconnect>

  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000976 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000984:	2b01      	cmp	r3, #1
 8000986:	d101      	bne.n	800098c <HAL_PCD_Start+0x16>
 8000988:	2302      	movs	r3, #2
 800098a:	e016      	b.n	80009ba <HAL_PCD_Start+0x44>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2201      	movs	r2, #1
 8000990:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000994:	2101      	movs	r1, #1
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f005 f991 	bl	8005cbe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 fd2a 	bl	80033fa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fc9d 	bl	80022ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fd27 	bl	8003422 <USB_ReadInterrupts>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009de:	d102      	bne.n	80009e6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 fadf 	bl	8000fa4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fd19 	bl	8003422 <USB_ReadInterrupts>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009fa:	d112      	bne.n	8000a22 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a0e:	b292      	uxth	r2, r2
 8000a10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f004 ff7e 	bl	8005916 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f8de 	bl	8000bde <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fcfb 	bl	8003422 <USB_ReadInterrupts>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a36:	d10b      	bne.n	8000a50 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a4a:	b292      	uxth	r2, r2
 8000a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 fce4 	bl	8003422 <USB_ReadInterrupts>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a64:	d10b      	bne.n	8000a7e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a78:	b292      	uxth	r2, r2
 8000a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fccd 	bl	8003422 <USB_ReadInterrupts>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a92:	d126      	bne.n	8000ae2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f022 0204 	bic.w	r2, r2, #4
 8000aa6:	b292      	uxth	r2, r2
 8000aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0208 	bic.w	r2, r2, #8
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f004 ff5f 	bl	8005988 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000adc:	b292      	uxth	r2, r2
 8000ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fc9b 	bl	8003422 <USB_ReadInterrupts>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000af6:	d13d      	bne.n	8000b74 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0208 	orr.w	r2, r2, #8
 8000b0a:	b292      	uxth	r2, r2
 8000b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b22:	b292      	uxth	r2, r2
 8000b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0204 	orr.w	r2, r2, #4
 8000b3a:	b292      	uxth	r2, r2
 8000b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 fc6c 	bl	8003422 <USB_ReadInterrupts>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b54:	d10b      	bne.n	8000b6e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b68:	b292      	uxth	r2, r2
 8000b6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f004 fef0 	bl	8005954 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fc52 	bl	8003422 <USB_ReadInterrupts>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b88:	d10e      	bne.n	8000ba8 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b9c:	b292      	uxth	r2, r2
 8000b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f004 fea9 	bl	80058fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fc38 	bl	8003422 <USB_ReadInterrupts>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bd0:	b292      	uxth	r2, r2
 8000bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	460b      	mov	r3, r1
 8000be8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <HAL_PCD_SetAddress+0x1a>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e013      	b.n	8000c20 <HAL_PCD_SetAddress+0x42>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	78fa      	ldrb	r2, [r7, #3]
 8000c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	78fa      	ldrb	r2, [r7, #3]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 fbdf 	bl	80033d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	4608      	mov	r0, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	4603      	mov	r3, r0
 8000c38:	70fb      	strb	r3, [r7, #3]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	803b      	strh	r3, [r7, #0]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da0b      	bge.n	8000c66 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	f003 0307 	and.w	r3, r3, #7
 8000c54:	015b      	lsls	r3, r3, #5
 8000c56:	3328      	adds	r3, #40	; 0x28
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2201      	movs	r2, #1
 8000c62:	705a      	strb	r2, [r3, #1]
 8000c64:	e00b      	b.n	8000c7e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	015b      	lsls	r3, r3, #5
 8000c6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c8a:	883a      	ldrh	r2, [r7, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	78ba      	ldrb	r2, [r7, #2]
 8000c94:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d102      	bne.n	8000cb4 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d101      	bne.n	8000cc2 <HAL_PCD_EP_Open+0x9a>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e00e      	b.n	8000ce0 <HAL_PCD_EP_Open+0xb8>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68f9      	ldr	r1, [r7, #12]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fb6d 	bl	80023b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000cde:	7afb      	ldrb	r3, [r7, #11]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	da0b      	bge.n	8000d14 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	3328      	adds	r3, #40	; 0x28
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	705a      	strb	r2, [r3, #1]
 8000d12:	e00b      	b.n	8000d2c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	015b      	lsls	r3, r3, #5
 8000d1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d101      	bne.n	8000d46 <HAL_PCD_EP_Close+0x5e>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e00e      	b.n	8000d64 <HAL_PCD_EP_Close+0x7c>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68f9      	ldr	r1, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fe19 	bl	800298c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d7c:	7afb      	ldrb	r3, [r7, #11]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	015b      	lsls	r3, r3, #5
 8000d84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2200      	movs	r2, #0
 8000da4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6979      	ldr	r1, [r7, #20]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 ff78 	bl	8002cb8 <USB_EPStartXfer>
 8000dc8:	e005      	b.n	8000dd6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6979      	ldr	r1, [r7, #20]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 ff71 	bl	8002cb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	460b      	mov	r3, r1
 8000dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	015b      	lsls	r3, r3, #5
 8000df8:	3328      	adds	r3, #40	; 0x28
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2201      	movs	r2, #1
 8000e16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e18:	7afb      	ldrb	r3, [r7, #11]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e24:	7afb      	ldrb	r3, [r7, #11]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d106      	bne.n	8000e3c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6979      	ldr	r1, [r7, #20]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 ff3f 	bl	8002cb8 <USB_EPStartXfer>
 8000e3a:	e005      	b.n	8000e48 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6979      	ldr	r1, [r7, #20]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 ff38 	bl	8002cb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	f003 0207 	and.w	r2, r3, #7
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d901      	bls.n	8000e70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e046      	b.n	8000efe <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da0b      	bge.n	8000e90 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	015b      	lsls	r3, r3, #5
 8000e80:	3328      	adds	r3, #40	; 0x28
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	705a      	strb	r2, [r3, #1]
 8000e8e:	e009      	b.n	8000ea4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d101      	bne.n	8000ec4 <HAL_PCD_EP_SetStall+0x72>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e01c      	b.n	8000efe <HAL_PCD_EP_SetStall+0xac>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68f9      	ldr	r1, [r7, #12]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 f9a8 	bl	8003228 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d108      	bne.n	8000ef4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000eec:	4619      	mov	r1, r3
 8000eee:	4610      	mov	r0, r2
 8000ef0:	f002 faa6 	bl	8003440 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	f003 020f 	and.w	r2, r3, #15
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d901      	bls.n	8000f24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e03a      	b.n	8000f9a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da0b      	bge.n	8000f44 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	3328      	adds	r3, #40	; 0x28
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	705a      	strb	r2, [r3, #1]
 8000f42:	e00b      	b.n	8000f5c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	015b      	lsls	r3, r3, #5
 8000f4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <HAL_PCD_EP_ClrStall+0x76>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e00e      	b.n	8000f9a <HAL_PCD_EP_ClrStall+0x94>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 f98e 	bl	80032ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000fac:	e282      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000fb8:	8afb      	ldrh	r3, [r7, #22]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000fc2:	7d7b      	ldrb	r3, [r7, #21]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f040 8142 	bne.w	800124e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fca:	8afb      	ldrh	r3, [r7, #22]
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d151      	bne.n	8001078 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fe4:	b29c      	uxth	r4, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8000fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3328      	adds	r3, #40	; 0x28
 8000ffa:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001004:	b29b      	uxth	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4413      	add	r3, r2
 8001010:	3302      	adds	r3, #2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	4413      	add	r3, r2
 800101a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	441a      	add	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001036:	2100      	movs	r1, #0
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f004 fc47 	bl	80058cc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8234 	beq.w	80014b4 <PCD_EP_ISR_Handler+0x510>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 822f 	bne.w	80014b4 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001062:	b2da      	uxtb	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	b292      	uxth	r2, r2
 800106a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001076:	e21d      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800107e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001088:	8a7b      	ldrh	r3, [r7, #18]
 800108a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108e:	2b00      	cmp	r3, #0
 8001090:	d033      	beq.n	80010fa <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800109a:	b29b      	uxth	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	3306      	adds	r3, #6
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f002 fa04 	bl	80034de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010e2:	4013      	ands	r3, r2
 80010e4:	b29c      	uxth	r4, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80010ee:	b292      	uxth	r2, r2
 80010f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f004 fbc0 	bl	8005878 <HAL_PCD_SetupStageCallback>
 80010f8:	e1dc      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f280 81d8 	bge.w	80014b4 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29a      	uxth	r2, r3
 800110c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001110:	4013      	ands	r3, r2
 8001112:	b29c      	uxth	r4, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800111c:	b292      	uxth	r2, r2
 800111e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001128:	b29b      	uxth	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4413      	add	r3, r2
 8001134:	3306      	adds	r3, #6
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	4413      	add	r3, r2
 800113e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d019      	beq.n	8001188 <PCD_EP_ISR_Handler+0x1e4>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d015      	beq.n	8001188 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6959      	ldr	r1, [r3, #20]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800116c:	b29b      	uxth	r3, r3
 800116e:	f002 f9b6 	bl	80034de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	441a      	add	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001180:	2100      	movs	r1, #0
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f004 fb8a 	bl	800589c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	461c      	mov	r4, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001196:	b29b      	uxth	r3, r3
 8001198:	441c      	add	r4, r3
 800119a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800119e:	461c      	mov	r4, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10e      	bne.n	80011c6 <PCD_EP_ISR_Handler+0x222>
 80011a8:	8823      	ldrh	r3, [r4, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	8023      	strh	r3, [r4, #0]
 80011b4:	8823      	ldrh	r3, [r4, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	8023      	strh	r3, [r4, #0]
 80011c4:	e02d      	b.n	8001222 <PCD_EP_ISR_Handler+0x27e>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b3e      	cmp	r3, #62	; 0x3e
 80011cc:	d812      	bhi.n	80011f4 <PCD_EP_ISR_Handler+0x250>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <PCD_EP_ISR_Handler+0x244>
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	029b      	lsls	r3, r3, #10
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	8023      	strh	r3, [r4, #0]
 80011f2:	e016      	b.n	8001222 <PCD_EP_ISR_Handler+0x27e>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <PCD_EP_ISR_Handler+0x26a>
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	3b01      	subs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	b29b      	uxth	r3, r3
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	b29b      	uxth	r3, r3
 8001216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800121a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800121e:	b29b      	uxth	r3, r3
 8001220:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800122e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001232:	b29c      	uxth	r4, r3
 8001234:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001238:	b29c      	uxth	r4, r3
 800123a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800123e:	b29c      	uxth	r4, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4ba2      	ldr	r3, [pc, #648]	; (80014d0 <PCD_EP_ISR_Handler+0x52c>)
 8001246:	4323      	orrs	r3, r4
 8001248:	b29b      	uxth	r3, r3
 800124a:	8013      	strh	r3, [r2, #0]
 800124c:	e132      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	7d7b      	ldrb	r3, [r7, #21]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800125e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f280 80d1 	bge.w	800140a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	7d7b      	ldrb	r3, [r7, #21]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b29a      	uxth	r2, r3
 8001278:	f640 738f 	movw	r3, #3983	; 0xf8f
 800127c:	4013      	ands	r3, r2
 800127e:	b29c      	uxth	r4, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	7d7b      	ldrb	r3, [r7, #21]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001290:	b292      	uxth	r2, r2
 8001292:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001294:	7d7b      	ldrb	r3, [r7, #21]
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	7b1b      	ldrb	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d121      	bne.n	80012ee <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	3306      	adds	r3, #6
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012d2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80012d4:	8bfb      	ldrh	r3, [r7, #30]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d072      	beq.n	80013c0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6959      	ldr	r1, [r3, #20]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	88da      	ldrh	r2, [r3, #6]
 80012e6:	8bfb      	ldrh	r3, [r7, #30]
 80012e8:	f002 f8f9 	bl	80034de <USB_ReadPMA>
 80012ec:	e068      	b.n	80013c0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d021      	beq.n	800134c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4413      	add	r3, r2
 800131c:	3302      	adds	r3, #2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	4413      	add	r3, r2
 8001326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001330:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001332:	8bfb      	ldrh	r3, [r7, #30]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d02a      	beq.n	800138e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6959      	ldr	r1, [r3, #20]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	891a      	ldrh	r2, [r3, #8]
 8001344:	8bfb      	ldrh	r3, [r7, #30]
 8001346:	f002 f8ca 	bl	80034de <USB_ReadPMA>
 800134a:	e020      	b.n	800138e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001354:	b29b      	uxth	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	3306      	adds	r3, #6
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	4413      	add	r3, r2
 800136a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001374:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001376:	8bfb      	ldrh	r3, [r7, #30]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6959      	ldr	r1, [r3, #20]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	895a      	ldrh	r2, [r3, #10]
 8001388:	8bfb      	ldrh	r3, [r7, #30]
 800138a:	f002 f8a8 	bl	80034de <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a8:	b29c      	uxth	r4, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	441a      	add	r2, r3
 80013b8:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <PCD_EP_ISR_Handler+0x530>)
 80013ba:	4323      	orrs	r3, r4
 80013bc:	b29b      	uxth	r3, r3
 80013be:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	69da      	ldr	r2, [r3, #28]
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	441a      	add	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	441a      	add	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <PCD_EP_ISR_Handler+0x446>
 80013e0:	8bfa      	ldrh	r2, [r7, #30]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d206      	bcs.n	80013f8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f004 fa53 	bl	800589c <HAL_PCD_DataOutStageCallback>
 80013f6:	e008      	b.n	800140a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	7819      	ldrb	r1, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fcb1 	bl	8000d6c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800140a:	8a7b      	ldrh	r3, [r7, #18]
 800140c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001410:	2b00      	cmp	r3, #0
 8001412:	d04f      	beq.n	80014b4 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001414:	7d7b      	ldrb	r3, [r7, #21]
 8001416:	015b      	lsls	r3, r3, #5
 8001418:	3328      	adds	r3, #40	; 0x28
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	7d7b      	ldrb	r3, [r7, #21]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001438:	b29c      	uxth	r4, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	7d7b      	ldrb	r3, [r7, #21]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	441a      	add	r2, r3
 8001446:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800144a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800144e:	b29b      	uxth	r3, r3
 8001450:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800145a:	b29b      	uxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	3302      	adds	r3, #2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	4413      	add	r3, r2
 8001470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	441a      	add	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f004 fa16 	bl	80058cc <HAL_PCD_DataInStageCallback>
 80014a0:	e008      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	7819      	ldrb	r1, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fc96 	bl	8000de0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b21b      	sxth	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f6ff ad74 	blt.w	8000fae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3724      	adds	r7, #36	; 0x24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}
 80014d0:	ffff8080 	.word	0xffff8080
 80014d4:	ffff80c0 	.word	0xffff80c0

080014d8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	817b      	strh	r3, [r7, #10]
 80014e6:	4613      	mov	r3, r2
 80014e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80014ea:	897b      	ldrh	r3, [r7, #10]
 80014ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f6:	897b      	ldrh	r3, [r7, #10]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	015b      	lsls	r3, r3, #5
 80014fe:	3328      	adds	r3, #40	; 0x28
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e006      	b.n	8001516 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001508:	897b      	ldrh	r3, [r7, #10]
 800150a:	015b      	lsls	r3, r3, #5
 800150c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001516:	893b      	ldrh	r3, [r7, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d107      	bne.n	800152c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2200      	movs	r2, #0
 8001520:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b29a      	uxth	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	80da      	strh	r2, [r3, #6]
 800152a:	e00b      	b.n	8001544 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2201      	movs	r2, #1
 8001530:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	b29a      	uxth	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	b29a      	uxth	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e26c      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8087 	beq.w	800167e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001570:	4b92      	ldr	r3, [pc, #584]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b04      	cmp	r3, #4
 800157a:	d00c      	beq.n	8001596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800157c:	4b8f      	ldr	r3, [pc, #572]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	d112      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
 8001588:	4b8c      	ldr	r3, [pc, #560]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d10b      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	4b89      	ldr	r3, [pc, #548]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d06c      	beq.n	800167c <HAL_RCC_OscConfig+0x12c>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d168      	bne.n	800167c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e246      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x76>
 80015b8:	4b80      	ldr	r3, [pc, #512]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a7f      	ldr	r2, [pc, #508]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e02e      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x98>
 80015ce:	4b7b      	ldr	r3, [pc, #492]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a7a      	ldr	r2, [pc, #488]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b78      	ldr	r3, [pc, #480]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a77      	ldr	r2, [pc, #476]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e01d      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0xbc>
 80015f2:	4b72      	ldr	r3, [pc, #456]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a71      	ldr	r2, [pc, #452]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 800160c:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a6a      	ldr	r2, [pc, #424]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a67      	ldr	r2, [pc, #412]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800161e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7fe fde6 	bl	80001fc <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7fe fde2 	bl	80001fc <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1fa      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0xe4>
 8001652:	e014      	b.n	800167e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7fe fdd2 	bl	80001fc <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7fe fdce 	bl	80001fc <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e1e6      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x10c>
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d063      	beq.n	8001752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d11c      	bne.n	80016dc <HAL_RCC_OscConfig+0x18c>
 80016a2:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d116      	bne.n	80016dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1ba      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4939      	ldr	r1, [pc, #228]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	e03a      	b.n	8001752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7fe fd87 	bl	80001fc <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7fe fd83 	bl	80001fc <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e19b      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4927      	ldr	r1, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7fe fd66 	bl	80001fc <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7fe fd62 	bl	80001fc <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e17a      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d03a      	beq.n	80017d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d019      	beq.n	800179a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7fe fd46 	bl	80001fc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001774:	f7fe fd42 	bl	80001fc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e15a      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f000 faa8 	bl	8001ce8 <RCC_Delay>
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7fe fd2c 	bl	80001fc <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a6:	e00f      	b.n	80017c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7fe fd28 	bl	80001fc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d908      	bls.n	80017c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e140      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	42420000 	.word	0x42420000
 80017c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b9e      	ldr	r3, [pc, #632]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e9      	bne.n	80017a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a6 	beq.w	800192e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b97      	ldr	r3, [pc, #604]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10d      	bne.n	800180e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a8a      	ldr	r2, [pc, #552]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7fe fce9 	bl	80001fc <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7fe fce5 	bl	80001fc <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0fd      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x312>
 8001854:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a7a      	ldr	r2, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	e02d      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x334>
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6213      	str	r3, [r2, #32]
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a72      	ldr	r2, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	e01c      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x356>
 800188c:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a6c      	ldr	r2, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a66      	ldr	r2, [pc, #408]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a63      	ldr	r2, [pc, #396]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d015      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7fe fc99 	bl	80001fc <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7fe fc95 	bl	80001fc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0ab      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ee      	beq.n	80018ce <HAL_RCC_OscConfig+0x37e>
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7fe fc83 	bl	80001fc <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7fe fc7f 	bl	80001fc <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e095      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8081 	beq.w	8001a3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001938:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d061      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d146      	bne.n	80019da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7fe fc53 	bl	80001fc <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7fe fc4f 	bl	80001fc <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e067      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001980:	d108      	bne.n	8001994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	492d      	ldr	r1, [pc, #180]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a19      	ldr	r1, [r3, #32]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	430b      	orrs	r3, r1
 80019a6:	4927      	ldr	r1, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7fe fc23 	bl	80001fc <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7fe fc1f 	bl	80001fc <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e037      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x46a>
 80019d8:	e02f      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7fe fc0c 	bl	80001fc <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7fe fc08 	bl	80001fc <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e020      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x498>
 8001a06:	e018      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e013      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42420060 	.word	0x42420060

08001a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0d0      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d910      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4965      	ldr	r1, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	494d      	ldr	r1, [pc, #308]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d040      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d115      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e073      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06b      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4936      	ldr	r1, [pc, #216]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7fe fb5c 	bl	80001fc <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7fe fb58 	bl	80001fc <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e053      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d210      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4922      	ldr	r1, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e032      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4601      	mov	r1, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1cc>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1d0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe faba 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	080061e8 	.word	0x080061e8
 8001c1c:	200000dc 	.word	0x200000dc
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b490      	push	{r4, r7}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c2c:	1d3c      	adds	r4, r7, #4
 8001c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x46>
 8001c62:	e02d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c66:	623b      	str	r3, [r7, #32]
      break;
 8001c68:	e02d      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	0c9b      	lsrs	r3, r3, #18
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c5b      	lsrs	r3, r3, #17
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c96:	4413      	add	r3, r2
 8001c98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca2:	fb02 f203 	mul.w	r2, r2, r3
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	e004      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	623b      	str	r3, [r7, #32]
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc2:	623b      	str	r3, [r7, #32]
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc90      	pop	{r4, r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	08006188 	.word	0x08006188
 8001cd8:	08006198 	.word	0x08006198
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	007a1200 	.word	0x007a1200
 8001ce4:	003d0900 	.word	0x003d0900

08001ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <RCC_Delay+0x34>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <RCC_Delay+0x38>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0a5b      	lsrs	r3, r3, #9
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d04:	bf00      	nop
  }
  while (Delay --);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	60fa      	str	r2, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <RCC_Delay+0x1c>
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200000dc 	.word	0x200000dc
 8001d20:	10624dd3 	.word	0x10624dd3

08001d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d07d      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10d      	bne.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	61d3      	str	r3, [r2, #28]
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d118      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d78:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d84:	f7fe fa3a 	bl	80001fc <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	e008      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8c:	f7fe fa36 	bl	80001fc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e06d      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d02e      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d027      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dde:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d014      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fa05 	bl	80001fc <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7fe fa01 	bl	80001fc <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e036      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ee      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4917      	ldr	r1, [pc, #92]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	490b      	ldr	r1, [pc, #44]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	4904      	ldr	r1, [pc, #16]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	42420440 	.word	0x42420440

08001e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e053      	b.n	8001f4a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f003 fbbf 	bl	8005640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ed8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	ea42 0103 	orr.w	r1, r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	0c1a      	lsrs	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f002 0204 	and.w	r2, r2, #4
 8001f28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b088      	sub	sp, #32
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_SPI_Transmit+0x22>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e11e      	b.n	80021b2 <HAL_SPI_Transmit+0x260>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f7c:	f7fe f93e 	bl	80001fc <HAL_GetTick>
 8001f80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d002      	beq.n	8001f98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f96:	e103      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_SPI_Transmit+0x52>
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fa8:	e0fa      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff0:	d107      	bne.n	8002002 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002000:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d007      	beq.n	8002020 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800201e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002028:	d14b      	bne.n	80020c2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_SPI_Transmit+0xe6>
 8002032:	8afb      	ldrh	r3, [r7, #22]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d13e      	bne.n	80020b6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	881a      	ldrh	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	1c9a      	adds	r2, r3, #2
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800205c:	e02b      	b.n	80020b6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d112      	bne.n	8002092 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	881a      	ldrh	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	1c9a      	adds	r2, r3, #2
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002090:	e011      	b.n	80020b6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002092:	f7fe f8b3 	bl	80001fc <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d803      	bhi.n	80020aa <HAL_SPI_Transmit+0x158>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d102      	bne.n	80020b0 <HAL_SPI_Transmit+0x15e>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020b4:	e074      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ce      	bne.n	800205e <HAL_SPI_Transmit+0x10c>
 80020c0:	e04c      	b.n	800215c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_SPI_Transmit+0x17e>
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d140      	bne.n	8002152 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	330c      	adds	r3, #12
 80020da:	7812      	ldrb	r2, [r2, #0]
 80020dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020f6:	e02c      	b.n	8002152 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d113      	bne.n	800212e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	330c      	adds	r3, #12
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	86da      	strh	r2, [r3, #54]	; 0x36
 800212c:	e011      	b.n	8002152 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800212e:	f7fe f865 	bl	80001fc <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d803      	bhi.n	8002146 <HAL_SPI_Transmit+0x1f4>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d102      	bne.n	800214c <HAL_SPI_Transmit+0x1fa>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002150:	e026      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1cd      	bne.n	80020f8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f894 	bl	800228e <SPI_EndRxTxTransaction>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	77fb      	strb	r3, [r7, #31]
 800219c:	e000      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
  }

error:
 800219e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021ca:	e04c      	b.n	8002266 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d048      	beq.n	8002266 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80021d4:	f7fe f812 	bl	80001fc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d902      	bls.n	80021ea <SPI_WaitFlagStateUntilTimeout+0x30>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d13d      	bne.n	8002266 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002202:	d111      	bne.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800220c:	d004      	beq.n	8002218 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002216:	d107      	bne.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002230:	d10f      	bne.n	8002252 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e00f      	b.n	8002286 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4013      	ands	r3, r2
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	429a      	cmp	r2, r3
 8002282:	d1a3      	bne.n	80021cc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af02      	add	r7, sp, #8
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff ff88 	bl	80021ba <SPI_WaitFlagStateUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e000      	b.n	80022c2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80022ca:	b084      	sub	sp, #16
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	f107 0014 	add.w	r0, r7, #20
 80022d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	b004      	add	sp, #16
 80022e8:	4770      	bx	lr

080022ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80022f2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80022f6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022fe:	b29a      	uxth	r2, r3
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	4313      	orrs	r3, r2
 8002304:	b29a      	uxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002320:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002324:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800232c:	b29b      	uxth	r3, r3
 800232e:	b21a      	sxth	r2, r3
 8002330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002334:	43db      	mvns	r3, r3
 8002336:	b21b      	sxth	r3, r3
 8002338:	4013      	ands	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002368:	b084      	sub	sp, #16
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	f107 0014 	add.w	r0, r7, #20
 8002376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffa5 	bl	80022ea <USB_EnableGlobalInt>

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023ac:	b004      	add	sp, #16
 80023ae:	4770      	bx	lr

080023b0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80023b0:	b490      	push	{r4, r7}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80023d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	78db      	ldrb	r3, [r3, #3]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d819      	bhi.n	8002412 <USB_ActivateEndpoint+0x62>
 80023de:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <USB_ActivateEndpoint+0x34>)
 80023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	08002409 	.word	0x08002409
 80023ec:	08002419 	.word	0x08002419
 80023f0:	080023ff 	.word	0x080023ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80023f4:	89bb      	ldrh	r3, [r7, #12]
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	81bb      	strh	r3, [r7, #12]
      break;
 80023fc:	e00d      	b.n	800241a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80023fe:	89bb      	ldrh	r3, [r7, #12]
 8002400:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002404:	81bb      	strh	r3, [r7, #12]
      break;
 8002406:	e008      	b.n	800241a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002408:	89bb      	ldrh	r3, [r7, #12]
 800240a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800240e:	81bb      	strh	r3, [r7, #12]
      break;
 8002410:	e003      	b.n	800241a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
      break;
 8002416:	e000      	b.n	800241a <USB_ActivateEndpoint+0x6a>
      break;
 8002418:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	441a      	add	r2, r3
 8002424:	89bb      	ldrh	r3, [r7, #12]
 8002426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800242a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800242e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002436:	b29b      	uxth	r3, r3
 8002438:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002450:	b29a      	uxth	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	4313      	orrs	r3, r2
 800245a:	b29c      	uxth	r4, r3
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	441a      	add	r2, r3
 8002466:	4b8a      	ldr	r3, [pc, #552]	; (8002690 <USB_ActivateEndpoint+0x2e0>)
 8002468:	4323      	orrs	r3, r4
 800246a:	b29b      	uxth	r3, r3
 800246c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	7b1b      	ldrb	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8112 	bne.w	800269c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	785b      	ldrb	r3, [r3, #1]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d067      	beq.n	8002550 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002480:	687c      	ldr	r4, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002488:	b29b      	uxth	r3, r3
 800248a:	441c      	add	r4, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	4423      	add	r3, r4
 8002494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002498:	461c      	mov	r4, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	88db      	ldrh	r3, [r3, #6]
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29c      	uxth	r4, r3
 80024b6:	4623      	mov	r3, r4
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d014      	beq.n	80024ea <USB_ActivateEndpoint+0x13a>
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d6:	b29c      	uxth	r4, r3
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	441a      	add	r2, r3
 80024e2:	4b6c      	ldr	r3, [pc, #432]	; (8002694 <USB_ActivateEndpoint+0x2e4>)
 80024e4:	4323      	orrs	r3, r4
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	78db      	ldrb	r3, [r3, #3]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d018      	beq.n	8002524 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002508:	b29c      	uxth	r4, r3
 800250a:	f084 0320 	eor.w	r3, r4, #32
 800250e:	b29c      	uxth	r4, r3
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	441a      	add	r2, r3
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <USB_ActivateEndpoint+0x2e0>)
 800251c:	4323      	orrs	r3, r4
 800251e:	b29b      	uxth	r3, r3
 8002520:	8013      	strh	r3, [r2, #0]
 8002522:	e22b      	b.n	800297c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800253a:	b29c      	uxth	r4, r3
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	441a      	add	r2, r3
 8002546:	4b52      	ldr	r3, [pc, #328]	; (8002690 <USB_ActivateEndpoint+0x2e0>)
 8002548:	4323      	orrs	r3, r4
 800254a:	b29b      	uxth	r3, r3
 800254c:	8013      	strh	r3, [r2, #0]
 800254e:	e215      	b.n	800297c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002550:	687c      	ldr	r4, [r7, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	441c      	add	r4, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4423      	add	r3, r4
 8002564:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002568:	461c      	mov	r4, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	88db      	ldrh	r3, [r3, #6]
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	b29b      	uxth	r3, r3
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	b29b      	uxth	r3, r3
 8002576:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002578:	687c      	ldr	r4, [r7, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002580:	b29b      	uxth	r3, r3
 8002582:	441c      	add	r4, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	4423      	add	r3, r4
 800258c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002590:	461c      	mov	r4, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10e      	bne.n	80025b8 <USB_ActivateEndpoint+0x208>
 800259a:	8823      	ldrh	r3, [r4, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	8023      	strh	r3, [r4, #0]
 80025a6:	8823      	ldrh	r3, [r4, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	8023      	strh	r3, [r4, #0]
 80025b6:	e02d      	b.n	8002614 <USB_ActivateEndpoint+0x264>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b3e      	cmp	r3, #62	; 0x3e
 80025be:	d812      	bhi.n	80025e6 <USB_ActivateEndpoint+0x236>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <USB_ActivateEndpoint+0x22a>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3301      	adds	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	029b      	lsls	r3, r3, #10
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	8023      	strh	r3, [r4, #0]
 80025e4:	e016      	b.n	8002614 <USB_ActivateEndpoint+0x264>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <USB_ActivateEndpoint+0x250>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	b29b      	uxth	r3, r3
 8002604:	029b      	lsls	r3, r3, #10
 8002606:	b29b      	uxth	r3, r3
 8002608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800260c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002610:	b29b      	uxth	r3, r3
 8002612:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29c      	uxth	r4, r3
 8002622:	4623      	mov	r3, r4
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d014      	beq.n	8002656 <USB_ActivateEndpoint+0x2a6>
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	b29c      	uxth	r4, r3
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <USB_ActivateEndpoint+0x2e8>)
 8002650:	4323      	orrs	r3, r4
 8002652:	b29b      	uxth	r3, r3
 8002654:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	b29c      	uxth	r4, r3
 800266e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002672:	b29c      	uxth	r4, r3
 8002674:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002678:	b29c      	uxth	r4, r3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	441a      	add	r2, r3
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <USB_ActivateEndpoint+0x2e0>)
 8002686:	4323      	orrs	r3, r4
 8002688:	b29b      	uxth	r3, r3
 800268a:	8013      	strh	r3, [r2, #0]
 800268c:	e176      	b.n	800297c <USB_ActivateEndpoint+0x5cc>
 800268e:	bf00      	nop
 8002690:	ffff8080 	.word	0xffff8080
 8002694:	ffff80c0 	.word	0xffff80c0
 8002698:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	b29c      	uxth	r4, r3
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	441a      	add	r2, r3
 80026be:	4b96      	ldr	r3, [pc, #600]	; (8002918 <USB_ActivateEndpoint+0x568>)
 80026c0:	4323      	orrs	r3, r4
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80026c6:	687c      	ldr	r4, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	441c      	add	r4, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4423      	add	r3, r4
 80026da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026de:	461c      	mov	r4, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	891b      	ldrh	r3, [r3, #8]
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	8023      	strh	r3, [r4, #0]
 80026ee:	687c      	ldr	r4, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	441c      	add	r4, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	4423      	add	r3, r4
 8002702:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002706:	461c      	mov	r4, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	895b      	ldrh	r3, [r3, #10]
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 8088 	bne.w	8002830 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29c      	uxth	r4, r3
 800272e:	4623      	mov	r3, r4
 8002730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d014      	beq.n	8002762 <USB_ActivateEndpoint+0x3b2>
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	b29c      	uxth	r4, r3
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	441a      	add	r2, r3
 800275a:	4b70      	ldr	r3, [pc, #448]	; (800291c <USB_ActivateEndpoint+0x56c>)
 800275c:	4323      	orrs	r3, r4
 800275e:	b29b      	uxth	r3, r3
 8002760:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29c      	uxth	r4, r3
 8002770:	4623      	mov	r3, r4
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d014      	beq.n	80027a4 <USB_ActivateEndpoint+0x3f4>
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002790:	b29c      	uxth	r4, r3
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	441a      	add	r2, r3
 800279c:	4b60      	ldr	r3, [pc, #384]	; (8002920 <USB_ActivateEndpoint+0x570>)
 800279e:	4323      	orrs	r3, r4
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	b29c      	uxth	r4, r3
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	441a      	add	r2, r3
 80027c6:	4b56      	ldr	r3, [pc, #344]	; (8002920 <USB_ActivateEndpoint+0x570>)
 80027c8:	4323      	orrs	r3, r4
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e4:	b29c      	uxth	r4, r3
 80027e6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80027ea:	b29c      	uxth	r4, r3
 80027ec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80027f0:	b29c      	uxth	r4, r3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	4b49      	ldr	r3, [pc, #292]	; (8002924 <USB_ActivateEndpoint+0x574>)
 80027fe:	4323      	orrs	r3, r4
 8002800:	b29b      	uxth	r3, r3
 8002802:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800281a:	b29c      	uxth	r4, r3
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <USB_ActivateEndpoint+0x574>)
 8002828:	4323      	orrs	r3, r4
 800282a:	b29b      	uxth	r3, r3
 800282c:	8013      	strh	r3, [r2, #0]
 800282e:	e0a5      	b.n	800297c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29c      	uxth	r4, r3
 800283e:	4623      	mov	r3, r4
 8002840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d014      	beq.n	8002872 <USB_ActivateEndpoint+0x4c2>
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	b29c      	uxth	r4, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <USB_ActivateEndpoint+0x56c>)
 800286c:	4323      	orrs	r3, r4
 800286e:	b29b      	uxth	r3, r3
 8002870:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29c      	uxth	r4, r3
 8002880:	4623      	mov	r3, r4
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d014      	beq.n	80028b4 <USB_ActivateEndpoint+0x504>
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a0:	b29c      	uxth	r4, r3
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	441a      	add	r2, r3
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <USB_ActivateEndpoint+0x570>)
 80028ae:	4323      	orrs	r3, r4
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	b29c      	uxth	r4, r3
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	441a      	add	r2, r3
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <USB_ActivateEndpoint+0x56c>)
 80028d8:	4323      	orrs	r3, r4
 80028da:	b29b      	uxth	r3, r3
 80028dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	78db      	ldrb	r3, [r3, #3]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d020      	beq.n	8002928 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028fc:	b29c      	uxth	r4, r3
 80028fe:	f084 0320 	eor.w	r3, r4, #32
 8002902:	b29c      	uxth	r4, r3
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <USB_ActivateEndpoint+0x574>)
 8002910:	4323      	orrs	r3, r4
 8002912:	b29b      	uxth	r3, r3
 8002914:	8013      	strh	r3, [r2, #0]
 8002916:	e01c      	b.n	8002952 <USB_ActivateEndpoint+0x5a2>
 8002918:	ffff8180 	.word	0xffff8180
 800291c:	ffffc080 	.word	0xffffc080
 8002920:	ffff80c0 	.word	0xffff80c0
 8002924:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800293e:	b29c      	uxth	r4, r3
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	441a      	add	r2, r3
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <USB_ActivateEndpoint+0x5d8>)
 800294c:	4323      	orrs	r3, r4
 800294e:	b29b      	uxth	r3, r3
 8002950:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	b29c      	uxth	r4, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	441a      	add	r2, r3
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <USB_ActivateEndpoint+0x5d8>)
 8002976:	4323      	orrs	r3, r4
 8002978:	b29b      	uxth	r3, r3
 800297a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bc90      	pop	{r4, r7}
 8002986:	4770      	bx	lr
 8002988:	ffff8080 	.word	0xffff8080

0800298c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800298c:	b490      	push	{r4, r7}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	7b1b      	ldrb	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d171      	bne.n	8002a82 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	785b      	ldrb	r3, [r3, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d036      	beq.n	8002a14 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29c      	uxth	r4, r3
 80029b4:	4623      	mov	r3, r4
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d014      	beq.n	80029e8 <USB_DeactivateEndpoint+0x5c>
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d4:	b29c      	uxth	r4, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	441a      	add	r2, r3
 80029e0:	4b6b      	ldr	r3, [pc, #428]	; (8002b90 <USB_DeactivateEndpoint+0x204>)
 80029e2:	4323      	orrs	r3, r4
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029fe:	b29c      	uxth	r4, r3
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <USB_DeactivateEndpoint+0x208>)
 8002a0c:	4323      	orrs	r3, r4
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	8013      	strh	r3, [r2, #0]
 8002a12:	e144      	b.n	8002c9e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29c      	uxth	r4, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d014      	beq.n	8002a56 <USB_DeactivateEndpoint+0xca>
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	b29c      	uxth	r4, r3
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	4b52      	ldr	r3, [pc, #328]	; (8002b98 <USB_DeactivateEndpoint+0x20c>)
 8002a50:	4323      	orrs	r3, r4
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6c:	b29c      	uxth	r4, r3
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <USB_DeactivateEndpoint+0x208>)
 8002a7a:	4323      	orrs	r3, r4
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	8013      	strh	r3, [r2, #0]
 8002a80:	e10d      	b.n	8002c9e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 8088 	bne.w	8002b9c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29c      	uxth	r4, r3
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d014      	beq.n	8002ace <USB_DeactivateEndpoint+0x142>
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aba:	b29c      	uxth	r4, r3
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <USB_DeactivateEndpoint+0x20c>)
 8002ac8:	4323      	orrs	r3, r4
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29c      	uxth	r4, r3
 8002adc:	4623      	mov	r3, r4
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d014      	beq.n	8002b10 <USB_DeactivateEndpoint+0x184>
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afc:	b29c      	uxth	r4, r3
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	441a      	add	r2, r3
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <USB_DeactivateEndpoint+0x204>)
 8002b0a:	4323      	orrs	r3, r4
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	b29c      	uxth	r4, r3
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	441a      	add	r2, r3
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <USB_DeactivateEndpoint+0x204>)
 8002b34:	4323      	orrs	r3, r4
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b50:	b29c      	uxth	r4, r3
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	441a      	add	r2, r3
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <USB_DeactivateEndpoint+0x208>)
 8002b5e:	4323      	orrs	r3, r4
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7a:	b29c      	uxth	r4, r3
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <USB_DeactivateEndpoint+0x208>)
 8002b88:	4323      	orrs	r3, r4
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	8013      	strh	r3, [r2, #0]
 8002b8e:	e086      	b.n	8002c9e <USB_DeactivateEndpoint+0x312>
 8002b90:	ffff80c0 	.word	0xffff80c0
 8002b94:	ffff8080 	.word	0xffff8080
 8002b98:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29c      	uxth	r4, r3
 8002baa:	4623      	mov	r3, r4
 8002bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d014      	beq.n	8002bde <USB_DeactivateEndpoint+0x252>
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	b29c      	uxth	r4, r3
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	4b35      	ldr	r3, [pc, #212]	; (8002cac <USB_DeactivateEndpoint+0x320>)
 8002bd8:	4323      	orrs	r3, r4
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29c      	uxth	r4, r3
 8002bec:	4623      	mov	r3, r4
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d014      	beq.n	8002c20 <USB_DeactivateEndpoint+0x294>
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	b29c      	uxth	r4, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	441a      	add	r2, r3
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <USB_DeactivateEndpoint+0x324>)
 8002c1a:	4323      	orrs	r3, r4
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	b29c      	uxth	r4, r3
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <USB_DeactivateEndpoint+0x320>)
 8002c44:	4323      	orrs	r3, r4
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c60:	b29c      	uxth	r4, r3
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	441a      	add	r2, r3
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <USB_DeactivateEndpoint+0x328>)
 8002c6e:	4323      	orrs	r3, r4
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	b29c      	uxth	r4, r3
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	441a      	add	r2, r3
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <USB_DeactivateEndpoint+0x328>)
 8002c98:	4323      	orrs	r3, r4
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc90      	pop	{r4, r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	ffffc080 	.word	0xffffc080
 8002cb0:	ffff80c0 	.word	0xffff80c0
 8002cb4:	ffff8080 	.word	0xffff8080

08002cb8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b08d      	sub	sp, #52	; 0x34
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	f040 8160 	bne.w	8002f8c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d909      	bls.n	8002cec <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	1ad2      	subs	r2, r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	619a      	str	r2, [r3, #24]
 8002cea:	e005      	b.n	8002cf8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	7b1b      	ldrb	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d119      	bne.n	8002d34 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6959      	ldr	r1, [r3, #20]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	88da      	ldrh	r2, [r3, #6]
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fba2 	bl	8003456 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002d12:	687c      	ldr	r4, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	441c      	add	r4, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	4423      	add	r3, r4
 8002d26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d2a:	461c      	mov	r4, r3
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	8023      	strh	r3, [r4, #0]
 8002d32:	e10f      	b.n	8002f54 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d065      	beq.n	8002e16 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d4a:	687c      	ldr	r4, [r7, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	785b      	ldrb	r3, [r3, #1]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d148      	bne.n	8002de6 <USB_EPStartXfer+0x12e>
 8002d54:	687c      	ldr	r4, [r7, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	441c      	add	r4, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	4423      	add	r3, r4
 8002d68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d6c:	461c      	mov	r4, r3
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10e      	bne.n	8002d92 <USB_EPStartXfer+0xda>
 8002d74:	8823      	ldrh	r3, [r4, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	8023      	strh	r3, [r4, #0]
 8002d80:	8823      	ldrh	r3, [r4, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	8023      	strh	r3, [r4, #0]
 8002d90:	e03d      	b.n	8002e0e <USB_EPStartXfer+0x156>
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	2b3e      	cmp	r3, #62	; 0x3e
 8002d96:	d810      	bhi.n	8002dba <USB_EPStartXfer+0x102>
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <USB_EPStartXfer+0xf6>
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	3301      	adds	r3, #1
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	8023      	strh	r3, [r4, #0]
 8002db8:	e029      	b.n	8002e0e <USB_EPStartXfer+0x156>
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <USB_EPStartXfer+0x118>
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	029b      	lsls	r3, r3, #10
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	8023      	strh	r3, [r4, #0]
 8002de4:	e013      	b.n	8002e0e <USB_EPStartXfer+0x156>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10f      	bne.n	8002e0e <USB_EPStartXfer+0x156>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	441c      	add	r4, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	4423      	add	r3, r4
 8002e00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	895b      	ldrh	r3, [r3, #10]
 8002e12:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002e14:	e063      	b.n	8002ede <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d148      	bne.n	8002eb0 <USB_EPStartXfer+0x1f8>
 8002e1e:	687c      	ldr	r4, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	441c      	add	r4, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	4423      	add	r3, r4
 8002e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e36:	461c      	mov	r4, r3
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10e      	bne.n	8002e5c <USB_EPStartXfer+0x1a4>
 8002e3e:	8823      	ldrh	r3, [r4, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	8023      	strh	r3, [r4, #0]
 8002e4a:	8823      	ldrh	r3, [r4, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8023      	strh	r3, [r4, #0]
 8002e5a:	e03d      	b.n	8002ed8 <USB_EPStartXfer+0x220>
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e60:	d810      	bhi.n	8002e84 <USB_EPStartXfer+0x1cc>
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	623b      	str	r3, [r7, #32]
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <USB_EPStartXfer+0x1c0>
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	3301      	adds	r3, #1
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	8023      	strh	r3, [r4, #0]
 8002e82:	e029      	b.n	8002ed8 <USB_EPStartXfer+0x220>
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <USB_EPStartXfer+0x1e2>
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	623b      	str	r3, [r7, #32]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	8023      	strh	r3, [r4, #0]
 8002eae:	e013      	b.n	8002ed8 <USB_EPStartXfer+0x220>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10f      	bne.n	8002ed8 <USB_EPStartXfer+0x220>
 8002eb8:	687c      	ldr	r4, [r7, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	441c      	add	r4, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	4423      	add	r3, r4
 8002ecc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ed0:	461c      	mov	r4, r3
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	891b      	ldrh	r3, [r3, #8]
 8002edc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6959      	ldr	r1, [r3, #20]
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fab4 	bl	8003456 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d115      	bne.n	8002f22 <USB_EPStartXfer+0x26a>
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0c:	b29c      	uxth	r4, r3
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	441a      	add	r2, r3
 8002f18:	4b9a      	ldr	r3, [pc, #616]	; (8003184 <USB_EPStartXfer+0x4cc>)
 8002f1a:	4323      	orrs	r3, r4
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	8013      	strh	r3, [r2, #0]
 8002f20:	e018      	b.n	8002f54 <USB_EPStartXfer+0x29c>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	785b      	ldrb	r3, [r3, #1]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d114      	bne.n	8002f54 <USB_EPStartXfer+0x29c>
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f40:	b29c      	uxth	r4, r3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	4b8e      	ldr	r3, [pc, #568]	; (8003188 <USB_EPStartXfer+0x4d0>)
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f6a:	b29c      	uxth	r4, r3
 8002f6c:	f084 0310 	eor.w	r3, r4, #16
 8002f70:	b29c      	uxth	r4, r3
 8002f72:	f084 0320 	eor.w	r3, r4, #32
 8002f76:	b29c      	uxth	r4, r3
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	4b82      	ldr	r3, [pc, #520]	; (800318c <USB_EPStartXfer+0x4d4>)
 8002f84:	4323      	orrs	r3, r4
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	8013      	strh	r3, [r2, #0]
 8002f8a:	e146      	b.n	800321a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d909      	bls.n	8002fac <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	1ad2      	subs	r2, r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	619a      	str	r2, [r3, #24]
 8002faa:	e005      	b.n	8002fb8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	7b1b      	ldrb	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d148      	bne.n	8003052 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002fc0:	687c      	ldr	r4, [r7, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	441c      	add	r4, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	4423      	add	r3, r4
 8002fd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fd8:	461c      	mov	r4, r3
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10e      	bne.n	8002ffe <USB_EPStartXfer+0x346>
 8002fe0:	8823      	ldrh	r3, [r4, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	8023      	strh	r3, [r4, #0]
 8002fec:	8823      	ldrh	r3, [r4, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	8023      	strh	r3, [r4, #0]
 8002ffc:	e0f2      	b.n	80031e4 <USB_EPStartXfer+0x52c>
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	2b3e      	cmp	r3, #62	; 0x3e
 8003002:	d810      	bhi.n	8003026 <USB_EPStartXfer+0x36e>
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <USB_EPStartXfer+0x362>
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3301      	adds	r3, #1
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	b29b      	uxth	r3, r3
 800301e:	029b      	lsls	r3, r3, #10
 8003020:	b29b      	uxth	r3, r3
 8003022:	8023      	strh	r3, [r4, #0]
 8003024:	e0de      	b.n	80031e4 <USB_EPStartXfer+0x52c>
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <USB_EPStartXfer+0x384>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b01      	subs	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	b29b      	uxth	r3, r3
 8003040:	029b      	lsls	r3, r3, #10
 8003042:	b29b      	uxth	r3, r3
 8003044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800304c:	b29b      	uxth	r3, r3
 800304e:	8023      	strh	r3, [r4, #0]
 8003050:	e0c8      	b.n	80031e4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d148      	bne.n	80030ec <USB_EPStartXfer+0x434>
 800305a:	687c      	ldr	r4, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003062:	b29b      	uxth	r3, r3
 8003064:	441c      	add	r4, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	4423      	add	r3, r4
 800306e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003072:	461c      	mov	r4, r3
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10e      	bne.n	8003098 <USB_EPStartXfer+0x3e0>
 800307a:	8823      	ldrh	r3, [r4, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003082:	b29b      	uxth	r3, r3
 8003084:	8023      	strh	r3, [r4, #0]
 8003086:	8823      	ldrh	r3, [r4, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003092:	b29b      	uxth	r3, r3
 8003094:	8023      	strh	r3, [r4, #0]
 8003096:	e03d      	b.n	8003114 <USB_EPStartXfer+0x45c>
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b3e      	cmp	r3, #62	; 0x3e
 800309c:	d810      	bhi.n	80030c0 <USB_EPStartXfer+0x408>
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <USB_EPStartXfer+0x3fc>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	029b      	lsls	r3, r3, #10
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	8023      	strh	r3, [r4, #0]
 80030be:	e029      	b.n	8003114 <USB_EPStartXfer+0x45c>
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <USB_EPStartXfer+0x41e>
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	029b      	lsls	r3, r3, #10
 80030dc:	b29b      	uxth	r3, r3
 80030de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	8023      	strh	r3, [r4, #0]
 80030ea:	e013      	b.n	8003114 <USB_EPStartXfer+0x45c>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10f      	bne.n	8003114 <USB_EPStartXfer+0x45c>
 80030f4:	687c      	ldr	r4, [r7, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	441c      	add	r4, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	4423      	add	r3, r4
 8003108:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800310c:	461c      	mov	r4, r3
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	b29b      	uxth	r3, r3
 8003112:	8023      	strh	r3, [r4, #0]
 8003114:	687c      	ldr	r4, [r7, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	785b      	ldrb	r3, [r3, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d14e      	bne.n	80031bc <USB_EPStartXfer+0x504>
 800311e:	687c      	ldr	r4, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003126:	b29b      	uxth	r3, r3
 8003128:	441c      	add	r4, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4423      	add	r3, r4
 8003132:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003136:	461c      	mov	r4, r3
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10e      	bne.n	800315c <USB_EPStartXfer+0x4a4>
 800313e:	8823      	ldrh	r3, [r4, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003146:	b29b      	uxth	r3, r3
 8003148:	8023      	strh	r3, [r4, #0]
 800314a:	8823      	ldrh	r3, [r4, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003156:	b29b      	uxth	r3, r3
 8003158:	8023      	strh	r3, [r4, #0]
 800315a:	e043      	b.n	80031e4 <USB_EPStartXfer+0x52c>
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	2b3e      	cmp	r3, #62	; 0x3e
 8003160:	d816      	bhi.n	8003190 <USB_EPStartXfer+0x4d8>
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <USB_EPStartXfer+0x4c0>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	3301      	adds	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	b29b      	uxth	r3, r3
 800317c:	029b      	lsls	r3, r3, #10
 800317e:	b29b      	uxth	r3, r3
 8003180:	8023      	strh	r3, [r4, #0]
 8003182:	e02f      	b.n	80031e4 <USB_EPStartXfer+0x52c>
 8003184:	ffff80c0 	.word	0xffff80c0
 8003188:	ffffc080 	.word	0xffffc080
 800318c:	ffff8080 	.word	0xffff8080
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <USB_EPStartXfer+0x4ee>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	029b      	lsls	r3, r3, #10
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8023      	strh	r3, [r4, #0]
 80031ba:	e013      	b.n	80031e4 <USB_EPStartXfer+0x52c>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	785b      	ldrb	r3, [r3, #1]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10f      	bne.n	80031e4 <USB_EPStartXfer+0x52c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	441c      	add	r4, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	4423      	add	r3, r4
 80031d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	b29a      	uxth	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	b29c      	uxth	r4, r3
 80031fc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003200:	b29c      	uxth	r4, r3
 8003202:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003206:	b29c      	uxth	r4, r3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <USB_EPStartXfer+0x56c>)
 8003214:	4323      	orrs	r3, r4
 8003216:	b29b      	uxth	r3, r3
 8003218:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3734      	adds	r7, #52	; 0x34
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	ffff8080 	.word	0xffff8080

08003228 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003228:	b490      	push	{r4, r7}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d018      	beq.n	800326c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800324c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003250:	b29c      	uxth	r4, r3
 8003252:	f084 0310 	eor.w	r3, r4, #16
 8003256:	b29c      	uxth	r4, r3
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <USB_EPSetStall+0x80>)
 8003264:	4323      	orrs	r3, r4
 8003266:	b29b      	uxth	r3, r3
 8003268:	8013      	strh	r3, [r2, #0]
 800326a:	e017      	b.n	800329c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	b29c      	uxth	r4, r3
 8003284:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003288:	b29c      	uxth	r4, r3
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	441a      	add	r2, r3
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <USB_EPSetStall+0x80>)
 8003296:	4323      	orrs	r3, r4
 8003298:	b29b      	uxth	r3, r3
 800329a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc90      	pop	{r4, r7}
 80032a6:	4770      	bx	lr
 80032a8:	ffff8080 	.word	0xffff8080

080032ac <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032ac:	b490      	push	{r4, r7}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	7b1b      	ldrb	r3, [r3, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d17d      	bne.n	80033ba <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d03d      	beq.n	8003342 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29c      	uxth	r4, r3
 80032d4:	4623      	mov	r3, r4
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d014      	beq.n	8003308 <USB_EPClearStall+0x5c>
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	b29c      	uxth	r4, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <USB_EPClearStall+0x11c>)
 8003302:	4323      	orrs	r3, r4
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	78db      	ldrb	r3, [r3, #3]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d054      	beq.n	80033ba <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003326:	b29c      	uxth	r4, r3
 8003328:	f084 0320 	eor.w	r3, r4, #32
 800332c:	b29c      	uxth	r4, r3
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	4b24      	ldr	r3, [pc, #144]	; (80033cc <USB_EPClearStall+0x120>)
 800333a:	4323      	orrs	r3, r4
 800333c:	b29b      	uxth	r3, r3
 800333e:	8013      	strh	r3, [r2, #0]
 8003340:	e03b      	b.n	80033ba <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29c      	uxth	r4, r3
 8003350:	4623      	mov	r3, r4
 8003352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d014      	beq.n	8003384 <USB_EPClearStall+0xd8>
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003370:	b29c      	uxth	r4, r3
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	441a      	add	r2, r3
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <USB_EPClearStall+0x124>)
 800337e:	4323      	orrs	r3, r4
 8003380:	b29b      	uxth	r3, r3
 8003382:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	b29c      	uxth	r4, r3
 800339c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80033a0:	b29c      	uxth	r4, r3
 80033a2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80033a6:	b29c      	uxth	r4, r3
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <USB_EPClearStall+0x120>)
 80033b4:	4323      	orrs	r3, r4
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc90      	pop	{r4, r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	ffff80c0 	.word	0xffff80c0
 80033cc:	ffff8080 	.word	0xffff8080
 80033d0:	ffffc080 	.word	0xffffc080

080033d4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003430:	b29b      	uxth	r3, r3
 8003432:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003434:	68fb      	ldr	r3, [r7, #12]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003456:	b480      	push	{r7}
 8003458:	b08d      	sub	sp, #52	; 0x34
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	4611      	mov	r1, r2
 8003462:	461a      	mov	r2, r3
 8003464:	460b      	mov	r3, r1
 8003466:	80fb      	strh	r3, [r7, #6]
 8003468:	4613      	mov	r3, r2
 800346a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800346c:	88bb      	ldrh	r3, [r7, #4]
 800346e:	3301      	adds	r3, #1
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	005a      	lsls	r2, r3, #1
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800348e:	e01e      	b.n	80034ce <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	3301      	adds	r3, #1
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	3302      	adds	r3, #2
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	3302      	adds	r3, #2
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	3301      	adds	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80034c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ca:	3b01      	subs	r3, #1
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1dd      	bne.n	8003490 <USB_WritePMA+0x3a>
  }
}
 80034d4:	bf00      	nop
 80034d6:	3734      	adds	r7, #52	; 0x34
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80034de:	b480      	push	{r7}
 80034e0:	b08b      	sub	sp, #44	; 0x2c
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	4611      	mov	r1, r2
 80034ea:	461a      	mov	r2, r3
 80034ec:	460b      	mov	r3, r1
 80034ee:	80fb      	strh	r3, [r7, #6]
 80034f0:	4613      	mov	r3, r2
 80034f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80034f4:	88bb      	ldrh	r3, [r7, #4]
 80034f6:	085b      	lsrs	r3, r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	005a      	lsls	r2, r3, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003510:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
 8003516:	e01b      	b.n	8003550 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	3302      	adds	r3, #2
 8003524:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	b2da      	uxtb	r2, r3
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	3302      	adds	r3, #2
 8003548:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	3b01      	subs	r3, #1
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e0      	bne.n	8003518 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003556:	88bb      	ldrh	r3, [r7, #4]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	701a      	strb	r2, [r3, #0]
  }
}
 8003572:	bf00      	nop
 8003574:	372c      	adds	r7, #44	; 0x2c
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800358c:	2302      	movs	r3, #2
 800358e:	2203      	movs	r2, #3
 8003590:	2181      	movs	r1, #129	; 0x81
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f002 fa71 	bl	8005a7a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800359e:	2302      	movs	r3, #2
 80035a0:	2203      	movs	r2, #3
 80035a2:	2101      	movs	r1, #1
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f002 fa68 	bl	8005a7a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80035b2:	2018      	movs	r0, #24
 80035b4:	f002 fb6e 	bl	8005c94 <USBD_static_malloc>
 80035b8:	4602      	mov	r2, r0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	e011      	b.n	80035f4 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035d6:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2200      	movs	r2, #0
 80035dc:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	2304      	movs	r3, #4
 80035ec:	2101      	movs	r1, #1
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f002 fb2d 	bl	8005c4e <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	460b      	mov	r3, r1
 8003608:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800360a:	2181      	movs	r1, #129	; 0x81
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f002 fa5a 	bl	8005ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8003618:	2101      	movs	r1, #1
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f002 fa53 	bl	8005ac6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00e      	beq.n	8003650 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003642:	4618      	mov	r0, r3
 8003644:	f002 fb32 	bl	8005cac <USBD_static_free>
    pdev->pClassData = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800366c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003686:	2b00      	cmp	r3, #0
 8003688:	d051      	beq.n	800372e <USBD_CUSTOM_HID_Setup+0xd2>
 800368a:	2b20      	cmp	r3, #32
 800368c:	f040 80d8 	bne.w	8003840 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	785b      	ldrb	r3, [r3, #1]
 8003694:	3b02      	subs	r3, #2
 8003696:	2b09      	cmp	r3, #9
 8003698:	d841      	bhi.n	800371e <USBD_CUSTOM_HID_Setup+0xc2>
 800369a:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <USBD_CUSTOM_HID_Setup+0x44>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	080036f9 	.word	0x080036f9
 80036a4:	080036d7 	.word	0x080036d7
 80036a8:	0800371f 	.word	0x0800371f
 80036ac:	0800371f 	.word	0x0800371f
 80036b0:	0800371f 	.word	0x0800371f
 80036b4:	0800371f 	.word	0x0800371f
 80036b8:	0800371f 	.word	0x0800371f
 80036bc:	08003709 	.word	0x08003709
 80036c0:	080036e7 	.word	0x080036e7
 80036c4:	080036c9 	.word	0x080036c9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	885b      	ldrh	r3, [r3, #2]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]
          break;
 80036d4:	e02a      	b.n	800372c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3304      	adds	r3, #4
 80036da:	2201      	movs	r2, #1
 80036dc:	4619      	mov	r1, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f001 f98e 	bl	8004a00 <USBD_CtlSendData>
          break;
 80036e4:	e022      	b.n	800372c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	885b      	ldrh	r3, [r3, #2]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
          break;
 80036f6:	e019      	b.n	800372c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	3308      	adds	r3, #8
 80036fc:	2201      	movs	r2, #1
 80036fe:	4619      	mov	r1, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f001 f97d 	bl	8004a00 <USBD_CtlSendData>
          break;
 8003706:	e011      	b.n	800372c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2201      	movs	r2, #1
 800370c:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800370e:	6939      	ldr	r1, [r7, #16]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	88db      	ldrh	r3, [r3, #6]
 8003714:	461a      	mov	r2, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 f9a0 	bl	8004a5c <USBD_CtlPrepareRx>
          break;
 800371c:	e006      	b.n	800372c <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f001 f903 	bl	800492c <USBD_CtlError>
          ret = USBD_FAIL;
 8003726:	2302      	movs	r3, #2
 8003728:	75fb      	strb	r3, [r7, #23]
          break;
 800372a:	bf00      	nop
      }
      break;
 800372c:	e08f      	b.n	800384e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	2b0b      	cmp	r3, #11
 8003734:	d87c      	bhi.n	8003830 <USBD_CUSTOM_HID_Setup+0x1d4>
 8003736:	a201      	add	r2, pc, #4	; (adr r2, 800373c <USBD_CUSTOM_HID_Setup+0xe0>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	0800376d 	.word	0x0800376d
 8003740:	08003831 	.word	0x08003831
 8003744:	08003831 	.word	0x08003831
 8003748:	08003831 	.word	0x08003831
 800374c:	08003831 	.word	0x08003831
 8003750:	08003831 	.word	0x08003831
 8003754:	08003795 	.word	0x08003795
 8003758:	08003831 	.word	0x08003831
 800375c:	08003831 	.word	0x08003831
 8003760:	08003831 	.word	0x08003831
 8003764:	080037e3 	.word	0x080037e3
 8003768:	0800380b 	.word	0x0800380b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003772:	2b03      	cmp	r3, #3
 8003774:	d107      	bne.n	8003786 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003776:	f107 030e 	add.w	r3, r7, #14
 800377a:	2202      	movs	r2, #2
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 f93e 	bl	8004a00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003784:	e05b      	b.n	800383e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f001 f8cf 	bl	800492c <USBD_CtlError>
            ret = USBD_FAIL;
 800378e:	2302      	movs	r3, #2
 8003790:	75fb      	strb	r3, [r7, #23]
          break;
 8003792:	e054      	b.n	800383e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	885b      	ldrh	r3, [r3, #2]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b22      	cmp	r3, #34	; 0x22
 800379e:	d10b      	bne.n	80037b8 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	88db      	ldrh	r3, [r3, #6]
 80037a4:	2b22      	cmp	r3, #34	; 0x22
 80037a6:	bf28      	it	cs
 80037a8:	2322      	movcs	r3, #34	; 0x22
 80037aa:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e00d      	b.n	80037d4 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	885b      	ldrh	r3, [r3, #2]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b21      	cmp	r3, #33	; 0x21
 80037c2:	d107      	bne.n	80037d4 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80037c6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	88db      	ldrh	r3, [r3, #6]
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	bf28      	it	cs
 80037d0:	2309      	movcs	r3, #9
 80037d2:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80037d4:	8bfb      	ldrh	r3, [r7, #30]
 80037d6:	461a      	mov	r2, r3
 80037d8:	69b9      	ldr	r1, [r7, #24]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f001 f910 	bl	8004a00 <USBD_CtlSendData>
          break;
 80037e0:	e02d      	b.n	800383e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d107      	bne.n	80037fc <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	330c      	adds	r3, #12
 80037f0:	2201      	movs	r2, #1
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f001 f903 	bl	8004a00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80037fa:	e020      	b.n	800383e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f001 f894 	bl	800492c <USBD_CtlError>
            ret = USBD_FAIL;
 8003804:	2302      	movs	r3, #2
 8003806:	75fb      	strb	r3, [r7, #23]
          break;
 8003808:	e019      	b.n	800383e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003810:	2b03      	cmp	r3, #3
 8003812:	d106      	bne.n	8003822 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	885b      	ldrh	r3, [r3, #2]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003820:	e00d      	b.n	800383e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8003822:	6839      	ldr	r1, [r7, #0]
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f001 f881 	bl	800492c <USBD_CtlError>
            ret = USBD_FAIL;
 800382a:	2302      	movs	r3, #2
 800382c:	75fb      	strb	r3, [r7, #23]
          break;
 800382e:	e006      	b.n	800383e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f001 f87a 	bl	800492c <USBD_CtlError>
          ret = USBD_FAIL;
 8003838:	2302      	movs	r3, #2
 800383a:	75fb      	strb	r3, [r7, #23]
          break;
 800383c:	bf00      	nop
      }
      break;
 800383e:	e006      	b.n	800384e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f001 f872 	bl	800492c <USBD_CtlError>
      ret = USBD_FAIL;
 8003848:	2302      	movs	r3, #2
 800384a:	75fb      	strb	r3, [r7, #23]
      break;
 800384c:	bf00      	nop
  }
  return ret;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200000c4 	.word	0x200000c4

0800385c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003870:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003878:	2b03      	cmp	r3, #3
 800387a:	d10f      	bne.n	800389c <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	7d1b      	ldrb	r3, [r3, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2201      	movs	r2, #1
 8003888:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	2181      	movs	r1, #129	; 0x81
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f002 f9b9 	bl	8005c08 <USBD_LL_Transmit>
 8003896:	e001      	b.n	800389c <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2229      	movs	r2, #41	; 0x29
 80038b4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80038b6:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000040 	.word	0x20000040

080038c8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2229      	movs	r2, #41	; 0x29
 80038d4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80038d6:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	2000006c 	.word	0x2000006c

080038e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2229      	movs	r2, #41	; 0x29
 80038f4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80038f6:	4b03      	ldr	r3, [pc, #12]	; (8003904 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000098 	.word	0x20000098

08003908 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800391a:	2200      	movs	r2, #0
 800391c:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800393c:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	7810      	ldrb	r0, [r2, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	7852      	ldrb	r2, [r2, #1]
 800394e:	4611      	mov	r1, r2
 8003950:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	2304      	movs	r3, #4
 8003956:	2101      	movs	r1, #1
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f002 f978 	bl	8005c4e <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003976:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10c      	bne.n	800399a <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	7810      	ldrb	r0, [r2, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	7852      	ldrb	r2, [r2, #1]
 8003990:	4611      	mov	r1, r2
 8003992:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	220a      	movs	r2, #10
 80039b0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80039b2:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	200000d0 	.word	0x200000d0

080039c4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80039ce:	2302      	movs	r3, #2
 80039d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003a04:	2302      	movs	r3, #2
 8003a06:	e01a      	b.n	8003a3e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	79fa      	ldrb	r2, [r7, #7]
 8003a34:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f001 ffb4 	bl	80059a4 <USBD_LL_Init>

  return USBD_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e001      	b.n	8003a6c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f001 ffdf 	bl	8005a44 <USBD_LL_Start>

  return USBD_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00c      	beq.n	8003ad8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	4611      	mov	r1, r2
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	460b      	mov	r3, r1
 8003aec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	4611      	mov	r1, r2
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3

  return USBD_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 feca 	bl	80048b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d00c      	beq.n	8003b5e <USBD_LL_SetupStage+0x56>
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d302      	bcc.n	8003b4e <USBD_LL_SetupStage+0x46>
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d010      	beq.n	8003b6e <USBD_LL_SetupStage+0x66>
 8003b4c:	e017      	b.n	8003b7e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f9ca 	bl	8003ef0 <USBD_StdDevReq>
      break;
 8003b5c:	e01a      	b.n	8003b94 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa2c 	bl	8003fc4 <USBD_StdItfReq>
      break;
 8003b6c:	e012      	b.n	8003b94 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa6a 	bl	8004050 <USBD_StdEPReq>
      break;
 8003b7c:	e00a      	b.n	8003b94 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f001 ffb9 	bl	8005b04 <USBD_LL_StallEP>
      break;
 8003b92:	bf00      	nop
  }

  return USBD_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003bac:	7afb      	ldrb	r3, [r7, #11]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d14b      	bne.n	8003c4a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003bb8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d134      	bne.n	8003c2e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d919      	bls.n	8003c04 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	1ad2      	subs	r2, r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d203      	bcs.n	8003bf2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	e002      	b.n	8003bf8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 ff4b 	bl	8004a98 <USBD_CtlContinueRx>
 8003c02:	e038      	b.n	8003c76 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d105      	bne.n	8003c26 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 ff48 	bl	8004abc <USBD_CtlSendStatus>
 8003c2c:	e023      	b.n	8003c76 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003c34:	2b05      	cmp	r3, #5
 8003c36:	d11e      	bne.n	8003c76 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003c40:	2100      	movs	r1, #0
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f001 ff5e 	bl	8005b04 <USBD_LL_StallEP>
 8003c48:	e015      	b.n	8003c76 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d108      	bne.n	8003c72 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	7afa      	ldrb	r2, [r7, #11]
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	4798      	blx	r3
 8003c70:	e001      	b.n	8003c76 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003c72:	2302      	movs	r3, #2
 8003c74:	e000      	b.n	8003c78 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003c8e:	7afb      	ldrb	r3, [r7, #11]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d17f      	bne.n	8003d94 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3314      	adds	r3, #20
 8003c98:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d15c      	bne.n	8003d5e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d915      	bls.n	8003cdc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	1ad2      	subs	r2, r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 feb5 	bl	8004a38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f001 ffba 	bl	8005c4e <USBD_LL_PrepareReceive>
 8003cda:	e04e      	b.n	8003d7a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	6912      	ldr	r2, [r2, #16]
 8003ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ce8:	fb02 f201 	mul.w	r2, r2, r1
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11c      	bne.n	8003d2c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d316      	bcc.n	8003d2c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d20f      	bcs.n	8003d2c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2100      	movs	r1, #0
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fe91 	bl	8004a38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2200      	movs	r2, #0
 8003d22:	2100      	movs	r1, #0
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f001 ff92 	bl	8005c4e <USBD_LL_PrepareReceive>
 8003d2a:	e026      	b.n	8003d7a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d105      	bne.n	8003d4e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f001 fed7 	bl	8005b04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fec3 	bl	8004ae2 <USBD_CtlReceiveStatus>
 8003d5c:	e00d      	b.n	8003d7a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d004      	beq.n	8003d72 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f001 fec5 	bl	8005b04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d11d      	bne.n	8003dc0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff fe83 	bl	8003a90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003d92:	e015      	b.n	8003dc0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d108      	bne.n	8003dbc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	7afa      	ldrb	r2, [r7, #11]
 8003db4:	4611      	mov	r1, r2
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	4798      	blx	r3
 8003dba:	e001      	b.n	8003dc0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e000      	b.n	8003dc2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f001 fe4e 	bl	8005a7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2240      	movs	r2, #64	; 0x40
 8003dea:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003dee:	2340      	movs	r3, #64	; 0x40
 8003df0:	2200      	movs	r2, #0
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f001 fe40 	bl	8005a7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2240      	movs	r2, #64	; 0x40
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6852      	ldr	r2, [r2, #4]
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
  }

  return USBD_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d105      	bne.n	8003eb0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d10b      	bne.n	8003ee6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d004      	beq.n	8003f14 <USBD_StdDevReq+0x24>
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d002      	beq.n	8003f14 <USBD_StdDevReq+0x24>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <USBD_StdDevReq+0x34>
 8003f12:	e04c      	b.n	8003fae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
      break;
 8003f22:	e049      	b.n	8003fb8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	785b      	ldrb	r3, [r3, #1]
 8003f28:	2b09      	cmp	r3, #9
 8003f2a:	d83a      	bhi.n	8003fa2 <USBD_StdDevReq+0xb2>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <USBD_StdDevReq+0x44>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f85 	.word	0x08003f85
 8003f38:	08003f99 	.word	0x08003f99
 8003f3c:	08003fa3 	.word	0x08003fa3
 8003f40:	08003f8f 	.word	0x08003f8f
 8003f44:	08003fa3 	.word	0x08003fa3
 8003f48:	08003f67 	.word	0x08003f67
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003fa3 	.word	0x08003fa3
 8003f54:	08003f7b 	.word	0x08003f7b
 8003f58:	08003f71 	.word	0x08003f71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003f5c:	6839      	ldr	r1, [r7, #0]
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9d4 	bl	800430c <USBD_GetDescriptor>
          break;
 8003f64:	e022      	b.n	8003fac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fb37 	bl	80045dc <USBD_SetAddress>
          break;
 8003f6e:	e01d      	b.n	8003fac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fb74 	bl	8004660 <USBD_SetConfig>
          break;
 8003f78:	e018      	b.n	8003fac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003f7a:	6839      	ldr	r1, [r7, #0]
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fbfd 	bl	800477c <USBD_GetConfig>
          break;
 8003f82:	e013      	b.n	8003fac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fc2c 	bl	80047e4 <USBD_GetStatus>
          break;
 8003f8c:	e00e      	b.n	8003fac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003f8e:	6839      	ldr	r1, [r7, #0]
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fc5a 	bl	800484a <USBD_SetFeature>
          break;
 8003f96:	e009      	b.n	8003fac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fc69 	bl	8004872 <USBD_ClrFeature>
          break;
 8003fa0:	e004      	b.n	8003fac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8003fa2:	6839      	ldr	r1, [r7, #0]
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fcc1 	bl	800492c <USBD_CtlError>
          break;
 8003faa:	bf00      	nop
      }
      break;
 8003fac:	e004      	b.n	8003fb8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fcbb 	bl	800492c <USBD_CtlError>
      break;
 8003fb6:	bf00      	nop
  }

  return ret;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop

08003fc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d003      	beq.n	8003fe6 <USBD_StdItfReq+0x22>
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d001      	beq.n	8003fe6 <USBD_StdItfReq+0x22>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d12a      	bne.n	800403c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fec:	3b01      	subs	r3, #1
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d81d      	bhi.n	800402e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	889b      	ldrh	r3, [r3, #4]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d813      	bhi.n	8004024 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
 800400a:	4603      	mov	r3, r0
 800400c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	88db      	ldrh	r3, [r3, #6]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d110      	bne.n	8004038 <USBD_StdItfReq+0x74>
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fd4d 	bl	8004abc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004022:	e009      	b.n	8004038 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fc80 	bl	800492c <USBD_CtlError>
          break;
 800402c:	e004      	b.n	8004038 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fc7b 	bl	800492c <USBD_CtlError>
          break;
 8004036:	e000      	b.n	800403a <USBD_StdItfReq+0x76>
          break;
 8004038:	bf00      	nop
      }
      break;
 800403a:	e004      	b.n	8004046 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fc74 	bl	800492c <USBD_CtlError>
      break;
 8004044:	bf00      	nop
  }

  return USBD_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	889b      	ldrh	r3, [r3, #4]
 8004062:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800406c:	2b20      	cmp	r3, #32
 800406e:	d004      	beq.n	800407a <USBD_StdEPReq+0x2a>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d002      	beq.n	800407a <USBD_StdEPReq+0x2a>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <USBD_StdEPReq+0x3a>
 8004078:	e13d      	b.n	80042f6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	6839      	ldr	r1, [r7, #0]
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
      break;
 8004088:	e13a      	b.n	8004300 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004092:	2b20      	cmp	r3, #32
 8004094:	d10a      	bne.n	80040ac <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	e12a      	b.n	8004302 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d03e      	beq.n	8004132 <USBD_StdEPReq+0xe2>
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d002      	beq.n	80040be <USBD_StdEPReq+0x6e>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d070      	beq.n	800419e <USBD_StdEPReq+0x14e>
 80040bc:	e115      	b.n	80042ea <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d002      	beq.n	80040ce <USBD_StdEPReq+0x7e>
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d015      	beq.n	80040f8 <USBD_StdEPReq+0xa8>
 80040cc:	e02b      	b.n	8004126 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80040ce:	7bbb      	ldrb	r3, [r7, #14]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00c      	beq.n	80040ee <USBD_StdEPReq+0x9e>
 80040d4:	7bbb      	ldrb	r3, [r7, #14]
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d009      	beq.n	80040ee <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80040da:	7bbb      	ldrb	r3, [r7, #14]
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f001 fd10 	bl	8005b04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80040e4:	2180      	movs	r1, #128	; 0x80
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f001 fd0c 	bl	8005b04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80040ec:	e020      	b.n	8004130 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80040ee:	6839      	ldr	r1, [r7, #0]
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fc1b 	bl	800492c <USBD_CtlError>
              break;
 80040f6:	e01b      	b.n	8004130 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	885b      	ldrh	r3, [r3, #2]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10e      	bne.n	800411e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004100:	7bbb      	ldrb	r3, [r7, #14]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <USBD_StdEPReq+0xce>
 8004106:	7bbb      	ldrb	r3, [r7, #14]
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d008      	beq.n	800411e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	88db      	ldrh	r3, [r3, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004114:	7bbb      	ldrb	r3, [r7, #14]
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f001 fcf3 	bl	8005b04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fccc 	bl	8004abc <USBD_CtlSendStatus>

              break;
 8004124:	e004      	b.n	8004130 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004126:	6839      	ldr	r1, [r7, #0]
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fbff 	bl	800492c <USBD_CtlError>
              break;
 800412e:	bf00      	nop
          }
          break;
 8004130:	e0e0      	b.n	80042f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004138:	2b02      	cmp	r3, #2
 800413a:	d002      	beq.n	8004142 <USBD_StdEPReq+0xf2>
 800413c:	2b03      	cmp	r3, #3
 800413e:	d015      	beq.n	800416c <USBD_StdEPReq+0x11c>
 8004140:	e026      	b.n	8004190 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004142:	7bbb      	ldrb	r3, [r7, #14]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00c      	beq.n	8004162 <USBD_StdEPReq+0x112>
 8004148:	7bbb      	ldrb	r3, [r7, #14]
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d009      	beq.n	8004162 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800414e:	7bbb      	ldrb	r3, [r7, #14]
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f001 fcd6 	bl	8005b04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004158:	2180      	movs	r1, #128	; 0x80
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f001 fcd2 	bl	8005b04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004160:	e01c      	b.n	800419c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004162:	6839      	ldr	r1, [r7, #0]
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fbe1 	bl	800492c <USBD_CtlError>
              break;
 800416a:	e017      	b.n	800419c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	885b      	ldrh	r3, [r3, #2]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d112      	bne.n	800419a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004174:	7bbb      	ldrb	r3, [r7, #14]
 8004176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800417e:	7bbb      	ldrb	r3, [r7, #14]
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f001 fcdd 	bl	8005b42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fc97 	bl	8004abc <USBD_CtlSendStatus>
              }
              break;
 800418e:	e004      	b.n	800419a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fbca 	bl	800492c <USBD_CtlError>
              break;
 8004198:	e000      	b.n	800419c <USBD_StdEPReq+0x14c>
              break;
 800419a:	bf00      	nop
          }
          break;
 800419c:	e0aa      	b.n	80042f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d002      	beq.n	80041ae <USBD_StdEPReq+0x15e>
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d032      	beq.n	8004212 <USBD_StdEPReq+0x1c2>
 80041ac:	e097      	b.n	80042de <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80041ae:	7bbb      	ldrb	r3, [r7, #14]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <USBD_StdEPReq+0x174>
 80041b4:	7bbb      	ldrb	r3, [r7, #14]
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d004      	beq.n	80041c4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fbb5 	bl	800492c <USBD_CtlError>
                break;
 80041c2:	e091      	b.n	80042e8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80041c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	da0b      	bge.n	80041e4 <USBD_StdEPReq+0x194>
 80041cc:	7bbb      	ldrb	r3, [r7, #14]
 80041ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	3310      	adds	r3, #16
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4413      	add	r3, r2
 80041e0:	3304      	adds	r3, #4
 80041e2:	e00b      	b.n	80041fc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80041e4:	7bbb      	ldrb	r3, [r7, #14]
 80041e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	3304      	adds	r3, #4
 80041fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2202      	movs	r2, #2
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fbf8 	bl	8004a00 <USBD_CtlSendData>
              break;
 8004210:	e06a      	b.n	80042e8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004212:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004216:	2b00      	cmp	r3, #0
 8004218:	da11      	bge.n	800423e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800421a:	7bbb      	ldrb	r3, [r7, #14]
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	3318      	adds	r3, #24
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d117      	bne.n	8004264 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fb78 	bl	800492c <USBD_CtlError>
                  break;
 800423c:	e054      	b.n	80042e8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800423e:	7bbb      	ldrb	r3, [r7, #14]
 8004240:	f003 020f 	and.w	r2, r3, #15
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800425a:	6839      	ldr	r1, [r7, #0]
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fb65 	bl	800492c <USBD_CtlError>
                  break;
 8004262:	e041      	b.n	80042e8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004268:	2b00      	cmp	r3, #0
 800426a:	da0b      	bge.n	8004284 <USBD_StdEPReq+0x234>
 800426c:	7bbb      	ldrb	r3, [r7, #14]
 800426e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	3310      	adds	r3, #16
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	e00b      	b.n	800429c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004284:	7bbb      	ldrb	r3, [r7, #14]
 8004286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	3304      	adds	r3, #4
 800429c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800429e:	7bbb      	ldrb	r3, [r7, #14]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <USBD_StdEPReq+0x25a>
 80042a4:	7bbb      	ldrb	r3, [r7, #14]
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d103      	bne.n	80042b2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e00e      	b.n	80042d0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80042b2:	7bbb      	ldrb	r3, [r7, #14]
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f001 fc62 	bl	8005b80 <USBD_LL_IsStallEP>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e002      	b.n	80042d0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2202      	movs	r2, #2
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fb92 	bl	8004a00 <USBD_CtlSendData>
              break;
 80042dc:	e004      	b.n	80042e8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fb23 	bl	800492c <USBD_CtlError>
              break;
 80042e6:	bf00      	nop
          }
          break;
 80042e8:	e004      	b.n	80042f4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fb1d 	bl	800492c <USBD_CtlError>
          break;
 80042f2:	bf00      	nop
      }
      break;
 80042f4:	e004      	b.n	8004300 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fb17 	bl	800492c <USBD_CtlError>
      break;
 80042fe:	bf00      	nop
  }

  return ret;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	885b      	ldrh	r3, [r3, #2]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	2b06      	cmp	r3, #6
 800432e:	f200 8128 	bhi.w	8004582 <USBD_GetDescriptor+0x276>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <USBD_GetDescriptor+0x2c>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	08004355 	.word	0x08004355
 800433c:	0800436d 	.word	0x0800436d
 8004340:	080043ad 	.word	0x080043ad
 8004344:	08004583 	.word	0x08004583
 8004348:	08004583 	.word	0x08004583
 800434c:	08004523 	.word	0x08004523
 8004350:	0800454f 	.word	0x0800454f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	7c12      	ldrb	r2, [r2, #16]
 8004360:	f107 0108 	add.w	r1, r7, #8
 8004364:	4610      	mov	r0, r2
 8004366:	4798      	blx	r3
 8004368:	60f8      	str	r0, [r7, #12]
      break;
 800436a:	e112      	b.n	8004592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7c1b      	ldrb	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10d      	bne.n	8004390 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	f107 0208 	add.w	r2, r7, #8
 8004380:	4610      	mov	r0, r2
 8004382:	4798      	blx	r3
 8004384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3301      	adds	r3, #1
 800438a:	2202      	movs	r2, #2
 800438c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800438e:	e100      	b.n	8004592 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f107 0208 	add.w	r2, r7, #8
 800439c:	4610      	mov	r0, r2
 800439e:	4798      	blx	r3
 80043a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3301      	adds	r3, #1
 80043a6:	2202      	movs	r2, #2
 80043a8:	701a      	strb	r2, [r3, #0]
      break;
 80043aa:	e0f2      	b.n	8004592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	885b      	ldrh	r3, [r3, #2]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	f200 80ac 	bhi.w	8004510 <USBD_GetDescriptor+0x204>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <USBD_GetDescriptor+0xb4>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043d9 	.word	0x080043d9
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	08004441 	.word	0x08004441
 80043cc:	08004475 	.word	0x08004475
 80043d0:	080044a9 	.word	0x080044a9
 80043d4:	080044dd 	.word	0x080044dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	7c12      	ldrb	r2, [r2, #16]
 80043f0:	f107 0108 	add.w	r1, r7, #8
 80043f4:	4610      	mov	r0, r2
 80043f6:	4798      	blx	r3
 80043f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80043fa:	e091      	b.n	8004520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa94 	bl	800492c <USBD_CtlError>
            err++;
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	3301      	adds	r3, #1
 8004408:	72fb      	strb	r3, [r7, #11]
          break;
 800440a:	e089      	b.n	8004520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00b      	beq.n	8004430 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	7c12      	ldrb	r2, [r2, #16]
 8004424:	f107 0108 	add.w	r1, r7, #8
 8004428:	4610      	mov	r0, r2
 800442a:	4798      	blx	r3
 800442c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800442e:	e077      	b.n	8004520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004430:	6839      	ldr	r1, [r7, #0]
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fa7a 	bl	800492c <USBD_CtlError>
            err++;
 8004438:	7afb      	ldrb	r3, [r7, #11]
 800443a:	3301      	adds	r3, #1
 800443c:	72fb      	strb	r3, [r7, #11]
          break;
 800443e:	e06f      	b.n	8004520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00b      	beq.n	8004464 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	7c12      	ldrb	r2, [r2, #16]
 8004458:	f107 0108 	add.w	r1, r7, #8
 800445c:	4610      	mov	r0, r2
 800445e:	4798      	blx	r3
 8004460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004462:	e05d      	b.n	8004520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa60 	bl	800492c <USBD_CtlError>
            err++;
 800446c:	7afb      	ldrb	r3, [r7, #11]
 800446e:	3301      	adds	r3, #1
 8004470:	72fb      	strb	r3, [r7, #11]
          break;
 8004472:	e055      	b.n	8004520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	7c12      	ldrb	r2, [r2, #16]
 800448c:	f107 0108 	add.w	r1, r7, #8
 8004490:	4610      	mov	r0, r2
 8004492:	4798      	blx	r3
 8004494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004496:	e043      	b.n	8004520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa46 	bl	800492c <USBD_CtlError>
            err++;
 80044a0:	7afb      	ldrb	r3, [r7, #11]
 80044a2:	3301      	adds	r3, #1
 80044a4:	72fb      	strb	r3, [r7, #11]
          break;
 80044a6:	e03b      	b.n	8004520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	7c12      	ldrb	r2, [r2, #16]
 80044c0:	f107 0108 	add.w	r1, r7, #8
 80044c4:	4610      	mov	r0, r2
 80044c6:	4798      	blx	r3
 80044c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80044ca:	e029      	b.n	8004520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80044cc:	6839      	ldr	r1, [r7, #0]
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fa2c 	bl	800492c <USBD_CtlError>
            err++;
 80044d4:	7afb      	ldrb	r3, [r7, #11]
 80044d6:	3301      	adds	r3, #1
 80044d8:	72fb      	strb	r3, [r7, #11]
          break;
 80044da:	e021      	b.n	8004520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	7c12      	ldrb	r2, [r2, #16]
 80044f4:	f107 0108 	add.w	r1, r7, #8
 80044f8:	4610      	mov	r0, r2
 80044fa:	4798      	blx	r3
 80044fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80044fe:	e00f      	b.n	8004520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fa12 	bl	800492c <USBD_CtlError>
            err++;
 8004508:	7afb      	ldrb	r3, [r7, #11]
 800450a:	3301      	adds	r3, #1
 800450c:	72fb      	strb	r3, [r7, #11]
          break;
 800450e:	e007      	b.n	8004520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa0a 	bl	800492c <USBD_CtlError>
          err++;
 8004518:	7afb      	ldrb	r3, [r7, #11]
 800451a:	3301      	adds	r3, #1
 800451c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800451e:	e038      	b.n	8004592 <USBD_GetDescriptor+0x286>
 8004520:	e037      	b.n	8004592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	7c1b      	ldrb	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	f107 0208 	add.w	r2, r7, #8
 8004536:	4610      	mov	r0, r2
 8004538:	4798      	blx	r3
 800453a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800453c:	e029      	b.n	8004592 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f9f3 	bl	800492c <USBD_CtlError>
        err++;
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	3301      	adds	r3, #1
 800454a:	72fb      	strb	r3, [r7, #11]
      break;
 800454c:	e021      	b.n	8004592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7c1b      	ldrb	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10d      	bne.n	8004572 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f107 0208 	add.w	r2, r7, #8
 8004562:	4610      	mov	r0, r2
 8004564:	4798      	blx	r3
 8004566:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3301      	adds	r3, #1
 800456c:	2207      	movs	r2, #7
 800456e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004570:	e00f      	b.n	8004592 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9d9 	bl	800492c <USBD_CtlError>
        err++;
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	3301      	adds	r3, #1
 800457e:	72fb      	strb	r3, [r7, #11]
      break;
 8004580:	e007      	b.n	8004592 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004582:	6839      	ldr	r1, [r7, #0]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9d1 	bl	800492c <USBD_CtlError>
      err++;
 800458a:	7afb      	ldrb	r3, [r7, #11]
 800458c:	3301      	adds	r3, #1
 800458e:	72fb      	strb	r3, [r7, #11]
      break;
 8004590:	bf00      	nop
  }

  if (err != 0U)
 8004592:	7afb      	ldrb	r3, [r7, #11]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d11c      	bne.n	80045d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d011      	beq.n	80045c2 <USBD_GetDescriptor+0x2b6>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	88db      	ldrh	r3, [r3, #6]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	88da      	ldrh	r2, [r3, #6]
 80045aa:	893b      	ldrh	r3, [r7, #8]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bf28      	it	cs
 80045b0:	4613      	movcs	r3, r2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80045b6:	893b      	ldrh	r3, [r7, #8]
 80045b8:	461a      	mov	r2, r3
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa1f 	bl	8004a00 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	88db      	ldrh	r3, [r3, #6]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa76 	bl	8004abc <USBD_CtlSendStatus>
 80045d0:	e000      	b.n	80045d4 <USBD_GetDescriptor+0x2c8>
    return;
 80045d2:	bf00      	nop
    }
  }
}
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop

080045dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	889b      	ldrh	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d130      	bne.n	8004650 <USBD_SetAddress+0x74>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	88db      	ldrh	r3, [r3, #6]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d12c      	bne.n	8004650 <USBD_SetAddress+0x74>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	885b      	ldrh	r3, [r3, #2]
 80045fa:	2b7f      	cmp	r3, #127	; 0x7f
 80045fc:	d828      	bhi.n	8004650 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	885b      	ldrh	r3, [r3, #2]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004608:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004610:	2b03      	cmp	r3, #3
 8004612:	d104      	bne.n	800461e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f988 	bl	800492c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800461c:	e01c      	b.n	8004658 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f001 facd 	bl	8005bca <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fa43 	bl	8004abc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004644:	e008      	b.n	8004658 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800464e:	e003      	b.n	8004658 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f96a 	bl	800492c <USBD_CtlError>
  }
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	885b      	ldrh	r3, [r3, #2]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	4b41      	ldr	r3, [pc, #260]	; (8004778 <USBD_SetConfig+0x118>)
 8004672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004674:	4b40      	ldr	r3, [pc, #256]	; (8004778 <USBD_SetConfig+0x118>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d904      	bls.n	8004686 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f954 	bl	800492c <USBD_CtlError>
 8004684:	e075      	b.n	8004772 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800468c:	2b02      	cmp	r3, #2
 800468e:	d002      	beq.n	8004696 <USBD_SetConfig+0x36>
 8004690:	2b03      	cmp	r3, #3
 8004692:	d023      	beq.n	80046dc <USBD_SetConfig+0x7c>
 8004694:	e062      	b.n	800475c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <USBD_SetConfig+0x118>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01a      	beq.n	80046d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800469e:	4b36      	ldr	r3, [pc, #216]	; (8004778 <USBD_SetConfig+0x118>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2203      	movs	r2, #3
 80046ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <USBD_SetConfig+0x118>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff f9f4 	bl	8003aa4 <USBD_SetClassConfig>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d104      	bne.n	80046cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f931 	bl	800492c <USBD_CtlError>
            return;
 80046ca:	e052      	b.n	8004772 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9f5 	bl	8004abc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80046d2:	e04e      	b.n	8004772 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f9f1 	bl	8004abc <USBD_CtlSendStatus>
        break;
 80046da:	e04a      	b.n	8004772 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80046dc:	4b26      	ldr	r3, [pc, #152]	; (8004778 <USBD_SetConfig+0x118>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d112      	bne.n	800470a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80046ec:	4b22      	ldr	r3, [pc, #136]	; (8004778 <USBD_SetConfig+0x118>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <USBD_SetConfig+0x118>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	4619      	mov	r1, r3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff f9f0 	bl	8003ae2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f9da 	bl	8004abc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004708:	e033      	b.n	8004772 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <USBD_SetConfig+0x118>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d01d      	beq.n	8004754 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff f9de 	bl	8003ae2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <USBD_SetConfig+0x118>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <USBD_SetConfig+0x118>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff f9b4 	bl	8003aa4 <USBD_SetClassConfig>
 800473c:	4603      	mov	r3, r0
 800473e:	2b02      	cmp	r3, #2
 8004740:	d104      	bne.n	800474c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004742:	6839      	ldr	r1, [r7, #0]
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8f1 	bl	800492c <USBD_CtlError>
            return;
 800474a:	e012      	b.n	8004772 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f9b5 	bl	8004abc <USBD_CtlSendStatus>
        break;
 8004752:	e00e      	b.n	8004772 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f9b1 	bl	8004abc <USBD_CtlSendStatus>
        break;
 800475a:	e00a      	b.n	8004772 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800475c:	6839      	ldr	r1, [r7, #0]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8e4 	bl	800492c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <USBD_SetConfig+0x118>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff f9b9 	bl	8003ae2 <USBD_ClrClassConfig>
        break;
 8004770:	bf00      	nop
    }
  }
}
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000188 	.word	0x20000188

0800477c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	88db      	ldrh	r3, [r3, #6]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d004      	beq.n	8004798 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f8cb 	bl	800492c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004796:	e021      	b.n	80047dc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	db17      	blt.n	80047d2 <USBD_GetConfig+0x56>
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	dd02      	ble.n	80047ac <USBD_GetConfig+0x30>
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d00b      	beq.n	80047c2 <USBD_GetConfig+0x46>
 80047aa:	e012      	b.n	80047d2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3308      	adds	r3, #8
 80047b6:	2201      	movs	r2, #1
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f920 	bl	8004a00 <USBD_CtlSendData>
        break;
 80047c0:	e00c      	b.n	80047dc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2201      	movs	r2, #1
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f918 	bl	8004a00 <USBD_CtlSendData>
        break;
 80047d0:	e004      	b.n	80047dc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f8a9 	bl	800492c <USBD_CtlError>
        break;
 80047da:	bf00      	nop
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047f4:	3b01      	subs	r3, #1
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d81e      	bhi.n	8004838 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	88db      	ldrh	r3, [r3, #6]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d004      	beq.n	800480c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004802:	6839      	ldr	r1, [r7, #0]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f891 	bl	800492c <USBD_CtlError>
        break;
 800480a:	e01a      	b.n	8004842 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f043 0202 	orr.w	r2, r3, #2
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	330c      	adds	r3, #12
 800482c:	2202      	movs	r2, #2
 800482e:	4619      	mov	r1, r3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8e5 	bl	8004a00 <USBD_CtlSendData>
      break;
 8004836:	e004      	b.n	8004842 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f876 	bl	800492c <USBD_CtlError>
      break;
 8004840:	bf00      	nop
  }
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	885b      	ldrh	r3, [r3, #2]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f929 	bl	8004abc <USBD_CtlSendStatus>
  }
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004882:	3b01      	subs	r3, #1
 8004884:	2b02      	cmp	r3, #2
 8004886:	d80b      	bhi.n	80048a0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	885b      	ldrh	r3, [r3, #2]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10c      	bne.n	80048aa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f90f 	bl	8004abc <USBD_CtlSendStatus>
      }
      break;
 800489e:	e004      	b.n	80048aa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80048a0:	6839      	ldr	r1, [r7, #0]
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f842 	bl	800492c <USBD_CtlError>
      break;
 80048a8:	e000      	b.n	80048ac <USBD_ClrFeature+0x3a>
      break;
 80048aa:	bf00      	nop
  }
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	785a      	ldrb	r2, [r3, #1]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	3302      	adds	r3, #2
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	3303      	adds	r3, #3
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	3304      	adds	r3, #4
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	3305      	adds	r3, #5
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4413      	add	r3, r2
 8004900:	b29a      	uxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3306      	adds	r3, #6
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	b29a      	uxth	r2, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	3307      	adds	r3, #7
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	b29b      	uxth	r3, r3
 800491a:	4413      	add	r3, r2
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	80da      	strh	r2, [r3, #6]

}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004936:	2180      	movs	r1, #128	; 0x80
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f001 f8e3 	bl	8005b04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800493e:	2100      	movs	r1, #0
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f001 f8df 	bl	8005b04 <USBD_LL_StallEP>
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d032      	beq.n	80049ca <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f834 	bl	80049d2 <USBD_GetLen>
 800496a:	4603      	mov	r3, r0
 800496c:	3301      	adds	r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	75fa      	strb	r2, [r7, #23]
 800497e:	461a      	mov	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4413      	add	r3, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	75fa      	strb	r2, [r7, #23]
 8004990:	461a      	mov	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4413      	add	r3, r2
 8004996:	2203      	movs	r2, #3
 8004998:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800499a:	e012      	b.n	80049c2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	60fa      	str	r2, [r7, #12]
 80049a2:	7dfa      	ldrb	r2, [r7, #23]
 80049a4:	1c51      	adds	r1, r2, #1
 80049a6:	75f9      	strb	r1, [r7, #23]
 80049a8:	4611      	mov	r1, r2
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	440a      	add	r2, r1
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	75fa      	strb	r2, [r7, #23]
 80049b8:	461a      	mov	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e8      	bne.n	800499c <USBD_GetString+0x4e>
    }
  }
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80049de:	e005      	b.n	80049ec <USBD_GetLen+0x1a>
  {
    len++;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	3301      	adds	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3301      	adds	r3, #1
 80049ea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1f5      	bne.n	80049e0 <USBD_GetLen+0xe>
  }

  return len;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	2100      	movs	r1, #0
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f001 f8ed 	bl	8005c08 <USBD_LL_Transmit>

  return USBD_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f001 f8db 	bl	8005c08 <USBD_LL_Transmit>

  return USBD_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	2100      	movs	r1, #0
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f001 f8e0 	bl	8005c4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	2100      	movs	r1, #0
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f001 f8ce 	bl	8005c4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004acc:	2300      	movs	r3, #0
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f001 f898 	bl	8005c08 <USBD_LL_Transmit>

  return USBD_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2205      	movs	r2, #5
 8004aee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004af2:	2300      	movs	r3, #0
 8004af4:	2200      	movs	r2, #0
 8004af6:	2100      	movs	r1, #0
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f001 f8a8 	bl	8005c4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <sendCmd>:

extern SPI_HandleTypeDef hspi1;

static void sendInitSequence(LcdCtrl* lcdctrl);

static void sendCmd(uint8_t cmd) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	71fb      	strb	r3, [r7, #7]
    switchToCommands();
 8004b12:	2200      	movs	r2, #0
 8004b14:	2110      	movs	r1, #16
 8004b16:	480b      	ldr	r0, [pc, #44]	; (8004b44 <sendCmd+0x3c>)
 8004b18:	f7fb fe1b 	bl	8000752 <HAL_GPIO_WritePin>
    selectDisplay();
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4808      	ldr	r0, [pc, #32]	; (8004b44 <sendCmd+0x3c>)
 8004b22:	f7fb fe16 	bl	8000752 <HAL_GPIO_WritePin>
//    LL_SPI_TransmitData8(SPI1, cmd);
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 1);
 8004b26:	1df9      	adds	r1, r7, #7
 8004b28:	2301      	movs	r3, #1
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4806      	ldr	r0, [pc, #24]	; (8004b48 <sendCmd+0x40>)
 8004b2e:	f7fd fa10 	bl	8001f52 <HAL_SPI_Transmit>
    unselectDisplay();
 8004b32:	2201      	movs	r2, #1
 8004b34:	2101      	movs	r1, #1
 8004b36:	4803      	ldr	r0, [pc, #12]	; (8004b44 <sendCmd+0x3c>)
 8004b38:	f7fb fe0b 	bl	8000752 <HAL_GPIO_WritePin>
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40010800 	.word	0x40010800
 8004b48:	200001b4 	.word	0x200001b4

08004b4c <sendData>:

static void sendData(uint8_t data) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
    switchToData();
 8004b56:	2201      	movs	r2, #1
 8004b58:	2110      	movs	r1, #16
 8004b5a:	480b      	ldr	r0, [pc, #44]	; (8004b88 <sendData+0x3c>)
 8004b5c:	f7fb fdf9 	bl	8000752 <HAL_GPIO_WritePin>
    selectDisplay();
 8004b60:	2200      	movs	r2, #0
 8004b62:	2101      	movs	r1, #1
 8004b64:	4808      	ldr	r0, [pc, #32]	; (8004b88 <sendData+0x3c>)
 8004b66:	f7fb fdf4 	bl	8000752 <HAL_GPIO_WritePin>
//    LL_SPI_TransmitData8(SPI1, data);
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8004b6a:	1df9      	adds	r1, r7, #7
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	2201      	movs	r2, #1
 8004b70:	4806      	ldr	r0, [pc, #24]	; (8004b8c <sendData+0x40>)
 8004b72:	f7fd f9ee 	bl	8001f52 <HAL_SPI_Transmit>
    unselectDisplay();
 8004b76:	2201      	movs	r2, #1
 8004b78:	2101      	movs	r1, #1
 8004b7a:	4803      	ldr	r0, [pc, #12]	; (8004b88 <sendData+0x3c>)
 8004b7c:	f7fb fde9 	bl	8000752 <HAL_GPIO_WritePin>
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40010800 	.word	0x40010800
 8004b8c:	200001b4 	.word	0x200001b4

08004b90 <LCD_Init>:

void LCD_Init(LcdCtrl* lcdctrl) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
    if (!lcdctrl) return;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d016      	beq.n	8004bcc <LCD_Init+0x3c>

    HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	480c      	ldr	r0, [pc, #48]	; (8004bd4 <LCD_Init+0x44>)
 8004ba4:	f7fb fdd5 	bl	8000752 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2101      	movs	r1, #1
 8004bac:	480a      	ldr	r0, [pc, #40]	; (8004bd8 <LCD_Init+0x48>)
 8004bae:	f7fb fdd0 	bl	8000752 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	4808      	ldr	r0, [pc, #32]	; (8004bd8 <LCD_Init+0x48>)
 8004bb8:	f7fb fdcb 	bl	8000752 <HAL_GPIO_WritePin>

    sendInitSequence(lcdctrl);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f97b 	bl	8004eb8 <sendInitSequence>

    LCD_ChangeRotation(lcdctrl, LCD_ORIENTATION_DEFAULT);
 8004bc2:	2102      	movs	r1, #2
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f809 	bl	8004bdc <LCD_ChangeRotation>
 8004bca:	e000      	b.n	8004bce <LCD_Init+0x3e>
    if (!lcdctrl) return;
 8004bcc:	bf00      	nop
}
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40010c00 	.word	0x40010c00
 8004bd8:	40010800 	.word	0x40010800

08004bdc <LCD_ChangeRotation>:

void LCD_ChangeRotation(LcdCtrl* lcdctrl, LcdOrientation orientation) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
    if (!lcdctrl) return;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d058      	beq.n	8004ca0 <LCD_ChangeRotation+0xc4>
    if (LCD_ORIENTATION_UNDEFINED == orientation) return;
 8004bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d055      	beq.n	8004ca4 <LCD_ChangeRotation+0xc8>

    uint8_t command = DISPLAY_COLOR_SPACE;
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	73fb      	strb	r3, [r7, #15]

    lcdctrl->orientation = orientation;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	701a      	strb	r2, [r3, #0]
    switch (orientation) {
 8004c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c06:	3301      	adds	r3, #1
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	d83f      	bhi.n	8004c8c <LCD_ChangeRotation+0xb0>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <LCD_ChangeRotation+0x38>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c8d 	.word	0x08004c8d
 8004c18:	08004c8d 	.word	0x08004c8d
 8004c1c:	08004c2d 	.word	0x08004c2d
 8004c20:	08004c45 	.word	0x08004c45
 8004c24:	08004c5d 	.word	0x08004c5d
 8004c28:	08004c75 	.word	0x08004c75
    case LCD_ORIENTATION_VERTICAL:
        lcdctrl->width = DISPLAY_HEIGHT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	22f0      	movs	r2, #240	; 0xf0
 8004c30:	805a      	strh	r2, [r3, #2]
        lcdctrl->height = DISPLAY_WIDTH;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c38:	809a      	strh	r2, [r3, #4]
        command |= 0x40; // TODO check this orientation case
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c40:	73fb      	strb	r3, [r7, #15]
        break;
 8004c42:	e023      	b.n	8004c8c <LCD_ChangeRotation+0xb0>
    case LCD_ORIENTATION_HORIZONTAL:
        lcdctrl->width = DISPLAY_WIDTH;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c4a:	805a      	strh	r2, [r3, #2]
        lcdctrl->height = DISPLAY_HEIGHT;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	22f0      	movs	r2, #240	; 0xf0
 8004c50:	809a      	strh	r2, [r3, #4]
        command |= 0x20; // TODO check this orientation case
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	f043 0320 	orr.w	r3, r3, #32
 8004c58:	73fb      	strb	r3, [r7, #15]
        break;
 8004c5a:	e017      	b.n	8004c8c <LCD_ChangeRotation+0xb0>
    case LCD_ORIENTATION_VERTICAL_INVERTER:
        lcdctrl->width = DISPLAY_HEIGHT;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	22f0      	movs	r2, #240	; 0xf0
 8004c60:	805a      	strh	r2, [r3, #2]
        lcdctrl->height = DISPLAY_WIDTH;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c68:	809a      	strh	r2, [r3, #4]
        command |= 0x80; // TODO check this orientation case
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c70:	73fb      	strb	r3, [r7, #15]
        break;
 8004c72:	e00b      	b.n	8004c8c <LCD_ChangeRotation+0xb0>
    case LCD_ORIENTATION_HORIZONTAL_INVERTER:
        lcdctrl->width = DISPLAY_WIDTH;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c7a:	805a      	strh	r2, [r3, #2]
        lcdctrl->height = DISPLAY_HEIGHT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	22f0      	movs	r2, #240	; 0xf0
 8004c80:	809a      	strh	r2, [r3, #4]
        command |= 0xE0; // TODO check this orientation case
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	f063 031f 	orn	r3, r3, #31
 8004c88:	73fb      	strb	r3, [r7, #15]
        break;
 8004c8a:	bf00      	nop
    case LCD_ORIENTATION_UNDEFINED: break; // compiler leaves warning here despite initial check
    }

    sendCmd(ILI9341_CMD_Memory_Access_Control);
 8004c8c:	2336      	movs	r3, #54	; 0x36
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff ff39 	bl	8004b08 <sendCmd>
    sendData(command);
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff57 	bl	8004b4c <sendData>
 8004c9e:	e002      	b.n	8004ca6 <LCD_ChangeRotation+0xca>
    if (!lcdctrl) return;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <LCD_ChangeRotation+0xca>
    if (LCD_ORIENTATION_UNDEFINED == orientation) return;
 8004ca4:	bf00      	nop

}
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <LCD_SetArea>:

void LCD_SetArea(LcdCtrl* lcdctrl, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	817b      	strh	r3, [r7, #10]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	813b      	strh	r3, [r7, #8]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	80fb      	strh	r3, [r7, #6]
    if (!lcdctrl) return;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d04c      	beq.n	8004d66 <LCD_SetArea+0xba>

    if (x1 < 0) x1 = 0;
    if (x2 >= lcdctrl->width) x2 = lcdctrl->width - 1;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	885b      	ldrh	r3, [r3, #2]
 8004cd0:	88fa      	ldrh	r2, [r7, #6]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d303      	bcc.n	8004cde <LCD_SetArea+0x32>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	885b      	ldrh	r3, [r3, #2]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	80fb      	strh	r3, [r7, #6]
    if (y1 < 0) y1 = 0;
    if (y2 >= lcdctrl->height) y2 = lcdctrl->height - 1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	889b      	ldrh	r3, [r3, #4]
 8004ce2:	8b3a      	ldrh	r2, [r7, #24]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d303      	bcc.n	8004cf0 <LCD_SetArea+0x44>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	889b      	ldrh	r3, [r3, #4]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	833b      	strh	r3, [r7, #24]

    sendCmd(ILI9341_CMD_Column_Address_Set);
 8004cf0:	232a      	movs	r3, #42	; 0x2a
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff07 	bl	8004b08 <sendCmd>
    sendData(x1 >> 8);
 8004cfa:	897b      	ldrh	r3, [r7, #10]
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff ff22 	bl	8004b4c <sendData>
    sendData(x1);
 8004d08:	897b      	ldrh	r3, [r7, #10]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff ff1d 	bl	8004b4c <sendData>
    sendData(x2 >> 8);
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff ff16 	bl	8004b4c <sendData>
    sendData(x2);
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff11 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Page_Address_Set);
 8004d2a:	232b      	movs	r3, #43	; 0x2b
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff feea 	bl	8004b08 <sendCmd>
    sendData(y1 >> 8);
 8004d34:	893b      	ldrh	r3, [r7, #8]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ff05 	bl	8004b4c <sendData>
    sendData(y1);
 8004d42:	893b      	ldrh	r3, [r7, #8]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff00 	bl	8004b4c <sendData>
    sendData(y2 >> 8);
 8004d4c:	8b3b      	ldrh	r3, [r7, #24]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fef9 	bl	8004b4c <sendData>
    sendData(y2);
 8004d5a:	8b3b      	ldrh	r3, [r7, #24]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fef4 	bl	8004b4c <sendData>
 8004d64:	e000      	b.n	8004d68 <LCD_SetArea+0xbc>
    if (!lcdctrl) return;
 8004d66:	bf00      	nop
}
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <LCD_FillWithColor>:

void LCD_FillWithColor(LcdCtrl* lcdctrl, uint16_t color, uint32_t pixelsCount) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	817b      	strh	r3, [r7, #10]
    if (!lcdctrl) return;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d042      	beq.n	8004e0a <LCD_FillWithColor+0x9a>
    {
        const uint32_t maxSize = lcdctrl->width * lcdctrl->height;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	885b      	ldrh	r3, [r3, #2]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	889b      	ldrh	r3, [r3, #4]
 8004d8e:	fb03 f302 	mul.w	r3, r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        if (pixelsCount > maxSize) pixelsCount = maxSize;
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d901      	bls.n	8004da0 <LCD_FillWithColor+0x30>
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	607b      	str	r3, [r7, #4]
    }

    sendCmd(ILI9341_CMD_Memory_Write);
 8004da0:	232c      	movs	r3, #44	; 0x2c
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff feaf 	bl	8004b08 <sendCmd>

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8004daa:	2201      	movs	r2, #1
 8004dac:	2110      	movs	r1, #16
 8004dae:	4819      	ldr	r0, [pc, #100]	; (8004e14 <LCD_FillWithColor+0xa4>)
 8004db0:	f7fb fccf 	bl	8000752 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8004db4:	2200      	movs	r2, #0
 8004db6:	2101      	movs	r1, #1
 8004db8:	4816      	ldr	r0, [pc, #88]	; (8004e14 <LCD_FillWithColor+0xa4>)
 8004dba:	f7fb fcca 	bl	8000752 <HAL_GPIO_WritePin>

    uint8_t c1 = (uint8_t) (color >> 8);
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	75fb      	strb	r3, [r7, #23]
    uint8_t c2 = (uint8_t) color;
 8004dc8:	897b      	ldrh	r3, [r7, #10]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	75bb      	strb	r3, [r7, #22]

    for (uint32_t i = 0; i < pixelsCount; ++i) {
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	e010      	b.n	8004df6 <LCD_FillWithColor+0x86>
//        LL_SPI_TransmitData8(SPI1, c1);
//        LL_SPI_TransmitData8(SPI1, c2);
        HAL_SPI_Transmit(&hspi1, &c1, 1, 1);
 8004dd4:	f107 0117 	add.w	r1, r7, #23
 8004dd8:	2301      	movs	r3, #1
 8004dda:	2201      	movs	r2, #1
 8004ddc:	480e      	ldr	r0, [pc, #56]	; (8004e18 <LCD_FillWithColor+0xa8>)
 8004dde:	f7fd f8b8 	bl	8001f52 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&hspi1, &c2, 1, 1);
 8004de2:	f107 0116 	add.w	r1, r7, #22
 8004de6:	2301      	movs	r3, #1
 8004de8:	2201      	movs	r2, #1
 8004dea:	480b      	ldr	r0, [pc, #44]	; (8004e18 <LCD_FillWithColor+0xa8>)
 8004dec:	f7fd f8b1 	bl	8001f52 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < pixelsCount; ++i) {
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	3301      	adds	r3, #1
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d3ea      	bcc.n	8004dd4 <LCD_FillWithColor+0x64>
    }

    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8004dfe:	2201      	movs	r2, #1
 8004e00:	2101      	movs	r1, #1
 8004e02:	4804      	ldr	r0, [pc, #16]	; (8004e14 <LCD_FillWithColor+0xa4>)
 8004e04:	f7fb fca5 	bl	8000752 <HAL_GPIO_WritePin>
 8004e08:	e000      	b.n	8004e0c <LCD_FillWithColor+0x9c>
    if (!lcdctrl) return;
 8004e0a:	bf00      	nop
}
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40010800 	.word	0x40010800
 8004e18:	200001b4 	.word	0x200001b4

08004e1c <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle(LcdCtrl* lcdctrl, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	813b      	strh	r3, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
    if (!lcdctrl) return;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d018      	beq.n	8004e6e <LCD_DrawFilledRectangle+0x52>

    uint32_t size = (x2 - x1) * (y2 - y1);
 8004e3c:	88fa      	ldrh	r2, [r7, #6]
 8004e3e:	897b      	ldrh	r3, [r7, #10]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	8c39      	ldrh	r1, [r7, #32]
 8004e44:	893a      	ldrh	r2, [r7, #8]
 8004e46:	1a8a      	subs	r2, r1, r2
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]
    if (size < 0) size = -size;

    LCD_SetArea(lcdctrl, x1, y1, x2, y2);
 8004e4e:	88f8      	ldrh	r0, [r7, #6]
 8004e50:	893a      	ldrh	r2, [r7, #8]
 8004e52:	8979      	ldrh	r1, [r7, #10]
 8004e54:	8c3b      	ldrh	r3, [r7, #32]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	4603      	mov	r3, r0
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff ff26 	bl	8004cac <LCD_SetArea>
    LCD_FillWithColor(lcdctrl, color, size);
 8004e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4619      	mov	r1, r3
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7ff ff82 	bl	8004d70 <LCD_FillWithColor>
 8004e6c:	e000      	b.n	8004e70 <LCD_DrawFilledRectangle+0x54>
    if (!lcdctrl) return;
 8004e6e:	bf00      	nop
}
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <LCD_DrawPixel>:

void LCD_DrawPixel(LcdCtrl* lcdctrl, uint16_t x, uint16_t y, uint16_t color) {
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	4608      	mov	r0, r1
 8004e80:	4611      	mov	r1, r2
 8004e82:	461a      	mov	r2, r3
 8004e84:	4603      	mov	r3, r0
 8004e86:	817b      	strh	r3, [r7, #10]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	813b      	strh	r3, [r7, #8]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	80fb      	strh	r3, [r7, #6]
    if (!lcdctrl) return;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <LCD_DrawPixel+0x34>
    if (x >= lcdctrl->width || y >= lcdctrl->height) return;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	885b      	ldrh	r3, [r3, #2]
 8004e9a:	897a      	ldrh	r2, [r7, #10]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d206      	bcs.n	8004eae <LCD_DrawPixel+0x38>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	889b      	ldrh	r3, [r3, #4]
 8004ea4:	893a      	ldrh	r2, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	e002      	b.n	8004eb0 <LCD_DrawPixel+0x3a>
    if (!lcdctrl) return;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <LCD_DrawPixel+0x3a>
    if (x >= lcdctrl->width || y >= lcdctrl->height) return;
 8004eae:	bf00      	nop
//    //COLOUR
//    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
//    unsigned char Temp_Buffer2[2] = { color >> 8, color };
//    HAL_SPI_Transmit(&hspi1, Temp_Buffer2, 2, 1);
//    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <sendInitSequence>:
    if (!lcdctrl) return;


}

static void sendInitSequence(LcdCtrl* lcdctrl) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
    sendCmd(ILI9341_CMD_Software_Reset);
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fe1f 	bl	8004b08 <sendCmd>
    HAL_Delay(1000); // TODO check whether this one is really needed // TODO use device abstraction "singleDelay()" call // TODO represent display init as FSM
 8004eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ece:	f7fb f99f 	bl	8000210 <HAL_Delay>

    sendCmd(0xef); // undocumented
 8004ed2:	20ef      	movs	r0, #239	; 0xef
 8004ed4:	f7ff fe18 	bl	8004b08 <sendCmd>
    sendData(0x03);
 8004ed8:	2003      	movs	r0, #3
 8004eda:	f7ff fe37 	bl	8004b4c <sendData>
    sendData(0x80);
 8004ede:	2080      	movs	r0, #128	; 0x80
 8004ee0:	f7ff fe34 	bl	8004b4c <sendData>
    sendData(0x02);
 8004ee4:	2002      	movs	r0, #2
 8004ee6:	f7ff fe31 	bl	8004b4c <sendData>

    sendCmd(0xca); // undocumented
 8004eea:	20ca      	movs	r0, #202	; 0xca
 8004eec:	f7ff fe0c 	bl	8004b08 <sendCmd>
    sendData(0xc3);
 8004ef0:	20c3      	movs	r0, #195	; 0xc3
 8004ef2:	f7ff fe2b 	bl	8004b4c <sendData>
    sendData(0x08);
 8004ef6:	2008      	movs	r0, #8
 8004ef8:	f7ff fe28 	bl	8004b4c <sendData>
    sendData(0x50);
 8004efc:	2050      	movs	r0, #80	; 0x50
 8004efe:	f7ff fe25 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Power_Control_A);
 8004f02:	23cb      	movs	r3, #203	; 0xcb
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fdfe 	bl	8004b08 <sendCmd>
    sendData(0x39);
 8004f0c:	2039      	movs	r0, #57	; 0x39
 8004f0e:	f7ff fe1d 	bl	8004b4c <sendData>
    sendData(0x2C);
 8004f12:	202c      	movs	r0, #44	; 0x2c
 8004f14:	f7ff fe1a 	bl	8004b4c <sendData>
    sendData(0x00);
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f7ff fe17 	bl	8004b4c <sendData>
    sendData(0x34);
 8004f1e:	2034      	movs	r0, #52	; 0x34
 8004f20:	f7ff fe14 	bl	8004b4c <sendData>
    sendData(0x02);
 8004f24:	2002      	movs	r0, #2
 8004f26:	f7ff fe11 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Power_Control_B);
 8004f2a:	23cf      	movs	r3, #207	; 0xcf
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fdea 	bl	8004b08 <sendCmd>
    sendData(0x00);
 8004f34:	2000      	movs	r0, #0
 8004f36:	f7ff fe09 	bl	8004b4c <sendData>
    sendData(0xc1); // default 0x81 - PCEQ: PC and EQ operation for power saving -  1:enable this function
 8004f3a:	20c1      	movs	r0, #193	; 0xc1
 8004f3c:	f7ff fe06 	bl	8004b4c <sendData>
    sendData(0x30);
 8004f40:	2030      	movs	r0, #48	; 0x30
 8004f42:	f7ff fe03 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Driver_Timing_Control_A);
 8004f46:	23e8      	movs	r3, #232	; 0xe8
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fddc 	bl	8004b08 <sendCmd>
    sendData(0x85); // def 54
 8004f50:	2085      	movs	r0, #133	; 0x85
 8004f52:	f7ff fdfb 	bl	8004b4c <sendData>
    sendData(0x00); // def 11
 8004f56:	2000      	movs	r0, #0
 8004f58:	f7ff fdf8 	bl	8004b4c <sendData>
    sendData(0x78); // def 7a
 8004f5c:	2078      	movs	r0, #120	; 0x78
 8004f5e:	f7ff fdf5 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Driver_Timing_Control_B);
 8004f62:	23ea      	movs	r3, #234	; 0xea
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fdce 	bl	8004b08 <sendCmd>
    sendData(0x00); // def 66
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7ff fded 	bl	8004b4c <sendData>
    sendData(0x00);
 8004f72:	2000      	movs	r0, #0
 8004f74:	f7ff fdea 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Power_On_Sequence_Control);
 8004f78:	23ed      	movs	r3, #237	; 0xed
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fdc3 	bl	8004b08 <sendCmd>
    sendData(0x64); // def 55
 8004f82:	2064      	movs	r0, #100	; 0x64
 8004f84:	f7ff fde2 	bl	8004b4c <sendData>
    sendData(0x03); // def 01
 8004f88:	2003      	movs	r0, #3
 8004f8a:	f7ff fddf 	bl	8004b4c <sendData>
    sendData(0x12); // def 23
 8004f8e:	2012      	movs	r0, #18
 8004f90:	f7ff fddc 	bl	8004b4c <sendData>
    sendData(0x81); // def 1
 8004f94:	2081      	movs	r0, #129	; 0x81
 8004f96:	f7ff fdd9 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Pump_Ratio_Control);
 8004f9a:	23f7      	movs	r3, #247	; 0xf7
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fdb2 	bl	8004b08 <sendCmd>
    sendData(0x20); // def 10
 8004fa4:	2020      	movs	r0, #32
 8004fa6:	f7ff fdd1 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Power_Control_1);
 8004faa:	23c0      	movs	r3, #192	; 0xc0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fdaa 	bl	8004b08 <sendCmd>
    sendData(0x23); // def 21(4.5V) while 23 -> 4.6V
 8004fb4:	2023      	movs	r0, #35	; 0x23
 8004fb6:	f7ff fdc9 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Power_Control_2);
 8004fba:	23c1      	movs	r3, #193	; 0xc1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fda2 	bl	8004b08 <sendCmd>
    sendData(0x10);
 8004fc4:	2010      	movs	r0, #16
 8004fc6:	f7ff fdc1 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_VCOM_Control_1);
 8004fca:	23c5      	movs	r3, #197	; 0xc5
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fd9a 	bl	8004b08 <sendCmd>
    sendData(0x3E); // def 31
 8004fd4:	203e      	movs	r0, #62	; 0x3e
 8004fd6:	f7ff fdb9 	bl	8004b4c <sendData>
    sendData(0x28); // def 3c
 8004fda:	2028      	movs	r0, #40	; 0x28
 8004fdc:	f7ff fdb6 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_VCOM_Control_2);
 8004fe0:	23c7      	movs	r3, #199	; 0xc7
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fd8f 	bl	8004b08 <sendCmd>
    sendData(0x86); // def c0, 86 -> VMH=58 VML=58
 8004fea:	2086      	movs	r0, #134	; 0x86
 8004fec:	f7ff fdae 	bl	8004b4c <sendData>

    // change from RGB to BGR is here
    sendCmd(ILI9341_CMD_Memory_Access_Control);
 8004ff0:	2336      	movs	r3, #54	; 0x36
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fd87 	bl	8004b08 <sendCmd>
    sendData(0x40 | DISPLAY_COLOR_SPACE); // def 00, MX = 1, BGR = 1 !!! Not RGB for some reason !!!
 8004ffa:	2048      	movs	r0, #72	; 0x48
 8004ffc:	f7ff fda6 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_COLMOD_Pixel_Format_Set);
 8005000:	233a      	movs	r3, #58	; 0x3a
 8005002:	b2db      	uxtb	r3, r3
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fd7f 	bl	8004b08 <sendCmd>
    sendData(0x55); // def 66(18 bits/pixel), while 55 -> 16 bits/pixel
 800500a:	2055      	movs	r0, #85	; 0x55
 800500c:	f7ff fd9e 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Frame_Rate_Control_In_Normal_Mode_Full_Colors);
 8005010:	23b1      	movs	r3, #177	; 0xb1
 8005012:	b2db      	uxtb	r3, r3
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fd77 	bl	8004b08 <sendCmd>
    sendData(0x00);
 800501a:	2000      	movs	r0, #0
 800501c:	f7ff fd96 	bl	8004b4c <sendData>
    sendData(0x18); // def 1b(70Hz), while 18 -> 79
 8005020:	2018      	movs	r0, #24
 8005022:	f7ff fd93 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Display_Function_Control);
 8005026:	23b6      	movs	r3, #182	; 0xb6
 8005028:	b2db      	uxtb	r3, r3
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fd6c 	bl	8004b08 <sendCmd>
    sendData(0x08); // def 0a
 8005030:	2008      	movs	r0, #8
 8005032:	f7ff fd8b 	bl	8004b4c <sendData>
    sendData(0x82);
 8005036:	2082      	movs	r0, #130	; 0x82
 8005038:	f7ff fd88 	bl	8004b4c <sendData>
    sendData(0x27);
 800503c:	2027      	movs	r0, #39	; 0x27
 800503e:	f7ff fd85 	bl	8004b4c <sendData>
    // may need 4th data

    // TODO check with 0x02 - default value
    sendCmd(ILI9341_CMD_Enable_3G);
 8005042:	23f2      	movs	r3, #242	; 0xf2
 8005044:	b2db      	uxtb	r3, r3
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fd5e 	bl	8004b08 <sendCmd>
    sendData(0x00); // def 02, this change is very strange, for 02 3 gamma control is also disabled
 800504c:	2000      	movs	r0, #0
 800504e:	f7ff fd7d 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Gamma_Set);
 8005052:	2326      	movs	r3, #38	; 0x26
 8005054:	b2db      	uxtb	r3, r3
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fd56 	bl	8004b08 <sendCmd>
    sendData(0x01);
 800505c:	2001      	movs	r0, #1
 800505e:	f7ff fd75 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Positive_Gamma_Correction);
 8005062:	23e0      	movs	r3, #224	; 0xe0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fd4e 	bl	8004b08 <sendCmd>
    sendData(0x0F); // def 08
 800506c:	200f      	movs	r0, #15
 800506e:	f7ff fd6d 	bl	8004b4c <sendData>
    sendData(0x31); // no def
 8005072:	2031      	movs	r0, #49	; 0x31
 8005074:	f7ff fd6a 	bl	8004b4c <sendData>
    sendData(0x2B); // no def
 8005078:	202b      	movs	r0, #43	; 0x2b
 800507a:	f7ff fd67 	bl	8004b4c <sendData>
    sendData(0x0C); // def 05
 800507e:	200c      	movs	r0, #12
 8005080:	f7ff fd64 	bl	8004b4c <sendData>
    sendData(0x0E); // no def
 8005084:	200e      	movs	r0, #14
 8005086:	f7ff fd61 	bl	8004b4c <sendData>
    sendData(0x08); // def 09
 800508a:	2008      	movs	r0, #8
 800508c:	f7ff fd5e 	bl	8004b4c <sendData>
    sendData(0x4E); // no def
 8005090:	204e      	movs	r0, #78	; 0x4e
 8005092:	f7ff fd5b 	bl	8004b4c <sendData>
    sendData(0xF1); // no def
 8005096:	20f1      	movs	r0, #241	; 0xf1
 8005098:	f7ff fd58 	bl	8004b4c <sendData>
    sendData(0x37); // no def
 800509c:	2037      	movs	r0, #55	; 0x37
 800509e:	f7ff fd55 	bl	8004b4c <sendData>
    sendData(0x07); // def 0b
 80050a2:	2007      	movs	r0, #7
 80050a4:	f7ff fd52 	bl	8004b4c <sendData>
    sendData(0x10); // no def
 80050a8:	2010      	movs	r0, #16
 80050aa:	f7ff fd4f 	bl	8004b4c <sendData>
    sendData(0x03); // def 00
 80050ae:	2003      	movs	r0, #3
 80050b0:	f7ff fd4c 	bl	8004b4c <sendData>
    sendData(0x0E); // no def
 80050b4:	200e      	movs	r0, #14
 80050b6:	f7ff fd49 	bl	8004b4c <sendData>
    sendData(0x09); // no def
 80050ba:	2009      	movs	r0, #9
 80050bc:	f7ff fd46 	bl	8004b4c <sendData>
    sendData(0x00); // def 00==
 80050c0:	2000      	movs	r0, #0
 80050c2:	f7ff fd43 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Negative_Gamma_Correction);
 80050c6:	23e1      	movs	r3, #225	; 0xe1
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fd1c 	bl	8004b08 <sendCmd>
    sendData(0x00); // def 08
 80050d0:	2000      	movs	r0, #0
 80050d2:	f7ff fd3b 	bl	8004b4c <sendData>
    sendData(0x0E); // no def
 80050d6:	200e      	movs	r0, #14
 80050d8:	f7ff fd38 	bl	8004b4c <sendData>
    sendData(0x14); // no def
 80050dc:	2014      	movs	r0, #20
 80050de:	f7ff fd35 	bl	8004b4c <sendData>
    sendData(0x03); // def 07
 80050e2:	2003      	movs	r0, #3
 80050e4:	f7ff fd32 	bl	8004b4c <sendData>
    sendData(0x11); // no def
 80050e8:	2011      	movs	r0, #17
 80050ea:	f7ff fd2f 	bl	8004b4c <sendData>
    sendData(0x07); // def 05
 80050ee:	2007      	movs	r0, #7
 80050f0:	f7ff fd2c 	bl	8004b4c <sendData>
    sendData(0x31); // no def
 80050f4:	2031      	movs	r0, #49	; 0x31
 80050f6:	f7ff fd29 	bl	8004b4c <sendData>
    sendData(0xC1); // no def
 80050fa:	20c1      	movs	r0, #193	; 0xc1
 80050fc:	f7ff fd26 	bl	8004b4c <sendData>
    sendData(0x48); // no def
 8005100:	2048      	movs	r0, #72	; 0x48
 8005102:	f7ff fd23 	bl	8004b4c <sendData>
    sendData(0x08); // def 04
 8005106:	2008      	movs	r0, #8
 8005108:	f7ff fd20 	bl	8004b4c <sendData>
    sendData(0x0F); // no def
 800510c:	200f      	movs	r0, #15
 800510e:	f7ff fd1d 	bl	8004b4c <sendData>
    sendData(0x0C); // def 0f
 8005112:	200c      	movs	r0, #12
 8005114:	f7ff fd1a 	bl	8004b4c <sendData>
    sendData(0x31); // no def
 8005118:	2031      	movs	r0, #49	; 0x31
 800511a:	f7ff fd17 	bl	8004b4c <sendData>
    sendData(0x36); // no def
 800511e:	2036      	movs	r0, #54	; 0x36
 8005120:	f7ff fd14 	bl	8004b4c <sendData>
    sendData(0x0F); // def 0f==
 8005124:	200f      	movs	r0, #15
 8005126:	f7ff fd11 	bl	8004b4c <sendData>

    sendCmd(ILI9341_CMD_Sleep_Out);
 800512a:	2311      	movs	r3, #17
 800512c:	b2db      	uxtb	r3, r3
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fcea 	bl	8004b08 <sendCmd>
    HAL_Delay(120);
 8005134:	2078      	movs	r0, #120	; 0x78
 8005136:	f7fb f86b 	bl	8000210 <HAL_Delay>

    sendCmd(ILI9341_CMD_Display_ON);
 800513a:	2329      	movs	r3, #41	; 0x29
 800513c:	b2db      	uxtb	r3, r3
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fce2 	bl	8004b08 <sendCmd>
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005152:	f7fa fffb 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005156:	f000 f84f 	bl	80051f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800515a:	f000 f8dd 	bl	8005318 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800515e:	f000 fb35 	bl	80057cc <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8005162:	f000 f8a3 	bl	80052ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  PlayerLeds_Init(&playerLedsCtrl, &sendPlayerLeds);
 8005166:	4921      	ldr	r1, [pc, #132]	; (80051ec <main+0xa0>)
 8005168:	4821      	ldr	r0, [pc, #132]	; (80051f0 <main+0xa4>)
 800516a:	f000 f997 	bl	800549c <PlayerLeds_Init>

  LCD_Init(&mainLcdCtrl);
 800516e:	4821      	ldr	r0, [pc, #132]	; (80051f4 <main+0xa8>)
 8005170:	f7ff fd0e 	bl	8004b90 <LCD_Init>
  LCD_DrawFilledRectangle(&mainLcdCtrl, 0, 0, 320, 240, 0);
 8005174:	2300      	movs	r3, #0
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	23f0      	movs	r3, #240	; 0xf0
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005180:	2200      	movs	r2, #0
 8005182:	2100      	movs	r1, #0
 8005184:	481b      	ldr	r0, [pc, #108]	; (80051f4 <main+0xa8>)
 8005186:	f7ff fe49 	bl	8004e1c <LCD_DrawFilledRectangle>

  LCD_DrawFilledRectangle(&mainLcdCtrl, 10, 10, 320, 200, 0xffff);
 800518a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	23c8      	movs	r3, #200	; 0xc8
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005198:	220a      	movs	r2, #10
 800519a:	210a      	movs	r1, #10
 800519c:	4815      	ldr	r0, [pc, #84]	; (80051f4 <main+0xa8>)
 800519e:	f7ff fe3d 	bl	8004e1c <LCD_DrawFilledRectangle>
  LCD_DrawFilledRectangle(&mainLcdCtrl, 10, 10, 50, 200, 0xf00f);
 80051a2:	f24f 030f 	movw	r3, #61455	; 0xf00f
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	23c8      	movs	r3, #200	; 0xc8
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	2332      	movs	r3, #50	; 0x32
 80051ae:	220a      	movs	r2, #10
 80051b0:	210a      	movs	r1, #10
 80051b2:	4810      	ldr	r0, [pc, #64]	; (80051f4 <main+0xa8>)
 80051b4:	f7ff fe32 	bl	8004e1c <LCD_DrawFilledRectangle>

//  LCD_ChangeInversionMode(&mainLcdCtrl, 1);

  uint16_t y;
  for (uint16_t x = 140; x < 150; ++x) {
 80051b8:	238c      	movs	r3, #140	; 0x8c
 80051ba:	80bb      	strh	r3, [r7, #4]
 80051bc:	e012      	b.n	80051e4 <main+0x98>
      for (y = 20; y < 100; ++y) {
 80051be:	2314      	movs	r3, #20
 80051c0:	80fb      	strh	r3, [r7, #6]
 80051c2:	e009      	b.n	80051d8 <main+0x8c>
          LCD_DrawPixel(&mainLcdCtrl, x, y, 0b0000011111100000);
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	88b9      	ldrh	r1, [r7, #4]
 80051c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80051cc:	4809      	ldr	r0, [pc, #36]	; (80051f4 <main+0xa8>)
 80051ce:	f7ff fe52 	bl	8004e76 <LCD_DrawPixel>
      for (y = 20; y < 100; ++y) {
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	3301      	adds	r3, #1
 80051d6:	80fb      	strh	r3, [r7, #6]
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	2b63      	cmp	r3, #99	; 0x63
 80051dc:	d9f2      	bls.n	80051c4 <main+0x78>
  for (uint16_t x = 140; x < 150; ++x) {
 80051de:	88bb      	ldrh	r3, [r7, #4]
 80051e0:	3301      	adds	r3, #1
 80051e2:	80bb      	strh	r3, [r7, #4]
 80051e4:	88bb      	ldrh	r3, [r7, #4]
 80051e6:	2b95      	cmp	r3, #149	; 0x95
 80051e8:	d9e9      	bls.n	80051be <main+0x72>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80051ea:	e7fe      	b.n	80051ea <main+0x9e>
 80051ec:	0800544d 	.word	0x0800544d
 80051f0:	2000020c 	.word	0x2000020c
 80051f4:	200001ac 	.word	0x200001ac

080051f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b094      	sub	sp, #80	; 0x50
 80051fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005202:	2228      	movs	r2, #40	; 0x28
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f000 ffaa 	bl	8006160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800520c:	f107 0314 	add.w	r3, r7, #20
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005228:	2301      	movs	r3, #1
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800522c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005232:	2300      	movs	r3, #0
 8005234:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005236:	2301      	movs	r3, #1
 8005238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800523a:	2302      	movs	r3, #2
 800523c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800523e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005244:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800524a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc f97e 	bl	8001550 <HAL_RCC_OscConfig>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800525a:	f000 f919 	bl	8005490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800525e:	230f      	movs	r3, #15
 8005260:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005262:	2302      	movs	r3, #2
 8005264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800526a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800526e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005270:	2300      	movs	r3, #0
 8005272:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f7fc fbe8 	bl	8001a50 <HAL_RCC_ClockConfig>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005286:	f000 f903 	bl	8005490 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800528a:	2310      	movs	r3, #16
 800528c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800528e:	2300      	movs	r3, #0
 8005290:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	4618      	mov	r0, r3
 8005296:	f7fc fd45 	bl	8001d24 <HAL_RCCEx_PeriphCLKConfig>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80052a0:	f000 f8f6 	bl	8005490 <Error_Handler>
  }
}
 80052a4:	bf00      	nop
 80052a6:	3750      	adds	r7, #80	; 0x50
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80052b0:	4b17      	ldr	r3, [pc, #92]	; (8005310 <MX_SPI1_Init+0x64>)
 80052b2:	4a18      	ldr	r2, [pc, #96]	; (8005314 <MX_SPI1_Init+0x68>)
 80052b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <MX_SPI1_Init+0x64>)
 80052b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80052bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <MX_SPI1_Init+0x64>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052c4:	4b12      	ldr	r3, [pc, #72]	; (8005310 <MX_SPI1_Init+0x64>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <MX_SPI1_Init+0x64>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <MX_SPI1_Init+0x64>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052d6:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <MX_SPI1_Init+0x64>)
 80052d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <MX_SPI1_Init+0x64>)
 80052e0:	2208      	movs	r2, #8
 80052e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <MX_SPI1_Init+0x64>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <MX_SPI1_Init+0x64>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <MX_SPI1_Init+0x64>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <MX_SPI1_Init+0x64>)
 80052f8:	220a      	movs	r2, #10
 80052fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052fc:	4804      	ldr	r0, [pc, #16]	; (8005310 <MX_SPI1_Init+0x64>)
 80052fe:	f7fc fdc7 	bl	8001e90 <HAL_SPI_Init>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005308:	f000 f8c2 	bl	8005490 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800530c:	bf00      	nop
 800530e:	bd80      	pop	{r7, pc}
 8005310:	200001b4 	.word	0x200001b4
 8005314:	40013000 	.word	0x40013000

08005318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800531e:	f107 0310 	add.w	r3, r7, #16
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800532c:	4b42      	ldr	r3, [pc, #264]	; (8005438 <MX_GPIO_Init+0x120>)
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	4a41      	ldr	r2, [pc, #260]	; (8005438 <MX_GPIO_Init+0x120>)
 8005332:	f043 0310 	orr.w	r3, r3, #16
 8005336:	6193      	str	r3, [r2, #24]
 8005338:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <MX_GPIO_Init+0x120>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005344:	4b3c      	ldr	r3, [pc, #240]	; (8005438 <MX_GPIO_Init+0x120>)
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	4a3b      	ldr	r2, [pc, #236]	; (8005438 <MX_GPIO_Init+0x120>)
 800534a:	f043 0320 	orr.w	r3, r3, #32
 800534e:	6193      	str	r3, [r2, #24]
 8005350:	4b39      	ldr	r3, [pc, #228]	; (8005438 <MX_GPIO_Init+0x120>)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800535c:	4b36      	ldr	r3, [pc, #216]	; (8005438 <MX_GPIO_Init+0x120>)
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	4a35      	ldr	r2, [pc, #212]	; (8005438 <MX_GPIO_Init+0x120>)
 8005362:	f043 0304 	orr.w	r3, r3, #4
 8005366:	6193      	str	r3, [r2, #24]
 8005368:	4b33      	ldr	r3, [pc, #204]	; (8005438 <MX_GPIO_Init+0x120>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005374:	4b30      	ldr	r3, [pc, #192]	; (8005438 <MX_GPIO_Init+0x120>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	4a2f      	ldr	r2, [pc, #188]	; (8005438 <MX_GPIO_Init+0x120>)
 800537a:	f043 0308 	orr.w	r3, r3, #8
 800537e:	6193      	str	r3, [r2, #24]
 8005380:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <MX_GPIO_Init+0x120>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	603b      	str	r3, [r7, #0]
 800538a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET);
 800538c:	2200      	movs	r2, #0
 800538e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005392:	482a      	ldr	r0, [pc, #168]	; (800543c <MX_GPIO_Init+0x124>)
 8005394:	f7fb f9dd 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_RESET_Pin|LCD_DC_Pin|START_LED_Pin, GPIO_PIN_RESET);
 8005398:	2200      	movs	r2, #0
 800539a:	f240 2113 	movw	r1, #531	; 0x213
 800539e:	4828      	ldr	r0, [pc, #160]	; (8005440 <MX_GPIO_Init+0x128>)
 80053a0:	f7fb f9d7 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|EXTRA_TICK_Pin, GPIO_PIN_RESET);
 80053a4:	2200      	movs	r2, #0
 80053a6:	2121      	movs	r1, #33	; 0x21
 80053a8:	4826      	ldr	r0, [pc, #152]	; (8005444 <MX_GPIO_Init+0x12c>)
 80053aa:	f7fb f9d2 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueLed_Pin */
  GPIO_InitStruct.Pin = BlueLed_Pin;
 80053ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b4:	2301      	movs	r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053bc:	2302      	movs	r3, #2
 80053be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BlueLed_GPIO_Port, &GPIO_InitStruct);
 80053c0:	f107 0310 	add.w	r3, r7, #16
 80053c4:	4619      	mov	r1, r3
 80053c6:	481d      	ldr	r0, [pc, #116]	; (800543c <MX_GPIO_Init+0x124>)
 80053c8:	f7fb f852 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RESET_Pin LCD_DC_Pin START_LED_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RESET_Pin|LCD_DC_Pin|START_LED_Pin;
 80053cc:	f240 2313 	movw	r3, #531	; 0x213
 80053d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053d2:	2301      	movs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053da:	2302      	movs	r3, #2
 80053dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053de:	f107 0310 	add.w	r3, r7, #16
 80053e2:	4619      	mov	r1, r3
 80053e4:	4816      	ldr	r0, [pc, #88]	; (8005440 <MX_GPIO_Init+0x128>)
 80053e6:	f7fb f843 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin EXTRA_TICK_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|EXTRA_TICK_Pin;
 80053ea:	2321      	movs	r3, #33	; 0x21
 80053ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ee:	2301      	movs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f6:	2302      	movs	r3, #2
 80053f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053fa:	f107 0310 	add.w	r3, r7, #16
 80053fe:	4619      	mov	r1, r3
 8005400:	4810      	ldr	r0, [pc, #64]	; (8005444 <MX_GPIO_Init+0x12c>)
 8005402:	f7fb f835 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin|Button3_Pin;
 8005406:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800540a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800540c:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <MX_GPIO_Init+0x130>)
 800540e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005410:	2301      	movs	r3, #1
 8005412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005414:	f107 0310 	add.w	r3, r7, #16
 8005418:	4619      	mov	r1, r3
 800541a:	480a      	ldr	r0, [pc, #40]	; (8005444 <MX_GPIO_Init+0x12c>)
 800541c:	f7fb f828 	bl	8000470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005420:	2200      	movs	r2, #0
 8005422:	2100      	movs	r1, #0
 8005424:	2028      	movs	r0, #40	; 0x28
 8005426:	f7fa ffec 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800542a:	2028      	movs	r0, #40	; 0x28
 800542c:	f7fb f805 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 8005430:	bf00      	nop
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40021000 	.word	0x40021000
 800543c:	40011000 	.word	0x40011000
 8005440:	40010800 	.word	0x40010800
 8005444:	40010c00 	.word	0x40010c00
 8005448:	10310000 	.word	0x10310000

0800544c <sendPlayerLeds>:

/* USER CODE BEGIN 4 */

static void sendPlayerLeds(uint8_t data) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(EXTRA_TICK_GPIO_Port, EXTRA_TICK_Pin, GPIO_PIN_RESET);
 8005456:	2200      	movs	r2, #0
 8005458:	2120      	movs	r1, #32
 800545a:	480b      	ldr	r0, [pc, #44]	; (8005488 <sendPlayerLeds+0x3c>)
 800545c:	f7fb f979 	bl	8000752 <HAL_GPIO_WritePin>
//    LL_SPI_TransmitData8(SPI1, data);
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8005460:	1df9      	adds	r1, r7, #7
 8005462:	2301      	movs	r3, #1
 8005464:	2201      	movs	r2, #1
 8005466:	4809      	ldr	r0, [pc, #36]	; (800548c <sendPlayerLeds+0x40>)
 8005468:	f7fc fd73 	bl	8001f52 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(EXTRA_TICK_GPIO_Port, EXTRA_TICK_Pin, GPIO_PIN_SET);
 800546c:	2201      	movs	r2, #1
 800546e:	2120      	movs	r1, #32
 8005470:	4805      	ldr	r0, [pc, #20]	; (8005488 <sendPlayerLeds+0x3c>)
 8005472:	f7fb f96e 	bl	8000752 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EXTRA_TICK_GPIO_Port, EXTRA_TICK_Pin, GPIO_PIN_RESET);
 8005476:	2200      	movs	r2, #0
 8005478:	2120      	movs	r1, #32
 800547a:	4803      	ldr	r0, [pc, #12]	; (8005488 <sendPlayerLeds+0x3c>)
 800547c:	f7fb f969 	bl	8000752 <HAL_GPIO_WritePin>
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40010c00 	.word	0x40010c00
 800548c:	200001b4 	.word	0x200001b4

08005490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005494:	bf00      	nop
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <PlayerLeds_Init>:
#define PLAYER_1_SYSTEM_LED (1 << 4)
#define PLAYER_2_SYSTEM_LED (1 << 5)
#define PLAYER_3_SYSTEM_LED (1 << 6)
#define PLAYER_4_SYSTEM_LED (1 << 7)

void PlayerLeds_Init(PlayerLedsCtrl* ctrl, LedsDataSender sender) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
    if (!ctrl) return;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d006      	beq.n	80054ba <PlayerLeds_Init+0x1e>
    ctrl->sender = sender;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	605a      	str	r2, [r3, #4]

    PlayerLeds_ClearAll(ctrl);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f805 	bl	80054c2 <PlayerLeds_ClearAll>
 80054b8:	e000      	b.n	80054bc <PlayerLeds_Init+0x20>
    if (!ctrl) return;
 80054ba:	bf00      	nop
}
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <PlayerLeds_ClearAll>:

void PlayerLeds_ClearAll(PlayerLedsCtrl* ctrl) {
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
    if (!ctrl) return;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <PlayerLeds_ClearAll+0x2a>

    ctrl->state = 0;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
    if (ctrl->sender) ctrl->sender(ctrl->state);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <PlayerLeds_ClearAll+0x2c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	7812      	ldrb	r2, [r2, #0]
 80054e6:	4610      	mov	r0, r2
 80054e8:	4798      	blx	r3
 80054ea:	e000      	b.n	80054ee <PlayerLeds_ClearAll+0x2c>
    if (!ctrl) return;
 80054ec:	bf00      	nop
}
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <PlayerLeds_SetPlayer>:

void PlayerLeds_SetPlayer(PlayerLedsCtrl* ctrl, Players player, PlayerVisMode mode) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
 8005500:	4613      	mov	r3, r2
 8005502:	70bb      	strb	r3, [r7, #2]
    if (!ctrl) return;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d063      	beq.n	80055d2 <PlayerLeds_SetPlayer+0xde>
    uint8_t mask;
    if (mode & PLAYER_VIS_ONLY_BUTTON_LIGHT) {
 800550a:	78bb      	ldrb	r3, [r7, #2]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01d      	beq.n	8005550 <PlayerLeds_SetPlayer+0x5c>
        switch (player) {
 8005514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005518:	3301      	adds	r3, #1
 800551a:	2b04      	cmp	r3, #4
 800551c:	d818      	bhi.n	8005550 <PlayerLeds_SetPlayer+0x5c>
 800551e:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <PlayerLeds_SetPlayer+0x30>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005551 	.word	0x08005551
 8005528:	08005539 	.word	0x08005539
 800552c:	0800553f 	.word	0x0800553f
 8005530:	08005545 	.word	0x08005545
 8005534:	0800554b 	.word	0x0800554b
        case PLAYER_1:
            mask = PLAYER_1_BUTTON_LED;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
            break;
 800553c:	e008      	b.n	8005550 <PlayerLeds_SetPlayer+0x5c>
        case PLAYER_2:
            mask = PLAYER_2_BUTTON_LED;
 800553e:	2302      	movs	r3, #2
 8005540:	73fb      	strb	r3, [r7, #15]
            break;
 8005542:	e005      	b.n	8005550 <PlayerLeds_SetPlayer+0x5c>
        case PLAYER_3:
            mask = PLAYER_3_BUTTON_LED;
 8005544:	2304      	movs	r3, #4
 8005546:	73fb      	strb	r3, [r7, #15]
            break;
 8005548:	e002      	b.n	8005550 <PlayerLeds_SetPlayer+0x5c>
        case PLAYER_4:
            mask = PLAYER_4_BUTTON_LED;
 800554a:	2308      	movs	r3, #8
 800554c:	73fb      	strb	r3, [r7, #15]
            break;
 800554e:	bf00      	nop
        case PLAYER_UNDEFINED:
            break;
        }
    }

    if (mode & PLAYER_VIS_ONLY_SYSTEM) {
 8005550:	78bb      	ldrb	r3, [r7, #2]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d026      	beq.n	80055a8 <PlayerLeds_SetPlayer+0xb4>
        switch (player) {
 800555a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800555e:	3301      	adds	r3, #1
 8005560:	2b04      	cmp	r3, #4
 8005562:	d821      	bhi.n	80055a8 <PlayerLeds_SetPlayer+0xb4>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <PlayerLeds_SetPlayer+0x78>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	080055a9 	.word	0x080055a9
 8005570:	08005581 	.word	0x08005581
 8005574:	0800558b 	.word	0x0800558b
 8005578:	08005595 	.word	0x08005595
 800557c:	0800559f 	.word	0x0800559f
        case PLAYER_1:
            mask |= PLAYER_1_SYSTEM_LED;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	f043 0310 	orr.w	r3, r3, #16
 8005586:	73fb      	strb	r3, [r7, #15]
            break;
 8005588:	e00e      	b.n	80055a8 <PlayerLeds_SetPlayer+0xb4>
        case PLAYER_2:
            mask |= PLAYER_2_SYSTEM_LED;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	f043 0320 	orr.w	r3, r3, #32
 8005590:	73fb      	strb	r3, [r7, #15]
            break;
 8005592:	e009      	b.n	80055a8 <PlayerLeds_SetPlayer+0xb4>
        case PLAYER_3:
            mask |= PLAYER_3_SYSTEM_LED;
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559a:	73fb      	strb	r3, [r7, #15]
            break;
 800559c:	e004      	b.n	80055a8 <PlayerLeds_SetPlayer+0xb4>
        case PLAYER_4:
            mask |= PLAYER_4_SYSTEM_LED;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055a4:	73fb      	strb	r3, [r7, #15]
            break;
 80055a6:	bf00      	nop
        case PLAYER_UNDEFINED:
            break;
        }
    }

    if (mask) {
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d012      	beq.n	80055d4 <PlayerLeds_SetPlayer+0xe0>
        ctrl->state |= mask;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	701a      	strb	r2, [r3, #0]
        if (ctrl->sender) ctrl->sender(ctrl->state);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <PlayerLeds_SetPlayer+0xe0>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	7812      	ldrb	r2, [r2, #0]
 80055cc:	4610      	mov	r0, r2
 80055ce:	4798      	blx	r3
 80055d0:	e000      	b.n	80055d4 <PlayerLeds_SetPlayer+0xe0>
    if (!ctrl) return;
 80055d2:	bf00      	nop
    }
}
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop

080055dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <HAL_MspInit+0x5c>)
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	4a14      	ldr	r2, [pc, #80]	; (8005638 <HAL_MspInit+0x5c>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	6193      	str	r3, [r2, #24]
 80055ee:	4b12      	ldr	r3, [pc, #72]	; (8005638 <HAL_MspInit+0x5c>)
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	60bb      	str	r3, [r7, #8]
 80055f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <HAL_MspInit+0x5c>)
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4a0e      	ldr	r2, [pc, #56]	; (8005638 <HAL_MspInit+0x5c>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005604:	61d3      	str	r3, [r2, #28]
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_MspInit+0x5c>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <HAL_MspInit+0x60>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	4a04      	ldr	r2, [pc, #16]	; (800563c <HAL_MspInit+0x60>)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr
 8005638:	40021000 	.word	0x40021000
 800563c:	40010000 	.word	0x40010000

08005640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005648:	f107 0310 	add.w	r3, r7, #16
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <HAL_SPI_MspInit+0x88>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d12f      	bne.n	80056c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005660:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <HAL_SPI_MspInit+0x8c>)
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	4a19      	ldr	r2, [pc, #100]	; (80056cc <HAL_SPI_MspInit+0x8c>)
 8005666:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800566a:	6193      	str	r3, [r2, #24]
 800566c:	4b17      	ldr	r3, [pc, #92]	; (80056cc <HAL_SPI_MspInit+0x8c>)
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005678:	4b14      	ldr	r3, [pc, #80]	; (80056cc <HAL_SPI_MspInit+0x8c>)
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	4a13      	ldr	r2, [pc, #76]	; (80056cc <HAL_SPI_MspInit+0x8c>)
 800567e:	f043 0304 	orr.w	r3, r3, #4
 8005682:	6193      	str	r3, [r2, #24]
 8005684:	4b11      	ldr	r3, [pc, #68]	; (80056cc <HAL_SPI_MspInit+0x8c>)
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005690:	23a0      	movs	r3, #160	; 0xa0
 8005692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005694:	2302      	movs	r3, #2
 8005696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005698:	2303      	movs	r3, #3
 800569a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800569c:	f107 0310 	add.w	r3, r7, #16
 80056a0:	4619      	mov	r1, r3
 80056a2:	480b      	ldr	r0, [pc, #44]	; (80056d0 <HAL_SPI_MspInit+0x90>)
 80056a4:	f7fa fee4 	bl	8000470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80056a8:	2340      	movs	r3, #64	; 0x40
 80056aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	4619      	mov	r1, r3
 80056ba:	4805      	ldr	r0, [pc, #20]	; (80056d0 <HAL_SPI_MspInit+0x90>)
 80056bc:	f7fa fed8 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80056c0:	bf00      	nop
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40013000 	.word	0x40013000
 80056cc:	40021000 	.word	0x40021000
 80056d0:	40010800 	.word	0x40010800

080056d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056d8:	bf00      	nop
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056e4:	e7fe      	b.n	80056e4 <HardFault_Handler+0x4>

080056e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056e6:	b480      	push	{r7}
 80056e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056ea:	e7fe      	b.n	80056ea <MemManage_Handler+0x4>

080056ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056f0:	e7fe      	b.n	80056f0 <BusFault_Handler+0x4>

080056f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056f2:	b480      	push	{r7}
 80056f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056f6:	e7fe      	b.n	80056f6 <UsageFault_Handler+0x4>

080056f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056fc:	bf00      	nop
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005720:	f7fa fd5a 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005724:	bf00      	nop
 8005726:	bd80      	pop	{r7, pc}

08005728 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800572c:	4802      	ldr	r0, [pc, #8]	; (8005738 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800572e:	f7fb f948 	bl	80009c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8005732:	bf00      	nop
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200004d8 	.word	0x200004d8

0800573c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005740:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005744:	f7fb f81e 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005748:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800574c:	f7fb f81a 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005750:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005754:	f7fb f816 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005758:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800575c:	f7fb f812 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005760:	bf00      	nop
 8005762:	bd80      	pop	{r7, pc}

08005764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005768:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <SystemInit+0x5c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a14      	ldr	r2, [pc, #80]	; (80057c0 <SystemInit+0x5c>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <SystemInit+0x5c>)
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	4911      	ldr	r1, [pc, #68]	; (80057c0 <SystemInit+0x5c>)
 800577a:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <SystemInit+0x60>)
 800577c:	4013      	ands	r3, r2
 800577e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005780:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <SystemInit+0x5c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a0e      	ldr	r2, [pc, #56]	; (80057c0 <SystemInit+0x5c>)
 8005786:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800578a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <SystemInit+0x5c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <SystemInit+0x5c>)
 8005796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800579c:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <SystemInit+0x5c>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a07      	ldr	r2, [pc, #28]	; (80057c0 <SystemInit+0x5c>)
 80057a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80057a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <SystemInit+0x5c>)
 80057aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80057ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <SystemInit+0x64>)
 80057b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80057b8:	bf00      	nop
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	40021000 	.word	0x40021000
 80057c4:	f8ff0000 	.word	0xf8ff0000
 80057c8:	e000ed00 	.word	0xe000ed00

080057cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80057d0:	2200      	movs	r2, #0
 80057d2:	4912      	ldr	r1, [pc, #72]	; (800581c <MX_USB_DEVICE_Init+0x50>)
 80057d4:	4812      	ldr	r0, [pc, #72]	; (8005820 <MX_USB_DEVICE_Init+0x54>)
 80057d6:	f7fe f90b 	bl	80039f0 <USBD_Init>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80057e0:	f7ff fe56 	bl	8005490 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80057e4:	490f      	ldr	r1, [pc, #60]	; (8005824 <MX_USB_DEVICE_Init+0x58>)
 80057e6:	480e      	ldr	r0, [pc, #56]	; (8005820 <MX_USB_DEVICE_Init+0x54>)
 80057e8:	f7fe f92d 	bl	8003a46 <USBD_RegisterClass>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80057f2:	f7ff fe4d 	bl	8005490 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80057f6:	490c      	ldr	r1, [pc, #48]	; (8005828 <MX_USB_DEVICE_Init+0x5c>)
 80057f8:	4809      	ldr	r0, [pc, #36]	; (8005820 <MX_USB_DEVICE_Init+0x54>)
 80057fa:	f7fe f8e3 	bl	80039c4 <USBD_CUSTOM_HID_RegisterInterface>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005804:	f7ff fe44 	bl	8005490 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005808:	4805      	ldr	r0, [pc, #20]	; (8005820 <MX_USB_DEVICE_Init+0x54>)
 800580a:	f7fe f935 	bl	8003a78 <USBD_Start>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005814:	f7ff fe3c 	bl	8005490 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005818:	bf00      	nop
 800581a:	bd80      	pop	{r7, pc}
 800581c:	2000011c 	.word	0x2000011c
 8005820:	20000214 	.word	0x20000214
 8005824:	20000008 	.word	0x20000008
 8005828:	2000010c 	.word	0x2000010c

0800582c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a0d      	ldr	r2, [pc, #52]	; (8005870 <HAL_PCD_MspInit+0x44>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d113      	bne.n	8005866 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <HAL_PCD_MspInit+0x48>)
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	4a0c      	ldr	r2, [pc, #48]	; (8005874 <HAL_PCD_MspInit+0x48>)
 8005844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005848:	61d3      	str	r3, [r2, #28]
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <HAL_PCD_MspInit+0x48>)
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005856:	2200      	movs	r2, #0
 8005858:	2100      	movs	r1, #0
 800585a:	2014      	movs	r0, #20
 800585c:	f7fa fdd1 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005860:	2014      	movs	r0, #20
 8005862:	f7fa fdea 	bl	800043a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40005c00 	.word	0x40005c00
 8005874:	40021000 	.word	0x40021000

08005878 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f7fe f93a 	bl	8003b08 <USBD_LL_SetupStage>
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	015b      	lsls	r3, r3, #5
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	4619      	mov	r1, r3
 80058c0:	f7fe f96d 	bl	8003b9e <USBD_LL_DataOutStage>
}
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	015b      	lsls	r3, r3, #5
 80058e4:	4413      	add	r3, r2
 80058e6:	333c      	adds	r3, #60	; 0x3c
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	4619      	mov	r1, r3
 80058ee:	f7fe f9c7 	bl	8003c80 <USBD_LL_DataInStage>
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe fad7 	bl	8003ebc <USBD_LL_SOF>
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d001      	beq.n	800592e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800592a:	f7ff fdb1 	bl	8005490 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005934:	7bfa      	ldrb	r2, [r7, #15]
 8005936:	4611      	mov	r1, r2
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe fa87 	bl	8003e4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fa40 	bl	8003dca <USBD_LL_Reset>
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fa81 	bl	8003e6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <HAL_PCD_SuspendCallback+0x30>)
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	4a03      	ldr	r2, [pc, #12]	; (8005984 <HAL_PCD_SuspendCallback+0x30>)
 8005976:	f043 0306 	orr.w	r3, r3, #6
 800597a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	e000ed00 	.word	0xe000ed00

08005988 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fa7b 	bl	8003e92 <USBD_LL_Resume>
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <USBD_LL_Init+0x98>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <USBD_LL_Init+0x98>)
 80059b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80059bc:	4b1f      	ldr	r3, [pc, #124]	; (8005a3c <USBD_LL_Init+0x98>)
 80059be:	4a20      	ldr	r2, [pc, #128]	; (8005a40 <USBD_LL_Init+0x9c>)
 80059c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80059c2:	4b1e      	ldr	r3, [pc, #120]	; (8005a3c <USBD_LL_Init+0x98>)
 80059c4:	2208      	movs	r2, #8
 80059c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80059c8:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <USBD_LL_Init+0x98>)
 80059ca:	2202      	movs	r2, #2
 80059cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80059ce:	4b1b      	ldr	r3, [pc, #108]	; (8005a3c <USBD_LL_Init+0x98>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80059d4:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <USBD_LL_Init+0x98>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80059da:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <USBD_LL_Init+0x98>)
 80059dc:	2200      	movs	r2, #0
 80059de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80059e0:	4816      	ldr	r0, [pc, #88]	; (8005a3c <USBD_LL_Init+0x98>)
 80059e2:	f7fa fee7 	bl	80007b4 <HAL_PCD_Init>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80059ec:	f7ff fd50 	bl	8005490 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059f6:	2318      	movs	r3, #24
 80059f8:	2200      	movs	r2, #0
 80059fa:	2100      	movs	r1, #0
 80059fc:	f7fb fd6c 	bl	80014d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a06:	2358      	movs	r3, #88	; 0x58
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	f7fb fd64 	bl	80014d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a16:	2398      	movs	r3, #152	; 0x98
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2181      	movs	r1, #129	; 0x81
 8005a1c:	f7fb fd5c 	bl	80014d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a26:	23d8      	movs	r3, #216	; 0xd8
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	f7fb fd54 	bl	80014d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200004d8 	.word	0x200004d8
 8005a40:	40005c00 	.word	0x40005c00

08005a44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fa ff8b 	bl	8000976 <HAL_PCD_Start>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f934 	bl	8005cd4 <USBD_Get_USB_Status>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	461a      	mov	r2, r3
 8005a88:	4603      	mov	r3, r0
 8005a8a:	70fb      	strb	r3, [r7, #3]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70bb      	strb	r3, [r7, #2]
 8005a90:	4613      	mov	r3, r2
 8005a92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005aa2:	78bb      	ldrb	r3, [r7, #2]
 8005aa4:	883a      	ldrh	r2, [r7, #0]
 8005aa6:	78f9      	ldrb	r1, [r7, #3]
 8005aa8:	f7fb f8be 	bl	8000c28 <HAL_PCD_EP_Open>
 8005aac:	4603      	mov	r3, r0
 8005aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 f90e 	bl	8005cd4 <USBD_Get_USB_Status>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fb f8ff 	bl	8000ce8 <HAL_PCD_EP_Close>
 8005aea:	4603      	mov	r3, r0
 8005aec:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 f8ef 	bl	8005cd4 <USBD_Get_USB_Status>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fb f995 	bl	8000e52 <HAL_PCD_EP_SetStall>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f8d0 	bl	8005cd4 <USBD_Get_USB_Status>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fb f9d0 	bl	8000f06 <HAL_PCD_EP_ClrStall>
 8005b66:	4603      	mov	r3, r0
 8005b68:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 f8b1 	bl	8005cd4 <USBD_Get_USB_Status>
 8005b72:	4603      	mov	r3, r0
 8005b74:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b92:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da08      	bge.n	8005bae <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	015b      	lsls	r3, r3, #5
 8005ba6:	4413      	add	r3, r2
 8005ba8:	332a      	adds	r3, #42	; 0x2a
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	e008      	b.n	8005bc0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	015b      	lsls	r3, r3, #5
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005bbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fa fff8 	bl	8000bde <HAL_PCD_SetAddress>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f86d 	bl	8005cd4 <USBD_Get_USB_Status>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	461a      	mov	r2, r3
 8005c14:	460b      	mov	r3, r1
 8005c16:	72fb      	strb	r3, [r7, #11]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c2a:	893b      	ldrh	r3, [r7, #8]
 8005c2c:	7af9      	ldrb	r1, [r7, #11]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	f7fb f8d6 	bl	8000de0 <HAL_PCD_EP_Transmit>
 8005c34:	4603      	mov	r3, r0
 8005c36:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f84a 	bl	8005cd4 <USBD_Get_USB_Status>
 8005c40:	4603      	mov	r3, r0
 8005c42:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005c44:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b086      	sub	sp, #24
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	72fb      	strb	r3, [r7, #11]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c70:	893b      	ldrh	r3, [r7, #8]
 8005c72:	7af9      	ldrb	r1, [r7, #11]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	f7fb f879 	bl	8000d6c <HAL_PCD_EP_Receive>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 f827 	bl	8005cd4 <USBD_Get_USB_Status>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005c8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8005c9c:	4b02      	ldr	r3, [pc, #8]	; (8005ca8 <USBD_static_malloc+0x14>)
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr
 8005ca8:	2000018c 	.word	0x2000018c

08005cac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]

}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d817      	bhi.n	8005d18 <USBD_Get_USB_Status+0x44>
 8005ce8:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <USBD_Get_USB_Status+0x1c>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d01 	.word	0x08005d01
 8005cf4:	08005d07 	.word	0x08005d07
 8005cf8:	08005d0d 	.word	0x08005d0d
 8005cfc:	08005d13 	.word	0x08005d13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]
    break;
 8005d04:	e00b      	b.n	8005d1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005d06:	2302      	movs	r3, #2
 8005d08:	73fb      	strb	r3, [r7, #15]
    break;
 8005d0a:	e008      	b.n	8005d1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d10:	e005      	b.n	8005d1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005d12:	2302      	movs	r3, #2
 8005d14:	73fb      	strb	r3, [r7, #15]
    break;
 8005d16:	e002      	b.n	8005d1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005d18:	2302      	movs	r3, #2
 8005d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8005d1c:	bf00      	nop
  }
  return usb_status;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop

08005d2c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005d30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005d3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr

08005d48 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	460a      	mov	r2, r1
 8005d52:	71fb      	strb	r3, [r7, #7]
 8005d54:	4613      	mov	r3, r2
 8005d56:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <CUSTOM_HID_OutEvent_FS+0x4c>)
 8005d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5e:	60fb      	str	r3, [r7, #12]
//  memcpy(usbData, hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  switch (hhid->Report_buf[0]) {
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d002      	beq.n	8005d6e <CUSTOM_HID_OutEvent_FS+0x26>
 8005d68:	2b05      	cmp	r3, #5
 8005d6a:	d007      	beq.n	8005d7c <CUSTOM_HID_OutEvent_FS+0x34>
  case 2: HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_SET); break;
  case 5: HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET); break;
  default: break;
 8005d6c:	e00d      	b.n	8005d8a <CUSTOM_HID_OutEvent_FS+0x42>
  case 2: HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_SET); break;
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d74:	4808      	ldr	r0, [pc, #32]	; (8005d98 <CUSTOM_HID_OutEvent_FS+0x50>)
 8005d76:	f7fa fcec 	bl	8000752 <HAL_GPIO_WritePin>
 8005d7a:	e006      	b.n	8005d8a <CUSTOM_HID_OutEvent_FS+0x42>
  case 5: HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET); break;
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d82:	4805      	ldr	r0, [pc, #20]	; (8005d98 <CUSTOM_HID_OutEvent_FS+0x50>)
 8005d84:	f7fa fce5 	bl	8000752 <HAL_GPIO_WritePin>
 8005d88:	bf00      	nop
  }

  return (USBD_OK);
 8005d8a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000214 	.word	0x20000214
 8005d98:	40011000 	.word	0x40011000

08005d9c <handleButtonChange>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

static void handleButtonChange(uint8_t isPressed) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, isPressed ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005db8:	480d      	ldr	r0, [pc, #52]	; (8005df0 <handleButtonChange+0x54>)
 8005dba:	f7fa fcca 	bl	8000752 <HAL_GPIO_WritePin>

	dataToSend[1] = isPressed;
 8005dbe:	4a0d      	ldr	r2, [pc, #52]	; (8005df4 <handleButtonChange+0x58>)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	7053      	strb	r3, [r2, #1]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, sizeof(dataToSend));
 8005dc4:	2205      	movs	r2, #5
 8005dc6:	490b      	ldr	r1, [pc, #44]	; (8005df4 <handleButtonChange+0x58>)
 8005dc8:	480b      	ldr	r0, [pc, #44]	; (8005df8 <handleButtonChange+0x5c>)
 8005dca:	f7fd fd47 	bl	800385c <USBD_CUSTOM_HID_SendReport>

	HAL_GPIO_WritePin(START_LED_GPIO_Port, START_LED_Pin, isPressed ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bf14      	ite	ne
 8005dd4:	2301      	movne	r3, #1
 8005dd6:	2300      	moveq	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005de0:	4806      	ldr	r0, [pc, #24]	; (8005dfc <handleButtonChange+0x60>)
 8005de2:	f7fa fcb6 	bl	8000752 <HAL_GPIO_WritePin>
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40011000 	.word	0x40011000
 8005df4:	20000104 	.word	0x20000104
 8005df8:	20000214 	.word	0x20000214
 8005dfc:	40010800 	.word	0x40010800

08005e00 <HAL_GPIO_EXTI_Callback>:

#define ACTIVE_BUTTON_PIN (GPIO_PIN_SET)

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	80fb      	strh	r3, [r7, #6]
	if (ACTIVE_BUTTON_PIN == HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin)) {
 8005e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e0e:	4826      	ldr	r0, [pc, #152]	; (8005ea8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005e10:	f7fa fc88 	bl	8000724 <HAL_GPIO_ReadPin>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d108      	bne.n	8005e2c <HAL_GPIO_EXTI_Callback+0x2c>
		handleButtonChange(10);
 8005e1a:	200a      	movs	r0, #10
 8005e1c:	f7ff ffbe 	bl	8005d9c <handleButtonChange>
		PlayerLeds_SetPlayer(&playerLedsCtrl, PLAYER_1, PLAYER_VIS_ONLY_SYSTEM);
 8005e20:	2202      	movs	r2, #2
 8005e22:	2100      	movs	r1, #0
 8005e24:	4821      	ldr	r0, [pc, #132]	; (8005eac <HAL_GPIO_EXTI_Callback+0xac>)
 8005e26:	f7ff fb65 	bl	80054f4 <PlayerLeds_SetPlayer>
		PlayerLeds_SetPlayer(&playerLedsCtrl, PLAYER_4, PLAYER_VIS_ONLY_SYSTEM);
	} else {
		handleButtonChange(0);
		PlayerLeds_ClearAll(&playerLedsCtrl);
	}
}
 8005e2a:	e038      	b.n	8005e9e <HAL_GPIO_EXTI_Callback+0x9e>
	} else if (ACTIVE_BUTTON_PIN == HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin)) {
 8005e2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e30:	481d      	ldr	r0, [pc, #116]	; (8005ea8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005e32:	f7fa fc77 	bl	8000724 <HAL_GPIO_ReadPin>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d108      	bne.n	8005e4e <HAL_GPIO_EXTI_Callback+0x4e>
		handleButtonChange(20);
 8005e3c:	2014      	movs	r0, #20
 8005e3e:	f7ff ffad 	bl	8005d9c <handleButtonChange>
		PlayerLeds_SetPlayer(&playerLedsCtrl, PLAYER_2, PLAYER_VIS_ONLY_SYSTEM);
 8005e42:	2202      	movs	r2, #2
 8005e44:	2101      	movs	r1, #1
 8005e46:	4819      	ldr	r0, [pc, #100]	; (8005eac <HAL_GPIO_EXTI_Callback+0xac>)
 8005e48:	f7ff fb54 	bl	80054f4 <PlayerLeds_SetPlayer>
}
 8005e4c:	e027      	b.n	8005e9e <HAL_GPIO_EXTI_Callback+0x9e>
	} else if (ACTIVE_BUTTON_PIN == HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin)) {
 8005e4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e52:	4815      	ldr	r0, [pc, #84]	; (8005ea8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005e54:	f7fa fc66 	bl	8000724 <HAL_GPIO_ReadPin>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d108      	bne.n	8005e70 <HAL_GPIO_EXTI_Callback+0x70>
		handleButtonChange(30);
 8005e5e:	201e      	movs	r0, #30
 8005e60:	f7ff ff9c 	bl	8005d9c <handleButtonChange>
		PlayerLeds_SetPlayer(&playerLedsCtrl, PLAYER_3, PLAYER_VIS_ONLY_SYSTEM);
 8005e64:	2202      	movs	r2, #2
 8005e66:	2102      	movs	r1, #2
 8005e68:	4810      	ldr	r0, [pc, #64]	; (8005eac <HAL_GPIO_EXTI_Callback+0xac>)
 8005e6a:	f7ff fb43 	bl	80054f4 <PlayerLeds_SetPlayer>
}
 8005e6e:	e016      	b.n	8005e9e <HAL_GPIO_EXTI_Callback+0x9e>
	} else if (ACTIVE_BUTTON_PIN == HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin)) {
 8005e70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e74:	480c      	ldr	r0, [pc, #48]	; (8005ea8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005e76:	f7fa fc55 	bl	8000724 <HAL_GPIO_ReadPin>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d108      	bne.n	8005e92 <HAL_GPIO_EXTI_Callback+0x92>
		handleButtonChange(40);
 8005e80:	2028      	movs	r0, #40	; 0x28
 8005e82:	f7ff ff8b 	bl	8005d9c <handleButtonChange>
		PlayerLeds_SetPlayer(&playerLedsCtrl, PLAYER_4, PLAYER_VIS_ONLY_SYSTEM);
 8005e86:	2202      	movs	r2, #2
 8005e88:	2103      	movs	r1, #3
 8005e8a:	4808      	ldr	r0, [pc, #32]	; (8005eac <HAL_GPIO_EXTI_Callback+0xac>)
 8005e8c:	f7ff fb32 	bl	80054f4 <PlayerLeds_SetPlayer>
}
 8005e90:	e005      	b.n	8005e9e <HAL_GPIO_EXTI_Callback+0x9e>
		handleButtonChange(0);
 8005e92:	2000      	movs	r0, #0
 8005e94:	f7ff ff82 	bl	8005d9c <handleButtonChange>
		PlayerLeds_ClearAll(&playerLedsCtrl);
 8005e98:	4804      	ldr	r0, [pc, #16]	; (8005eac <HAL_GPIO_EXTI_Callback+0xac>)
 8005e9a:	f7ff fb12 	bl	80054c2 <PlayerLeds_ClearAll>
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40010c00 	.word	0x40010c00
 8005eac:	2000020c 	.word	0x2000020c

08005eb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	6039      	str	r1, [r7, #0]
 8005eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2212      	movs	r2, #18
 8005ec0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005ec2:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20000138 	.word	0x20000138

08005ed4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005ee6:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	2000014c 	.word	0x2000014c

08005ef8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	6039      	str	r1, [r7, #0]
 8005f02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d105      	bne.n	8005f16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	4907      	ldr	r1, [pc, #28]	; (8005f2c <USBD_FS_ProductStrDescriptor+0x34>)
 8005f0e:	4808      	ldr	r0, [pc, #32]	; (8005f30 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f10:	f7fe fd1d 	bl	800494e <USBD_GetString>
 8005f14:	e004      	b.n	8005f20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	4904      	ldr	r1, [pc, #16]	; (8005f2c <USBD_FS_ProductStrDescriptor+0x34>)
 8005f1a:	4805      	ldr	r0, [pc, #20]	; (8005f30 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f1c:	f7fe fd17 	bl	800494e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f20:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000744 	.word	0x20000744
 8005f30:	0800619c 	.word	0x0800619c

08005f34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	4904      	ldr	r1, [pc, #16]	; (8005f54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005f44:	4804      	ldr	r0, [pc, #16]	; (8005f58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005f46:	f7fe fd02 	bl	800494e <USBD_GetString>
  return USBD_StrDesc;
 8005f4a:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000744 	.word	0x20000744
 8005f58:	080061b0 	.word	0x080061b0

08005f5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	6039      	str	r1, [r7, #0]
 8005f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	221a      	movs	r2, #26
 8005f6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f6e:	f000 f843 	bl	8005ff8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f72:	4b02      	ldr	r3, [pc, #8]	; (8005f7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20000150 	.word	0x20000150

08005f80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	4907      	ldr	r1, [pc, #28]	; (8005fb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f96:	4808      	ldr	r0, [pc, #32]	; (8005fb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f98:	f7fe fcd9 	bl	800494e <USBD_GetString>
 8005f9c:	e004      	b.n	8005fa8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	4904      	ldr	r1, [pc, #16]	; (8005fb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005fa2:	4805      	ldr	r0, [pc, #20]	; (8005fb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005fa4:	f7fe fcd3 	bl	800494e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fa8:	4b02      	ldr	r3, [pc, #8]	; (8005fb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000744 	.word	0x20000744
 8005fb8:	080061bc 	.word	0x080061bc

08005fbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	6039      	str	r1, [r7, #0]
 8005fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d105      	bne.n	8005fda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	4907      	ldr	r1, [pc, #28]	; (8005ff0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fd2:	4808      	ldr	r0, [pc, #32]	; (8005ff4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fd4:	f7fe fcbb 	bl	800494e <USBD_GetString>
 8005fd8:	e004      	b.n	8005fe4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fde:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fe0:	f7fe fcb5 	bl	800494e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fe4:	4b02      	ldr	r3, [pc, #8]	; (8005ff0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000744 	.word	0x20000744
 8005ff4:	080061d0 	.word	0x080061d0

08005ff8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <Get_SerialNum+0x44>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <Get_SerialNum+0x48>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <Get_SerialNum+0x4c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d009      	beq.n	8006032 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800601e:	2208      	movs	r2, #8
 8006020:	4909      	ldr	r1, [pc, #36]	; (8006048 <Get_SerialNum+0x50>)
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f814 	bl	8006050 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006028:	2204      	movs	r2, #4
 800602a:	4908      	ldr	r1, [pc, #32]	; (800604c <Get_SerialNum+0x54>)
 800602c:	68b8      	ldr	r0, [r7, #8]
 800602e:	f000 f80f 	bl	8006050 <IntToUnicode>
  }
}
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	1ffff7e8 	.word	0x1ffff7e8
 8006040:	1ffff7ec 	.word	0x1ffff7ec
 8006044:	1ffff7f0 	.word	0x1ffff7f0
 8006048:	20000152 	.word	0x20000152
 800604c:	20000162 	.word	0x20000162

08006050 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006062:	2300      	movs	r3, #0
 8006064:	75fb      	strb	r3, [r7, #23]
 8006066:	e027      	b.n	80060b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	0f1b      	lsrs	r3, r3, #28
 800606c:	2b09      	cmp	r3, #9
 800606e:	d80b      	bhi.n	8006088 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	0f1b      	lsrs	r3, r3, #28
 8006074:	b2da      	uxtb	r2, r3
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	4619      	mov	r1, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	440b      	add	r3, r1
 8006080:	3230      	adds	r2, #48	; 0x30
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e00a      	b.n	800609e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	0f1b      	lsrs	r3, r3, #28
 800608c:	b2da      	uxtb	r2, r3
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	4619      	mov	r1, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	440b      	add	r3, r1
 8006098:	3237      	adds	r2, #55	; 0x37
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	3301      	adds	r3, #1
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	3301      	adds	r3, #1
 80060b6:	75fb      	strb	r3, [r7, #23]
 80060b8:	7dfa      	ldrb	r2, [r7, #23]
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d3d3      	bcc.n	8006068 <IntToUnicode+0x18>
  }
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr
	...

080060cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80060cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80060ce:	e003      	b.n	80060d8 <LoopCopyDataInit>

080060d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80060d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80060d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80060d6:	3104      	adds	r1, #4

080060d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80060d8:	480a      	ldr	r0, [pc, #40]	; (8006104 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80060da:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80060dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80060de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80060e0:	d3f6      	bcc.n	80060d0 <CopyDataInit>
  ldr r2, =_sbss
 80060e2:	4a0a      	ldr	r2, [pc, #40]	; (800610c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80060e4:	e002      	b.n	80060ec <LoopFillZerobss>

080060e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80060e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80060e8:	f842 3b04 	str.w	r3, [r2], #4

080060ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80060ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80060f0:	d3f9      	bcc.n	80060e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80060f2:	f7ff fb37 	bl	8005764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060f6:	f000 f80f 	bl	8006118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80060fa:	f7ff f827 	bl	800514c <main>
  bx lr
 80060fe:	4770      	bx	lr
  ldr r3, =_sidata
 8006100:	08006200 	.word	0x08006200
  ldr r0, =_sdata
 8006104:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006108:	2000016c 	.word	0x2000016c
  ldr r2, =_sbss
 800610c:	2000016c 	.word	0x2000016c
  ldr r3, = _ebss
 8006110:	20000944 	.word	0x20000944

08006114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006114:	e7fe      	b.n	8006114 <ADC1_2_IRQHandler>
	...

08006118 <__libc_init_array>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	2500      	movs	r5, #0
 800611c:	4e0c      	ldr	r6, [pc, #48]	; (8006150 <__libc_init_array+0x38>)
 800611e:	4c0d      	ldr	r4, [pc, #52]	; (8006154 <__libc_init_array+0x3c>)
 8006120:	1ba4      	subs	r4, r4, r6
 8006122:	10a4      	asrs	r4, r4, #2
 8006124:	42a5      	cmp	r5, r4
 8006126:	d109      	bne.n	800613c <__libc_init_array+0x24>
 8006128:	f000 f822 	bl	8006170 <_init>
 800612c:	2500      	movs	r5, #0
 800612e:	4e0a      	ldr	r6, [pc, #40]	; (8006158 <__libc_init_array+0x40>)
 8006130:	4c0a      	ldr	r4, [pc, #40]	; (800615c <__libc_init_array+0x44>)
 8006132:	1ba4      	subs	r4, r4, r6
 8006134:	10a4      	asrs	r4, r4, #2
 8006136:	42a5      	cmp	r5, r4
 8006138:	d105      	bne.n	8006146 <__libc_init_array+0x2e>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006140:	4798      	blx	r3
 8006142:	3501      	adds	r5, #1
 8006144:	e7ee      	b.n	8006124 <__libc_init_array+0xc>
 8006146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800614a:	4798      	blx	r3
 800614c:	3501      	adds	r5, #1
 800614e:	e7f2      	b.n	8006136 <__libc_init_array+0x1e>
 8006150:	080061f8 	.word	0x080061f8
 8006154:	080061f8 	.word	0x080061f8
 8006158:	080061f8 	.word	0x080061f8
 800615c:	080061fc 	.word	0x080061fc

08006160 <memset>:
 8006160:	4603      	mov	r3, r0
 8006162:	4402      	add	r2, r0
 8006164:	4293      	cmp	r3, r2
 8006166:	d100      	bne.n	800616a <memset+0xa>
 8006168:	4770      	bx	lr
 800616a:	f803 1b01 	strb.w	r1, [r3], #1
 800616e:	e7f9      	b.n	8006164 <memset+0x4>

08006170 <_init>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr

0800617c <_fini>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	bf00      	nop
 8006180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006182:	bc08      	pop	{r3}
 8006184:	469e      	mov	lr, r3
 8006186:	4770      	bx	lr
