
UsbHidCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007040  08007040  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  08007040  08007040  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007040  08007040  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08007048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000818  2000016c  080071b4  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  080071b4  00020984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e2a  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034a3  00000000  00000000  00036fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001258  00000000  00000000  0003a468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b0  00000000  00000000  0003b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017d89  00000000  00000000  0003c770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010337  00000000  00000000  000544f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077215  00000000  00000000  00064830  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dba45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae4  00000000  00000000  000dbac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000016c 	.word	0x2000016c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006fb8 	.word	0x08006fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000170 	.word	0x20000170
 8000148:	08006fb8 	.word	0x08006fb8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f006 f8d0 	bl	800630c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	200000dc 	.word	0x200000dc
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200001a8 	.word	0x200001a8

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200001a8 	.word	0x200001a8

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	4013      	ands	r3, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e001      	b.n	8000746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
 800075e:	4613      	mov	r3, r2
 8000760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000762:	787b      	ldrb	r3, [r7, #1]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800076e:	e003      	b.n	8000778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	041a      	lsls	r2, r3, #16
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	611a      	str	r2, [r3, #16]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4013      	ands	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f006 fa08 	bl	8006bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010400 	.word	0x40010400

080007b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	b08b      	sub	sp, #44	; 0x2c
 80007b8:	af06      	add	r7, sp, #24
 80007ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e0d3      	b.n	800096e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d106      	bne.n	80007e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f005 ff10 	bl	8006600 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2203      	movs	r2, #3
 80007e4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fb27 	bl	8002e40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	687e      	ldr	r6, [r7, #4]
 80007fa:	466d      	mov	r5, sp
 80007fc:	f106 0410 	add.w	r4, r6, #16
 8000800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	602b      	str	r3, [r5, #0]
 8000808:	1d33      	adds	r3, r6, #4
 800080a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800080c:	6838      	ldr	r0, [r7, #0]
 800080e:	f002 faf0 	bl	8002df2 <USB_CoreInit>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2202      	movs	r2, #2
 800081c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	e0a4      	b.n	800096e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fb24 	bl	8002e78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e035      	b.n	80008a2 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	015b      	lsls	r3, r3, #5
 800083c:	4413      	add	r3, r2
 800083e:	3329      	adds	r3, #41	; 0x29
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	015b      	lsls	r3, r3, #5
 800084a:	4413      	add	r3, r2
 800084c:	3328      	adds	r3, #40	; 0x28
 800084e:	7bfa      	ldrb	r2, [r7, #15]
 8000850:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	7bfa      	ldrb	r2, [r7, #15]
 8000856:	b291      	uxth	r1, r2
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	015b      	lsls	r3, r3, #5
 800085c:	4413      	add	r3, r2
 800085e:	3336      	adds	r3, #54	; 0x36
 8000860:	460a      	mov	r2, r1
 8000862:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	015b      	lsls	r3, r3, #5
 800086a:	4413      	add	r3, r2
 800086c:	332b      	adds	r3, #43	; 0x2b
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	015b      	lsls	r3, r3, #5
 8000878:	4413      	add	r3, r2
 800087a:	3338      	adds	r3, #56	; 0x38
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	015b      	lsls	r3, r3, #5
 8000886:	4413      	add	r3, r2
 8000888:	333c      	adds	r3, #60	; 0x3c
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	3302      	adds	r3, #2
 8000894:	015b      	lsls	r3, r3, #5
 8000896:	4413      	add	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	3301      	adds	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d3c4      	bcc.n	8000836 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e031      	b.n	8000916 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	015b      	lsls	r3, r3, #5
 80008b8:	4413      	add	r3, r2
 80008ba:	f203 1329 	addw	r3, r3, #297	; 0x129
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	015b      	lsls	r3, r3, #5
 80008c8:	4413      	add	r3, r2
 80008ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80008ce:	7bfa      	ldrb	r2, [r7, #15]
 80008d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	015b      	lsls	r3, r3, #5
 80008d8:	4413      	add	r3, r2
 80008da:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	015b      	lsls	r3, r3, #5
 80008e8:	4413      	add	r3, r2
 80008ea:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	015b      	lsls	r3, r3, #5
 80008f8:	4413      	add	r3, r2
 80008fa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	330a      	adds	r3, #10
 8000908:	015b      	lsls	r3, r3, #5
 800090a:	4413      	add	r3, r2
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	3301      	adds	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	7bfa      	ldrb	r2, [r7, #15]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3c8      	bcc.n	80008b2 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	687e      	ldr	r6, [r7, #4]
 8000928:	466d      	mov	r5, sp
 800092a:	f106 0410 	add.w	r4, r6, #16
 800092e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	602b      	str	r3, [r5, #0]
 8000936:	1d33      	adds	r3, r6, #4
 8000938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800093a:	6838      	ldr	r0, [r7, #0]
 800093c:	f002 faa8 	bl	8002e90 <USB_DevInit>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d005      	beq.n	8000952 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2202      	movs	r2, #2
 800094a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e00d      	b.n	800096e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f003 fae5 	bl	8003f36 <USB_DevDisconnect>

  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000976 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000984:	2b01      	cmp	r3, #1
 8000986:	d101      	bne.n	800098c <HAL_PCD_Start+0x16>
 8000988:	2302      	movs	r3, #2
 800098a:	e016      	b.n	80009ba <HAL_PCD_Start+0x44>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2201      	movs	r2, #1
 8000990:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000994:	2101      	movs	r1, #1
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f006 f87b 	bl	8006a92 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f003 fabe 	bl	8003f22 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fa31 	bl	8002e12 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fabb 	bl	8003f4a <USB_ReadInterrupts>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009de:	d102      	bne.n	80009e6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 fadf 	bl	8000fa4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 faad 	bl	8003f4a <USB_ReadInterrupts>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009fa:	d112      	bne.n	8000a22 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a0e:	b292      	uxth	r2, r2
 8000a10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f005 fe68 	bl	80066ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f8de 	bl	8000bde <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fa8f 	bl	8003f4a <USB_ReadInterrupts>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a36:	d10b      	bne.n	8000a50 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a4a:	b292      	uxth	r2, r2
 8000a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 fa78 	bl	8003f4a <USB_ReadInterrupts>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a64:	d10b      	bne.n	8000a7e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a78:	b292      	uxth	r2, r2
 8000a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fa61 	bl	8003f4a <USB_ReadInterrupts>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a92:	d126      	bne.n	8000ae2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f022 0204 	bic.w	r2, r2, #4
 8000aa6:	b292      	uxth	r2, r2
 8000aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0208 	bic.w	r2, r2, #8
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f005 fe49 	bl	800675c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000adc:	b292      	uxth	r2, r2
 8000ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fa2f 	bl	8003f4a <USB_ReadInterrupts>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000af6:	d13d      	bne.n	8000b74 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0208 	orr.w	r2, r2, #8
 8000b0a:	b292      	uxth	r2, r2
 8000b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b22:	b292      	uxth	r2, r2
 8000b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0204 	orr.w	r2, r2, #4
 8000b3a:	b292      	uxth	r2, r2
 8000b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fa00 	bl	8003f4a <USB_ReadInterrupts>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b54:	d10b      	bne.n	8000b6e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b68:	b292      	uxth	r2, r2
 8000b6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f005 fdda 	bl	8006728 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 f9e6 	bl	8003f4a <USB_ReadInterrupts>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b88:	d10e      	bne.n	8000ba8 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b9c:	b292      	uxth	r2, r2
 8000b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f005 fd93 	bl	80066ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 f9cc 	bl	8003f4a <USB_ReadInterrupts>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bd0:	b292      	uxth	r2, r2
 8000bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	460b      	mov	r3, r1
 8000be8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <HAL_PCD_SetAddress+0x1a>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e013      	b.n	8000c20 <HAL_PCD_SetAddress+0x42>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	78fa      	ldrb	r2, [r7, #3]
 8000c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	78fa      	ldrb	r2, [r7, #3]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f973 	bl	8003efc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	4608      	mov	r0, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	4603      	mov	r3, r0
 8000c38:	70fb      	strb	r3, [r7, #3]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	803b      	strh	r3, [r7, #0]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da0b      	bge.n	8000c66 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	f003 0307 	and.w	r3, r3, #7
 8000c54:	015b      	lsls	r3, r3, #5
 8000c56:	3328      	adds	r3, #40	; 0x28
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2201      	movs	r2, #1
 8000c62:	705a      	strb	r2, [r3, #1]
 8000c64:	e00b      	b.n	8000c7e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	015b      	lsls	r3, r3, #5
 8000c6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c8a:	883a      	ldrh	r2, [r7, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	78ba      	ldrb	r2, [r7, #2]
 8000c94:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d102      	bne.n	8000cb4 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d101      	bne.n	8000cc2 <HAL_PCD_EP_Open+0x9a>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e00e      	b.n	8000ce0 <HAL_PCD_EP_Open+0xb8>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68f9      	ldr	r1, [r7, #12]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 f901 	bl	8002ed8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000cde:	7afb      	ldrb	r3, [r7, #11]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	da0b      	bge.n	8000d14 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	3328      	adds	r3, #40	; 0x28
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	705a      	strb	r2, [r3, #1]
 8000d12:	e00b      	b.n	8000d2c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	015b      	lsls	r3, r3, #5
 8000d1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d101      	bne.n	8000d46 <HAL_PCD_EP_Close+0x5e>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e00e      	b.n	8000d64 <HAL_PCD_EP_Close+0x7c>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68f9      	ldr	r1, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fbad 	bl	80034b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d7c:	7afb      	ldrb	r3, [r7, #11]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	015b      	lsls	r3, r3, #5
 8000d84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2200      	movs	r2, #0
 8000da4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6979      	ldr	r1, [r7, #20]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fd0c 	bl	80037e0 <USB_EPStartXfer>
 8000dc8:	e005      	b.n	8000dd6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6979      	ldr	r1, [r7, #20]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fd05 	bl	80037e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	460b      	mov	r3, r1
 8000dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	015b      	lsls	r3, r3, #5
 8000df8:	3328      	adds	r3, #40	; 0x28
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2201      	movs	r2, #1
 8000e16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e18:	7afb      	ldrb	r3, [r7, #11]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e24:	7afb      	ldrb	r3, [r7, #11]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d106      	bne.n	8000e3c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6979      	ldr	r1, [r7, #20]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 fcd3 	bl	80037e0 <USB_EPStartXfer>
 8000e3a:	e005      	b.n	8000e48 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6979      	ldr	r1, [r7, #20]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fccc 	bl	80037e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	f003 0207 	and.w	r2, r3, #7
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d901      	bls.n	8000e70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e046      	b.n	8000efe <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da0b      	bge.n	8000e90 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	015b      	lsls	r3, r3, #5
 8000e80:	3328      	adds	r3, #40	; 0x28
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	705a      	strb	r2, [r3, #1]
 8000e8e:	e009      	b.n	8000ea4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d101      	bne.n	8000ec4 <HAL_PCD_EP_SetStall+0x72>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e01c      	b.n	8000efe <HAL_PCD_EP_SetStall+0xac>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68f9      	ldr	r1, [r7, #12]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 ff3c 	bl	8003d50 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d108      	bne.n	8000ef4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000eec:	4619      	mov	r1, r3
 8000eee:	4610      	mov	r0, r2
 8000ef0:	f003 f83a 	bl	8003f68 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	f003 020f 	and.w	r2, r3, #15
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d901      	bls.n	8000f24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e03a      	b.n	8000f9a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da0b      	bge.n	8000f44 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	3328      	adds	r3, #40	; 0x28
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	705a      	strb	r2, [r3, #1]
 8000f42:	e00b      	b.n	8000f5c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	015b      	lsls	r3, r3, #5
 8000f4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <HAL_PCD_EP_ClrStall+0x76>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e00e      	b.n	8000f9a <HAL_PCD_EP_ClrStall+0x94>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 ff22 	bl	8003dd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000fac:	e282      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000fb8:	8afb      	ldrh	r3, [r7, #22]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000fc2:	7d7b      	ldrb	r3, [r7, #21]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f040 8142 	bne.w	800124e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fca:	8afb      	ldrh	r3, [r7, #22]
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d151      	bne.n	8001078 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fe4:	b29c      	uxth	r4, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8000fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3328      	adds	r3, #40	; 0x28
 8000ffa:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001004:	b29b      	uxth	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4413      	add	r3, r2
 8001010:	3302      	adds	r3, #2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	4413      	add	r3, r2
 800101a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	441a      	add	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001036:	2100      	movs	r1, #0
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f005 fb31 	bl	80066a0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8234 	beq.w	80014b4 <PCD_EP_ISR_Handler+0x510>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f040 822f 	bne.w	80014b4 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001062:	b2da      	uxtb	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	b292      	uxth	r2, r2
 800106a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001076:	e21d      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800107e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001088:	8a7b      	ldrh	r3, [r7, #18]
 800108a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108e:	2b00      	cmp	r3, #0
 8001090:	d033      	beq.n	80010fa <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800109a:	b29b      	uxth	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	3306      	adds	r3, #6
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f002 ff98 	bl	8004006 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010e2:	4013      	ands	r3, r2
 80010e4:	b29c      	uxth	r4, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80010ee:	b292      	uxth	r2, r2
 80010f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f005 faaa 	bl	800664c <HAL_PCD_SetupStageCallback>
 80010f8:	e1dc      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f280 81d8 	bge.w	80014b4 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29a      	uxth	r2, r3
 800110c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001110:	4013      	ands	r3, r2
 8001112:	b29c      	uxth	r4, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800111c:	b292      	uxth	r2, r2
 800111e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001128:	b29b      	uxth	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4413      	add	r3, r2
 8001134:	3306      	adds	r3, #6
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	4413      	add	r3, r2
 800113e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d019      	beq.n	8001188 <PCD_EP_ISR_Handler+0x1e4>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d015      	beq.n	8001188 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6959      	ldr	r1, [r3, #20]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800116c:	b29b      	uxth	r3, r3
 800116e:	f002 ff4a 	bl	8004006 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	441a      	add	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001180:	2100      	movs	r1, #0
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f005 fa74 	bl	8006670 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	461c      	mov	r4, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001196:	b29b      	uxth	r3, r3
 8001198:	441c      	add	r4, r3
 800119a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800119e:	461c      	mov	r4, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10e      	bne.n	80011c6 <PCD_EP_ISR_Handler+0x222>
 80011a8:	8823      	ldrh	r3, [r4, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	8023      	strh	r3, [r4, #0]
 80011b4:	8823      	ldrh	r3, [r4, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	8023      	strh	r3, [r4, #0]
 80011c4:	e02d      	b.n	8001222 <PCD_EP_ISR_Handler+0x27e>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b3e      	cmp	r3, #62	; 0x3e
 80011cc:	d812      	bhi.n	80011f4 <PCD_EP_ISR_Handler+0x250>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <PCD_EP_ISR_Handler+0x244>
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	029b      	lsls	r3, r3, #10
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	8023      	strh	r3, [r4, #0]
 80011f2:	e016      	b.n	8001222 <PCD_EP_ISR_Handler+0x27e>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <PCD_EP_ISR_Handler+0x26a>
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	3b01      	subs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	b29b      	uxth	r3, r3
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	b29b      	uxth	r3, r3
 8001216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800121a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800121e:	b29b      	uxth	r3, r3
 8001220:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800122e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001232:	b29c      	uxth	r4, r3
 8001234:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001238:	b29c      	uxth	r4, r3
 800123a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800123e:	b29c      	uxth	r4, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4ba2      	ldr	r3, [pc, #648]	; (80014d0 <PCD_EP_ISR_Handler+0x52c>)
 8001246:	4323      	orrs	r3, r4
 8001248:	b29b      	uxth	r3, r3
 800124a:	8013      	strh	r3, [r2, #0]
 800124c:	e132      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	7d7b      	ldrb	r3, [r7, #21]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800125e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f280 80d1 	bge.w	800140a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	7d7b      	ldrb	r3, [r7, #21]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b29a      	uxth	r2, r3
 8001278:	f640 738f 	movw	r3, #3983	; 0xf8f
 800127c:	4013      	ands	r3, r2
 800127e:	b29c      	uxth	r4, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	7d7b      	ldrb	r3, [r7, #21]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001290:	b292      	uxth	r2, r2
 8001292:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001294:	7d7b      	ldrb	r3, [r7, #21]
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	7b1b      	ldrb	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d121      	bne.n	80012ee <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	3306      	adds	r3, #6
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012d2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80012d4:	8bfb      	ldrh	r3, [r7, #30]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d072      	beq.n	80013c0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6959      	ldr	r1, [r3, #20]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	88da      	ldrh	r2, [r3, #6]
 80012e6:	8bfb      	ldrh	r3, [r7, #30]
 80012e8:	f002 fe8d 	bl	8004006 <USB_ReadPMA>
 80012ec:	e068      	b.n	80013c0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d021      	beq.n	800134c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4413      	add	r3, r2
 800131c:	3302      	adds	r3, #2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	4413      	add	r3, r2
 8001326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001330:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001332:	8bfb      	ldrh	r3, [r7, #30]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d02a      	beq.n	800138e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6959      	ldr	r1, [r3, #20]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	891a      	ldrh	r2, [r3, #8]
 8001344:	8bfb      	ldrh	r3, [r7, #30]
 8001346:	f002 fe5e 	bl	8004006 <USB_ReadPMA>
 800134a:	e020      	b.n	800138e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001354:	b29b      	uxth	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	3306      	adds	r3, #6
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	4413      	add	r3, r2
 800136a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001374:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001376:	8bfb      	ldrh	r3, [r7, #30]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6959      	ldr	r1, [r3, #20]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	895a      	ldrh	r2, [r3, #10]
 8001388:	8bfb      	ldrh	r3, [r7, #30]
 800138a:	f002 fe3c 	bl	8004006 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a8:	b29c      	uxth	r4, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	441a      	add	r2, r3
 80013b8:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <PCD_EP_ISR_Handler+0x530>)
 80013ba:	4323      	orrs	r3, r4
 80013bc:	b29b      	uxth	r3, r3
 80013be:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	69da      	ldr	r2, [r3, #28]
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	441a      	add	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	441a      	add	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <PCD_EP_ISR_Handler+0x446>
 80013e0:	8bfa      	ldrh	r2, [r7, #30]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d206      	bcs.n	80013f8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f005 f93d 	bl	8006670 <HAL_PCD_DataOutStageCallback>
 80013f6:	e008      	b.n	800140a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	7819      	ldrb	r1, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fcb1 	bl	8000d6c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800140a:	8a7b      	ldrh	r3, [r7, #18]
 800140c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001410:	2b00      	cmp	r3, #0
 8001412:	d04f      	beq.n	80014b4 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001414:	7d7b      	ldrb	r3, [r7, #21]
 8001416:	015b      	lsls	r3, r3, #5
 8001418:	3328      	adds	r3, #40	; 0x28
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	7d7b      	ldrb	r3, [r7, #21]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001438:	b29c      	uxth	r4, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	7d7b      	ldrb	r3, [r7, #21]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	441a      	add	r2, r3
 8001446:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800144a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800144e:	b29b      	uxth	r3, r3
 8001450:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800145a:	b29b      	uxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	3302      	adds	r3, #2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	4413      	add	r3, r2
 8001470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	441a      	add	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f005 f900 	bl	80066a0 <HAL_PCD_DataInStageCallback>
 80014a0:	e008      	b.n	80014b4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	7819      	ldrb	r1, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fc96 	bl	8000de0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b21b      	sxth	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f6ff ad74 	blt.w	8000fae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3724      	adds	r7, #36	; 0x24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}
 80014d0:	ffff8080 	.word	0xffff8080
 80014d4:	ffff80c0 	.word	0xffff80c0

080014d8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	817b      	strh	r3, [r7, #10]
 80014e6:	4613      	mov	r3, r2
 80014e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80014ea:	897b      	ldrh	r3, [r7, #10]
 80014ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f6:	897b      	ldrh	r3, [r7, #10]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	015b      	lsls	r3, r3, #5
 80014fe:	3328      	adds	r3, #40	; 0x28
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e006      	b.n	8001516 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001508:	897b      	ldrh	r3, [r7, #10]
 800150a:	015b      	lsls	r3, r3, #5
 800150c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001516:	893b      	ldrh	r3, [r7, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d107      	bne.n	800152c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2200      	movs	r2, #0
 8001520:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b29a      	uxth	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	80da      	strh	r2, [r3, #6]
 800152a:	e00b      	b.n	8001544 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2201      	movs	r2, #1
 8001530:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	b29a      	uxth	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	b29a      	uxth	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e26c      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8087 	beq.w	800167e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001570:	4b92      	ldr	r3, [pc, #584]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b04      	cmp	r3, #4
 800157a:	d00c      	beq.n	8001596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800157c:	4b8f      	ldr	r3, [pc, #572]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	d112      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
 8001588:	4b8c      	ldr	r3, [pc, #560]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d10b      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	4b89      	ldr	r3, [pc, #548]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d06c      	beq.n	800167c <HAL_RCC_OscConfig+0x12c>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d168      	bne.n	800167c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e246      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x76>
 80015b8:	4b80      	ldr	r3, [pc, #512]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a7f      	ldr	r2, [pc, #508]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e02e      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x98>
 80015ce:	4b7b      	ldr	r3, [pc, #492]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a7a      	ldr	r2, [pc, #488]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b78      	ldr	r3, [pc, #480]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a77      	ldr	r2, [pc, #476]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e01d      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0xbc>
 80015f2:	4b72      	ldr	r3, [pc, #456]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a71      	ldr	r2, [pc, #452]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80015f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0xd4>
 800160c:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a6a      	ldr	r2, [pc, #424]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a67      	ldr	r2, [pc, #412]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800161e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7fe fde6 	bl	80001fc <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7fe fde2 	bl	80001fc <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1fa      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0xe4>
 8001652:	e014      	b.n	800167e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7fe fdd2 	bl	80001fc <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7fe fdce 	bl	80001fc <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e1e6      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x10c>
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d063      	beq.n	8001752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d11c      	bne.n	80016dc <HAL_RCC_OscConfig+0x18c>
 80016a2:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d116      	bne.n	80016dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1ba      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4939      	ldr	r1, [pc, #228]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	e03a      	b.n	8001752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7fe fd87 	bl	80001fc <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7fe fd83 	bl	80001fc <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e19b      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4927      	ldr	r1, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7fe fd66 	bl	80001fc <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7fe fd62 	bl	80001fc <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e17a      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d03a      	beq.n	80017d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d019      	beq.n	800179a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7fe fd46 	bl	80001fc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001774:	f7fe fd42 	bl	80001fc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e15a      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_RCC_OscConfig+0x26c>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f000 faa8 	bl	8001ce8 <RCC_Delay>
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7fe fd2c 	bl	80001fc <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a6:	e00f      	b.n	80017c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a8:	f7fe fd28 	bl	80001fc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d908      	bls.n	80017c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e140      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	42420000 	.word	0x42420000
 80017c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b9e      	ldr	r3, [pc, #632]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e9      	bne.n	80017a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a6 	beq.w	800192e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b97      	ldr	r3, [pc, #604]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10d      	bne.n	800180e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a8a      	ldr	r2, [pc, #552]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7fe fce9 	bl	80001fc <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7fe fce5 	bl	80001fc <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0fd      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_OscConfig+0x4f8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x312>
 8001854:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a7a      	ldr	r2, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	e02d      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x334>
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6213      	str	r3, [r2, #32]
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a72      	ldr	r2, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	e01c      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x356>
 800188c:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a6c      	ldr	r2, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x36e>
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a66      	ldr	r2, [pc, #408]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a63      	ldr	r2, [pc, #396]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d015      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7fe fc99 	bl	80001fc <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7fe fc95 	bl	80001fc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0ab      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ee      	beq.n	80018ce <HAL_RCC_OscConfig+0x37e>
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7fe fc83 	bl	80001fc <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7fe fc7f 	bl	80001fc <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e095      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8081 	beq.w	8001a3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001938:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d061      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d146      	bne.n	80019da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7fe fc53 	bl	80001fc <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7fe fc4f 	bl	80001fc <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e067      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001980:	d108      	bne.n	8001994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	492d      	ldr	r1, [pc, #180]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a19      	ldr	r1, [r3, #32]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	430b      	orrs	r3, r1
 80019a6:	4927      	ldr	r1, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7fe fc23 	bl	80001fc <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7fe fc1f 	bl	80001fc <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e037      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x46a>
 80019d8:	e02f      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_RCC_OscConfig+0x4fc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7fe fc0c 	bl	80001fc <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7fe fc08 	bl	80001fc <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e020      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x498>
 8001a06:	e018      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e013      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42420060 	.word	0x42420060

08001a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0d0      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d910      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4965      	ldr	r1, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	494d      	ldr	r1, [pc, #308]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d040      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d115      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e073      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06b      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4936      	ldr	r1, [pc, #216]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7fe fb5c 	bl	80001fc <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7fe fb58 	bl	80001fc <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e053      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d210      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4922      	ldr	r1, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e032      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4601      	mov	r1, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1cc>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1d0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe faba 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08007030 	.word	0x08007030
 8001c1c:	200000dc 	.word	0x200000dc
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b490      	push	{r4, r7}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c2c:	1d3c      	adds	r4, r7, #4
 8001c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x46>
 8001c62:	e02d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c66:	623b      	str	r3, [r7, #32]
      break;
 8001c68:	e02d      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	0c9b      	lsrs	r3, r3, #18
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c5b      	lsrs	r3, r3, #17
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c96:	4413      	add	r3, r2
 8001c98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca2:	fb02 f203 	mul.w	r2, r2, r3
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	e004      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	623b      	str	r3, [r7, #32]
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc2:	623b      	str	r3, [r7, #32]
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc90      	pop	{r4, r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	08006fd0 	.word	0x08006fd0
 8001cd8:	08006fe0 	.word	0x08006fe0
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	007a1200 	.word	0x007a1200
 8001ce4:	003d0900 	.word	0x003d0900

08001ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <RCC_Delay+0x34>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <RCC_Delay+0x38>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0a5b      	lsrs	r3, r3, #9
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d04:	bf00      	nop
  }
  while (Delay --);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	60fa      	str	r2, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <RCC_Delay+0x1c>
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200000dc 	.word	0x200000dc
 8001d20:	10624dd3 	.word	0x10624dd3

08001d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d07d      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10d      	bne.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	61d3      	str	r3, [r2, #28]
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d118      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d78:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d84:	f7fe fa3a 	bl	80001fc <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	e008      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8c:	f7fe fa36 	bl	80001fc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e06d      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d02e      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d027      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dde:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d014      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fa05 	bl	80001fc <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7fe fa01 	bl	80001fc <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e036      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ee      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4917      	ldr	r1, [pc, #92]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	490b      	ldr	r1, [pc, #44]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	4904      	ldr	r1, [pc, #16]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	42420440 	.word	0x42420440

08001e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e053      	b.n	8001f4a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f004 fa57 	bl	8006370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ed8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	ea42 0103 	orr.w	r1, r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	0c1a      	lsrs	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f002 0204 	and.w	r2, r2, #4
 8001f28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b088      	sub	sp, #32
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_SPI_Transmit+0x22>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e11e      	b.n	80021b2 <HAL_SPI_Transmit+0x260>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f7c:	f7fe f93e 	bl	80001fc <HAL_GetTick>
 8001f80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d002      	beq.n	8001f98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f96:	e103      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_SPI_Transmit+0x52>
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fa8:	e0fa      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff0:	d107      	bne.n	8002002 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002000:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d007      	beq.n	8002020 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800201e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002028:	d14b      	bne.n	80020c2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_SPI_Transmit+0xe6>
 8002032:	8afb      	ldrh	r3, [r7, #22]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d13e      	bne.n	80020b6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	881a      	ldrh	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	1c9a      	adds	r2, r3, #2
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800205c:	e02b      	b.n	80020b6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d112      	bne.n	8002092 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	881a      	ldrh	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	1c9a      	adds	r2, r3, #2
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002090:	e011      	b.n	80020b6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002092:	f7fe f8b3 	bl	80001fc <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d803      	bhi.n	80020aa <HAL_SPI_Transmit+0x158>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d102      	bne.n	80020b0 <HAL_SPI_Transmit+0x15e>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020b4:	e074      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ce      	bne.n	800205e <HAL_SPI_Transmit+0x10c>
 80020c0:	e04c      	b.n	800215c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_SPI_Transmit+0x17e>
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d140      	bne.n	8002152 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	330c      	adds	r3, #12
 80020da:	7812      	ldrb	r2, [r2, #0]
 80020dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020f6:	e02c      	b.n	8002152 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d113      	bne.n	800212e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	330c      	adds	r3, #12
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	86da      	strh	r2, [r3, #54]	; 0x36
 800212c:	e011      	b.n	8002152 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800212e:	f7fe f865 	bl	80001fc <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d803      	bhi.n	8002146 <HAL_SPI_Transmit+0x1f4>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d102      	bne.n	800214c <HAL_SPI_Transmit+0x1fa>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002150:	e026      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1cd      	bne.n	80020f8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f894 	bl	800228e <SPI_EndRxTxTransaction>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	77fb      	strb	r3, [r7, #31]
 800219c:	e000      	b.n	80021a0 <HAL_SPI_Transmit+0x24e>
  }

error:
 800219e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021ca:	e04c      	b.n	8002266 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d048      	beq.n	8002266 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80021d4:	f7fe f812 	bl	80001fc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d902      	bls.n	80021ea <SPI_WaitFlagStateUntilTimeout+0x30>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d13d      	bne.n	8002266 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002202:	d111      	bne.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800220c:	d004      	beq.n	8002218 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002216:	d107      	bne.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002230:	d10f      	bne.n	8002252 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e00f      	b.n	8002286 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4013      	ands	r3, r2
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	429a      	cmp	r2, r3
 8002282:	d1a3      	bne.n	80021cc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af02      	add	r7, sp, #8
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff ff88 	bl	80021ba <SPI_WaitFlagStateUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e000      	b.n	80022c2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e01d      	b.n	8002318 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f004 f887 	bl	8006404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f000 fa39 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e01d      	b.n	800236e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f815 	bl	8002376 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f000 fa0e 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2201      	movs	r2, #1
 8002398:	6839      	ldr	r1, [r7, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fc70 	bl	8002c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <HAL_TIM_PWM_Start+0x60>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d107      	bne.n	80023ba <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d007      	beq.n	80023dc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40012c00 	.word	0x40012c00

080023ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	6839      	ldr	r1, [r7, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fc3e 	bl	8002c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_TIM_PWM_Stop+0x94>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d117      	bne.n	800243e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	f241 1311 	movw	r3, #4369	; 0x1111
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10f      	bne.n	800243e <HAL_TIM_PWM_Stop+0x52>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	f240 4344 	movw	r3, #1092	; 0x444
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <HAL_TIM_PWM_Stop+0x52>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a1a      	ldr	r2, [r3, #32]
 8002444:	f241 1311 	movw	r3, #4369	; 0x1111
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10f      	bne.n	800246e <HAL_TIM_PWM_Stop+0x82>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a1a      	ldr	r2, [r3, #32]
 8002454:	f240 4344 	movw	r3, #1092	; 0x444
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <HAL_TIM_PWM_Stop+0x82>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40012c00 	.word	0x40012c00

08002484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800249a:	2302      	movs	r3, #2
 800249c:	e0b4      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x184>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	f200 809f 	bhi.w	80025f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	080025f5 	.word	0x080025f5
 80024c4:	080025f5 	.word	0x080025f5
 80024c8:	080025f5 	.word	0x080025f5
 80024cc:	08002531 	.word	0x08002531
 80024d0:	080025f5 	.word	0x080025f5
 80024d4:	080025f5 	.word	0x080025f5
 80024d8:	080025f5 	.word	0x080025f5
 80024dc:	08002573 	.word	0x08002573
 80024e0:	080025f5 	.word	0x080025f5
 80024e4:	080025f5 	.word	0x080025f5
 80024e8:	080025f5 	.word	0x080025f5
 80024ec:	080025b3 	.word	0x080025b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f9a4 	bl	8002844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0208 	orr.w	r2, r2, #8
 800250a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6999      	ldr	r1, [r3, #24]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	619a      	str	r2, [r3, #24]
      break;
 800252e:	e062      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f9ea 	bl	8002910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	619a      	str	r2, [r3, #24]
      break;
 8002570:	e041      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fa33 	bl	80029e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0208 	orr.w	r2, r2, #8
 800258c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0204 	bic.w	r2, r2, #4
 800259c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	61da      	str	r2, [r3, #28]
      break;
 80025b0:	e021      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fa7d 	bl	8002ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69d9      	ldr	r1, [r3, #28]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	021a      	lsls	r2, r3, #8
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	61da      	str	r2, [r3, #28]
      break;
 80025f2:	e000      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80025f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_TIM_ConfigClockSource+0x18>
 8002624:	2302      	movs	r3, #2
 8002626:	e0a6      	b.n	8002776 <HAL_TIM_ConfigClockSource+0x166>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800264e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b40      	cmp	r3, #64	; 0x40
 800265e:	d067      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x120>
 8002660:	2b40      	cmp	r3, #64	; 0x40
 8002662:	d80b      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x6c>
 8002664:	2b10      	cmp	r3, #16
 8002666:	d073      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0x140>
 8002668:	2b10      	cmp	r3, #16
 800266a:	d802      	bhi.n	8002672 <HAL_TIM_ConfigClockSource+0x62>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d06f      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002670:	e078      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002672:	2b20      	cmp	r3, #32
 8002674:	d06c      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0x140>
 8002676:	2b30      	cmp	r3, #48	; 0x30
 8002678:	d06a      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800267a:	e073      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800267c:	2b70      	cmp	r3, #112	; 0x70
 800267e:	d00d      	beq.n	800269c <HAL_TIM_ConfigClockSource+0x8c>
 8002680:	2b70      	cmp	r3, #112	; 0x70
 8002682:	d804      	bhi.n	800268e <HAL_TIM_ConfigClockSource+0x7e>
 8002684:	2b50      	cmp	r3, #80	; 0x50
 8002686:	d033      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0xe0>
 8002688:	2b60      	cmp	r3, #96	; 0x60
 800268a:	d041      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800268c:	e06a      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	d066      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x152>
 8002694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002698:	d017      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800269a:	e063      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6899      	ldr	r1, [r3, #8]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f000 fac9 	bl	8002c42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	609a      	str	r2, [r3, #8]
      break;
 80026c8:	e04c      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f000 fab2 	bl	8002c42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ec:	609a      	str	r2, [r3, #8]
      break;
 80026ee:	e039      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f000 fa29 	bl	8002b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2150      	movs	r1, #80	; 0x50
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fa80 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 800270e:	e029      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	461a      	mov	r2, r3
 800271e:	f000 fa47 	bl	8002bb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2160      	movs	r1, #96	; 0x60
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fa70 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 800272e:	e019      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	461a      	mov	r2, r3
 800273e:	f000 fa09 	bl	8002b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2140      	movs	r1, #64	; 0x40
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fa60 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 800274e:	e009      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f000 fa57 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 8002760:	e000      	b.n	8002764 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a29      	ldr	r2, [pc, #164]	; (8002838 <TIM_Base_SetConfig+0xb8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00b      	beq.n	80027b0 <TIM_Base_SetConfig+0x30>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d007      	beq.n	80027b0 <TIM_Base_SetConfig+0x30>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a26      	ldr	r2, [pc, #152]	; (800283c <TIM_Base_SetConfig+0xbc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d003      	beq.n	80027b0 <TIM_Base_SetConfig+0x30>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a25      	ldr	r2, [pc, #148]	; (8002840 <TIM_Base_SetConfig+0xc0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d108      	bne.n	80027c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1c      	ldr	r2, [pc, #112]	; (8002838 <TIM_Base_SetConfig+0xb8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00b      	beq.n	80027e2 <TIM_Base_SetConfig+0x62>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d0:	d007      	beq.n	80027e2 <TIM_Base_SetConfig+0x62>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a19      	ldr	r2, [pc, #100]	; (800283c <TIM_Base_SetConfig+0xbc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d003      	beq.n	80027e2 <TIM_Base_SetConfig+0x62>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a18      	ldr	r2, [pc, #96]	; (8002840 <TIM_Base_SetConfig+0xc0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d108      	bne.n	80027f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <TIM_Base_SetConfig+0xb8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d103      	bne.n	8002828 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	615a      	str	r2, [r3, #20]
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40000400 	.word	0x40000400
 8002840:	40000800 	.word	0x40000800

08002844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f023 0201 	bic.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 0302 	bic.w	r3, r3, #2
 800288c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <TIM_OC1_SetConfig+0xc8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10c      	bne.n	80028ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 0308 	bic.w	r3, r3, #8
 80028a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <TIM_OC1_SetConfig+0xc8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d111      	bne.n	80028e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	621a      	str	r2, [r3, #32]
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00

08002910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f023 0210 	bic.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0320 	bic.w	r3, r3, #32
 800295a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <TIM_OC2_SetConfig+0xd0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d10d      	bne.n	800298c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800298a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <TIM_OC2_SetConfig+0xd0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d113      	bne.n	80029bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800299a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	621a      	str	r2, [r3, #32]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40012c00 	.word	0x40012c00

080029e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <TIM_OC3_SetConfig+0xd0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <TIM_OC3_SetConfig+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d113      	bne.n	8002a8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00

08002ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	031b      	lsls	r3, r3, #12
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0f      	ldr	r2, [pc, #60]	; (8002b50 <TIM_OC4_SetConfig+0x98>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d109      	bne.n	8002b2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	621a      	str	r2, [r3, #32]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40012c00 	.word	0x40012c00

08002b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f023 0201 	bic.w	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f023 030a 	bic.w	r3, r3, #10
 8002b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f023 0210 	bic.w	r2, r3, #16
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	031b      	lsls	r3, r3, #12
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	621a      	str	r2, [r3, #32]
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f043 0307 	orr.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b087      	sub	sp, #28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	021a      	lsls	r2, r3, #8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	609a      	str	r2, [r3, #8]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	2201      	movs	r2, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1a      	ldr	r2, [r3, #32]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e032      	b.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d18:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e03d      	b.n	8002de8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002df2:	b084      	sub	sp, #16
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	f107 0014 	add.w	r0, r7, #20
 8002e00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	b004      	add	sp, #16
 8002e10:	4770      	bx	lr

08002e12 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e1a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002e1e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	89fb      	ldrh	r3, [r7, #14]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e48:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002e4c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	b21b      	sxth	r3, r3
 8002e60:	4013      	ands	r3, r2
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e90:	b084      	sub	sp, #16
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	f107 0014 	add.w	r0, r7, #20
 8002e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa5 	bl	8002e12 <USB_EnableGlobalInt>

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ed4:	b004      	add	sp, #16
 8002ed6:	4770      	bx	lr

08002ed8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ed8:	b490      	push	{r4, r7}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efc:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	78db      	ldrb	r3, [r3, #3]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d819      	bhi.n	8002f3a <USB_ActivateEndpoint+0x62>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <USB_ActivateEndpoint+0x34>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f31 	.word	0x08002f31
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f27 	.word	0x08002f27
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002f1c:	89bb      	ldrh	r3, [r7, #12]
 8002f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f22:	81bb      	strh	r3, [r7, #12]
      break;
 8002f24:	e00d      	b.n	8002f42 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002f26:	89bb      	ldrh	r3, [r7, #12]
 8002f28:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002f2c:	81bb      	strh	r3, [r7, #12]
      break;
 8002f2e:	e008      	b.n	8002f42 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002f30:	89bb      	ldrh	r3, [r7, #12]
 8002f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f36:	81bb      	strh	r3, [r7, #12]
      break;
 8002f38:	e003      	b.n	8002f42 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3e:	e000      	b.n	8002f42 <USB_ActivateEndpoint+0x6a>
      break;
 8002f40:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	89bb      	ldrh	r3, [r7, #12]
 8002f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4313      	orrs	r3, r2
 8002f82:	b29c      	uxth	r4, r3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	4b8a      	ldr	r3, [pc, #552]	; (80031b8 <USB_ActivateEndpoint+0x2e0>)
 8002f90:	4323      	orrs	r3, r4
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	7b1b      	ldrb	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 8112 	bne.w	80031c4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d067      	beq.n	8003078 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002fa8:	687c      	ldr	r4, [r7, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	441c      	add	r4, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	4423      	add	r3, r4
 8002fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fc0:	461c      	mov	r4, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	88db      	ldrh	r3, [r3, #6]
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29c      	uxth	r4, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d014      	beq.n	8003012 <USB_ActivateEndpoint+0x13a>
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	b29c      	uxth	r4, r3
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	4b6c      	ldr	r3, [pc, #432]	; (80031bc <USB_ActivateEndpoint+0x2e4>)
 800300c:	4323      	orrs	r3, r4
 800300e:	b29b      	uxth	r3, r3
 8003010:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	78db      	ldrb	r3, [r3, #3]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d018      	beq.n	800304c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003030:	b29c      	uxth	r4, r3
 8003032:	f084 0320 	eor.w	r3, r4, #32
 8003036:	b29c      	uxth	r4, r3
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	441a      	add	r2, r3
 8003042:	4b5d      	ldr	r3, [pc, #372]	; (80031b8 <USB_ActivateEndpoint+0x2e0>)
 8003044:	4323      	orrs	r3, r4
 8003046:	b29b      	uxth	r3, r3
 8003048:	8013      	strh	r3, [r2, #0]
 800304a:	e22b      	b.n	80034a4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003062:	b29c      	uxth	r4, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	441a      	add	r2, r3
 800306e:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <USB_ActivateEndpoint+0x2e0>)
 8003070:	4323      	orrs	r3, r4
 8003072:	b29b      	uxth	r3, r3
 8003074:	8013      	strh	r3, [r2, #0]
 8003076:	e215      	b.n	80034a4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003078:	687c      	ldr	r4, [r7, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003080:	b29b      	uxth	r3, r3
 8003082:	441c      	add	r4, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	4423      	add	r3, r4
 800308c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003090:	461c      	mov	r4, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	88db      	ldrh	r3, [r3, #6]
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	b29b      	uxth	r3, r3
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	b29b      	uxth	r3, r3
 800309e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80030a0:	687c      	ldr	r4, [r7, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	441c      	add	r4, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	4423      	add	r3, r4
 80030b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030b8:	461c      	mov	r4, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10e      	bne.n	80030e0 <USB_ActivateEndpoint+0x208>
 80030c2:	8823      	ldrh	r3, [r4, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	8023      	strh	r3, [r4, #0]
 80030ce:	8823      	ldrh	r3, [r4, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030da:	b29b      	uxth	r3, r3
 80030dc:	8023      	strh	r3, [r4, #0]
 80030de:	e02d      	b.n	800313c <USB_ActivateEndpoint+0x264>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b3e      	cmp	r3, #62	; 0x3e
 80030e6:	d812      	bhi.n	800310e <USB_ActivateEndpoint+0x236>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <USB_ActivateEndpoint+0x22a>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	b29b      	uxth	r3, r3
 8003106:	029b      	lsls	r3, r3, #10
 8003108:	b29b      	uxth	r3, r3
 800310a:	8023      	strh	r3, [r4, #0]
 800310c:	e016      	b.n	800313c <USB_ActivateEndpoint+0x264>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <USB_ActivateEndpoint+0x250>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	3b01      	subs	r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	b29b      	uxth	r3, r3
 800312c:	029b      	lsls	r3, r3, #10
 800312e:	b29b      	uxth	r3, r3
 8003130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003138:	b29b      	uxth	r3, r3
 800313a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29c      	uxth	r4, r3
 800314a:	4623      	mov	r3, r4
 800314c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d014      	beq.n	800317e <USB_ActivateEndpoint+0x2a6>
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	b29c      	uxth	r4, r3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <USB_ActivateEndpoint+0x2e8>)
 8003178:	4323      	orrs	r3, r4
 800317a:	b29b      	uxth	r3, r3
 800317c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003194:	b29c      	uxth	r4, r3
 8003196:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800319a:	b29c      	uxth	r4, r3
 800319c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031a0:	b29c      	uxth	r4, r3
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	4b02      	ldr	r3, [pc, #8]	; (80031b8 <USB_ActivateEndpoint+0x2e0>)
 80031ae:	4323      	orrs	r3, r4
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8013      	strh	r3, [r2, #0]
 80031b4:	e176      	b.n	80034a4 <USB_ActivateEndpoint+0x5cc>
 80031b6:	bf00      	nop
 80031b8:	ffff8080 	.word	0xffff8080
 80031bc:	ffff80c0 	.word	0xffff80c0
 80031c0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	b29c      	uxth	r4, r3
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	441a      	add	r2, r3
 80031e6:	4b96      	ldr	r3, [pc, #600]	; (8003440 <USB_ActivateEndpoint+0x568>)
 80031e8:	4323      	orrs	r3, r4
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80031ee:	687c      	ldr	r4, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	441c      	add	r4, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	4423      	add	r3, r4
 8003202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003206:	461c      	mov	r4, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	891b      	ldrh	r3, [r3, #8]
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	b29b      	uxth	r3, r3
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	b29b      	uxth	r3, r3
 8003214:	8023      	strh	r3, [r4, #0]
 8003216:	687c      	ldr	r4, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	441c      	add	r4, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4423      	add	r3, r4
 800322a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800322e:	461c      	mov	r4, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	895b      	ldrh	r3, [r3, #10]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	b29b      	uxth	r3, r3
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 8088 	bne.w	8003358 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29c      	uxth	r4, r3
 8003256:	4623      	mov	r3, r4
 8003258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d014      	beq.n	800328a <USB_ActivateEndpoint+0x3b2>
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	b29c      	uxth	r4, r3
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	4b70      	ldr	r3, [pc, #448]	; (8003444 <USB_ActivateEndpoint+0x56c>)
 8003284:	4323      	orrs	r3, r4
 8003286:	b29b      	uxth	r3, r3
 8003288:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	b29c      	uxth	r4, r3
 8003298:	4623      	mov	r3, r4
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d014      	beq.n	80032cc <USB_ActivateEndpoint+0x3f4>
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b8:	b29c      	uxth	r4, r3
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	4b60      	ldr	r3, [pc, #384]	; (8003448 <USB_ActivateEndpoint+0x570>)
 80032c6:	4323      	orrs	r3, r4
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	b29c      	uxth	r4, r3
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	4b56      	ldr	r3, [pc, #344]	; (8003448 <USB_ActivateEndpoint+0x570>)
 80032f0:	4323      	orrs	r3, r4
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330c:	b29c      	uxth	r4, r3
 800330e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003312:	b29c      	uxth	r4, r3
 8003314:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003318:	b29c      	uxth	r4, r3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	441a      	add	r2, r3
 8003324:	4b49      	ldr	r3, [pc, #292]	; (800344c <USB_ActivateEndpoint+0x574>)
 8003326:	4323      	orrs	r3, r4
 8003328:	b29b      	uxth	r3, r3
 800332a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003342:	b29c      	uxth	r4, r3
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	4b3f      	ldr	r3, [pc, #252]	; (800344c <USB_ActivateEndpoint+0x574>)
 8003350:	4323      	orrs	r3, r4
 8003352:	b29b      	uxth	r3, r3
 8003354:	8013      	strh	r3, [r2, #0]
 8003356:	e0a5      	b.n	80034a4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29c      	uxth	r4, r3
 8003366:	4623      	mov	r3, r4
 8003368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d014      	beq.n	800339a <USB_ActivateEndpoint+0x4c2>
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	b29c      	uxth	r4, r3
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	441a      	add	r2, r3
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <USB_ActivateEndpoint+0x56c>)
 8003394:	4323      	orrs	r3, r4
 8003396:	b29b      	uxth	r3, r3
 8003398:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b29c      	uxth	r4, r3
 80033a8:	4623      	mov	r3, r4
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d014      	beq.n	80033dc <USB_ActivateEndpoint+0x504>
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c8:	b29c      	uxth	r4, r3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	441a      	add	r2, r3
 80033d4:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <USB_ActivateEndpoint+0x570>)
 80033d6:	4323      	orrs	r3, r4
 80033d8:	b29b      	uxth	r3, r3
 80033da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	b29c      	uxth	r4, r3
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	441a      	add	r2, r3
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <USB_ActivateEndpoint+0x56c>)
 8003400:	4323      	orrs	r3, r4
 8003402:	b29b      	uxth	r3, r3
 8003404:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	78db      	ldrb	r3, [r3, #3]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d020      	beq.n	8003450 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003424:	b29c      	uxth	r4, r3
 8003426:	f084 0320 	eor.w	r3, r4, #32
 800342a:	b29c      	uxth	r4, r3
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <USB_ActivateEndpoint+0x574>)
 8003438:	4323      	orrs	r3, r4
 800343a:	b29b      	uxth	r3, r3
 800343c:	8013      	strh	r3, [r2, #0]
 800343e:	e01c      	b.n	800347a <USB_ActivateEndpoint+0x5a2>
 8003440:	ffff8180 	.word	0xffff8180
 8003444:	ffffc080 	.word	0xffffc080
 8003448:	ffff80c0 	.word	0xffff80c0
 800344c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003466:	b29c      	uxth	r4, r3
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <USB_ActivateEndpoint+0x5d8>)
 8003474:	4323      	orrs	r3, r4
 8003476:	b29b      	uxth	r3, r3
 8003478:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	b29c      	uxth	r4, r3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <USB_ActivateEndpoint+0x5d8>)
 800349e:	4323      	orrs	r3, r4
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc90      	pop	{r4, r7}
 80034ae:	4770      	bx	lr
 80034b0:	ffff8080 	.word	0xffff8080

080034b4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034b4:	b490      	push	{r4, r7}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	7b1b      	ldrb	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d171      	bne.n	80035aa <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	785b      	ldrb	r3, [r3, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d036      	beq.n	800353c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29c      	uxth	r4, r3
 80034dc:	4623      	mov	r3, r4
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d014      	beq.n	8003510 <USB_DeactivateEndpoint+0x5c>
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fc:	b29c      	uxth	r4, r3
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	441a      	add	r2, r3
 8003508:	4b6b      	ldr	r3, [pc, #428]	; (80036b8 <USB_DeactivateEndpoint+0x204>)
 800350a:	4323      	orrs	r3, r4
 800350c:	b29b      	uxth	r3, r3
 800350e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003526:	b29c      	uxth	r4, r3
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	4b62      	ldr	r3, [pc, #392]	; (80036bc <USB_DeactivateEndpoint+0x208>)
 8003534:	4323      	orrs	r3, r4
 8003536:	b29b      	uxth	r3, r3
 8003538:	8013      	strh	r3, [r2, #0]
 800353a:	e144      	b.n	80037c6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29c      	uxth	r4, r3
 800354a:	4623      	mov	r3, r4
 800354c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d014      	beq.n	800357e <USB_DeactivateEndpoint+0xca>
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	b29c      	uxth	r4, r3
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	4b52      	ldr	r3, [pc, #328]	; (80036c0 <USB_DeactivateEndpoint+0x20c>)
 8003578:	4323      	orrs	r3, r4
 800357a:	b29b      	uxth	r3, r3
 800357c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003594:	b29c      	uxth	r4, r3
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	441a      	add	r2, r3
 80035a0:	4b46      	ldr	r3, [pc, #280]	; (80036bc <USB_DeactivateEndpoint+0x208>)
 80035a2:	4323      	orrs	r3, r4
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	8013      	strh	r3, [r2, #0]
 80035a8:	e10d      	b.n	80037c6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 8088 	bne.w	80036c4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29c      	uxth	r4, r3
 80035c2:	4623      	mov	r3, r4
 80035c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d014      	beq.n	80035f6 <USB_DeactivateEndpoint+0x142>
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	b29c      	uxth	r4, r3
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <USB_DeactivateEndpoint+0x20c>)
 80035f0:	4323      	orrs	r3, r4
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29c      	uxth	r4, r3
 8003604:	4623      	mov	r3, r4
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d014      	beq.n	8003638 <USB_DeactivateEndpoint+0x184>
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003624:	b29c      	uxth	r4, r3
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	441a      	add	r2, r3
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <USB_DeactivateEndpoint+0x204>)
 8003632:	4323      	orrs	r3, r4
 8003634:	b29b      	uxth	r3, r3
 8003636:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	b29c      	uxth	r4, r3
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	441a      	add	r2, r3
 800365a:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <USB_DeactivateEndpoint+0x204>)
 800365c:	4323      	orrs	r3, r4
 800365e:	b29b      	uxth	r3, r3
 8003660:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003678:	b29c      	uxth	r4, r3
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	441a      	add	r2, r3
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <USB_DeactivateEndpoint+0x208>)
 8003686:	4323      	orrs	r3, r4
 8003688:	b29b      	uxth	r3, r3
 800368a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a2:	b29c      	uxth	r4, r3
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	4b03      	ldr	r3, [pc, #12]	; (80036bc <USB_DeactivateEndpoint+0x208>)
 80036b0:	4323      	orrs	r3, r4
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	8013      	strh	r3, [r2, #0]
 80036b6:	e086      	b.n	80037c6 <USB_DeactivateEndpoint+0x312>
 80036b8:	ffff80c0 	.word	0xffff80c0
 80036bc:	ffff8080 	.word	0xffff8080
 80036c0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	b29c      	uxth	r4, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d014      	beq.n	8003706 <USB_DeactivateEndpoint+0x252>
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f2:	b29c      	uxth	r4, r3
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <USB_DeactivateEndpoint+0x320>)
 8003700:	4323      	orrs	r3, r4
 8003702:	b29b      	uxth	r3, r3
 8003704:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29c      	uxth	r4, r3
 8003714:	4623      	mov	r3, r4
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d014      	beq.n	8003748 <USB_DeactivateEndpoint+0x294>
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003734:	b29c      	uxth	r4, r3
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	441a      	add	r2, r3
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <USB_DeactivateEndpoint+0x324>)
 8003742:	4323      	orrs	r3, r4
 8003744:	b29b      	uxth	r3, r3
 8003746:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	b29c      	uxth	r4, r3
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <USB_DeactivateEndpoint+0x320>)
 800376c:	4323      	orrs	r3, r4
 800376e:	b29b      	uxth	r3, r3
 8003770:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003788:	b29c      	uxth	r4, r3
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <USB_DeactivateEndpoint+0x328>)
 8003796:	4323      	orrs	r3, r4
 8003798:	b29b      	uxth	r3, r3
 800379a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	b29c      	uxth	r4, r3
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	441a      	add	r2, r3
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <USB_DeactivateEndpoint+0x328>)
 80037c0:	4323      	orrs	r3, r4
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc90      	pop	{r4, r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	ffffc080 	.word	0xffffc080
 80037d8:	ffff80c0 	.word	0xffff80c0
 80037dc:	ffff8080 	.word	0xffff8080

080037e0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b08d      	sub	sp, #52	; 0x34
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	f040 8160 	bne.w	8003ab4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d909      	bls.n	8003814 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	1ad2      	subs	r2, r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	619a      	str	r2, [r3, #24]
 8003812:	e005      	b.n	8003820 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	7b1b      	ldrb	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d119      	bne.n	800385c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6959      	ldr	r1, [r3, #20]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	88da      	ldrh	r2, [r3, #6]
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	b29b      	uxth	r3, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fba2 	bl	8003f7e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800383a:	687c      	ldr	r4, [r7, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003842:	b29b      	uxth	r3, r3
 8003844:	441c      	add	r4, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	4423      	add	r3, r4
 800384e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003852:	461c      	mov	r4, r3
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	b29b      	uxth	r3, r3
 8003858:	8023      	strh	r3, [r4, #0]
 800385a:	e10f      	b.n	8003a7c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d065      	beq.n	800393e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003872:	687c      	ldr	r4, [r7, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d148      	bne.n	800390e <USB_EPStartXfer+0x12e>
 800387c:	687c      	ldr	r4, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003884:	b29b      	uxth	r3, r3
 8003886:	441c      	add	r4, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	4423      	add	r3, r4
 8003890:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003894:	461c      	mov	r4, r3
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10e      	bne.n	80038ba <USB_EPStartXfer+0xda>
 800389c:	8823      	ldrh	r3, [r4, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	8023      	strh	r3, [r4, #0]
 80038a8:	8823      	ldrh	r3, [r4, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	8023      	strh	r3, [r4, #0]
 80038b8:	e03d      	b.n	8003936 <USB_EPStartXfer+0x156>
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	2b3e      	cmp	r3, #62	; 0x3e
 80038be:	d810      	bhi.n	80038e2 <USB_EPStartXfer+0x102>
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <USB_EPStartXfer+0xf6>
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	3301      	adds	r3, #1
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	b29b      	uxth	r3, r3
 80038da:	029b      	lsls	r3, r3, #10
 80038dc:	b29b      	uxth	r3, r3
 80038de:	8023      	strh	r3, [r4, #0]
 80038e0:	e029      	b.n	8003936 <USB_EPStartXfer+0x156>
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <USB_EPStartXfer+0x118>
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	3b01      	subs	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	029b      	lsls	r3, r3, #10
 80038fe:	b29b      	uxth	r3, r3
 8003900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003908:	b29b      	uxth	r3, r3
 800390a:	8023      	strh	r3, [r4, #0]
 800390c:	e013      	b.n	8003936 <USB_EPStartXfer+0x156>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	785b      	ldrb	r3, [r3, #1]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10f      	bne.n	8003936 <USB_EPStartXfer+0x156>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800391c:	b29b      	uxth	r3, r3
 800391e:	441c      	add	r4, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	4423      	add	r3, r4
 8003928:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	895b      	ldrh	r3, [r3, #10]
 800393a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800393c:	e063      	b.n	8003a06 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	785b      	ldrb	r3, [r3, #1]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d148      	bne.n	80039d8 <USB_EPStartXfer+0x1f8>
 8003946:	687c      	ldr	r4, [r7, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	441c      	add	r4, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	4423      	add	r3, r4
 800395a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800395e:	461c      	mov	r4, r3
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10e      	bne.n	8003984 <USB_EPStartXfer+0x1a4>
 8003966:	8823      	ldrh	r3, [r4, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800396e:	b29b      	uxth	r3, r3
 8003970:	8023      	strh	r3, [r4, #0]
 8003972:	8823      	ldrh	r3, [r4, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800397a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397e:	b29b      	uxth	r3, r3
 8003980:	8023      	strh	r3, [r4, #0]
 8003982:	e03d      	b.n	8003a00 <USB_EPStartXfer+0x220>
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2b3e      	cmp	r3, #62	; 0x3e
 8003988:	d810      	bhi.n	80039ac <USB_EPStartXfer+0x1cc>
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <USB_EPStartXfer+0x1c0>
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	3301      	adds	r3, #1
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	029b      	lsls	r3, r3, #10
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	8023      	strh	r3, [r4, #0]
 80039aa:	e029      	b.n	8003a00 <USB_EPStartXfer+0x220>
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	623b      	str	r3, [r7, #32]
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <USB_EPStartXfer+0x1e2>
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	3b01      	subs	r3, #1
 80039c0:	623b      	str	r3, [r7, #32]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	029b      	lsls	r3, r3, #10
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	8023      	strh	r3, [r4, #0]
 80039d6:	e013      	b.n	8003a00 <USB_EPStartXfer+0x220>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10f      	bne.n	8003a00 <USB_EPStartXfer+0x220>
 80039e0:	687c      	ldr	r4, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	441c      	add	r4, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	4423      	add	r3, r4
 80039f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039f8:	461c      	mov	r4, r3
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	891b      	ldrh	r3, [r3, #8]
 8003a04:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6959      	ldr	r1, [r3, #20]
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fab4 	bl	8003f7e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d115      	bne.n	8003a4a <USB_EPStartXfer+0x26a>
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a34:	b29c      	uxth	r4, r3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	441a      	add	r2, r3
 8003a40:	4b9a      	ldr	r3, [pc, #616]	; (8003cac <USB_EPStartXfer+0x4cc>)
 8003a42:	4323      	orrs	r3, r4
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	8013      	strh	r3, [r2, #0]
 8003a48:	e018      	b.n	8003a7c <USB_EPStartXfer+0x29c>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d114      	bne.n	8003a7c <USB_EPStartXfer+0x29c>
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a68:	b29c      	uxth	r4, r3
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	4b8e      	ldr	r3, [pc, #568]	; (8003cb0 <USB_EPStartXfer+0x4d0>)
 8003a76:	4323      	orrs	r3, r4
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a92:	b29c      	uxth	r4, r3
 8003a94:	f084 0310 	eor.w	r3, r4, #16
 8003a98:	b29c      	uxth	r4, r3
 8003a9a:	f084 0320 	eor.w	r3, r4, #32
 8003a9e:	b29c      	uxth	r4, r3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	4b82      	ldr	r3, [pc, #520]	; (8003cb4 <USB_EPStartXfer+0x4d4>)
 8003aac:	4323      	orrs	r3, r4
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	8013      	strh	r3, [r2, #0]
 8003ab2:	e146      	b.n	8003d42 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d909      	bls.n	8003ad4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	1ad2      	subs	r2, r2, r3
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	619a      	str	r2, [r3, #24]
 8003ad2:	e005      	b.n	8003ae0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	7b1b      	ldrb	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d148      	bne.n	8003b7a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003ae8:	687c      	ldr	r4, [r7, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	441c      	add	r4, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	4423      	add	r3, r4
 8003afc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b00:	461c      	mov	r4, r3
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10e      	bne.n	8003b26 <USB_EPStartXfer+0x346>
 8003b08:	8823      	ldrh	r3, [r4, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	8023      	strh	r3, [r4, #0]
 8003b14:	8823      	ldrh	r3, [r4, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8023      	strh	r3, [r4, #0]
 8003b24:	e0f2      	b.n	8003d0c <USB_EPStartXfer+0x52c>
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	2b3e      	cmp	r3, #62	; 0x3e
 8003b2a:	d810      	bhi.n	8003b4e <USB_EPStartXfer+0x36e>
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <USB_EPStartXfer+0x362>
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	029b      	lsls	r3, r3, #10
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	8023      	strh	r3, [r4, #0]
 8003b4c:	e0de      	b.n	8003d0c <USB_EPStartXfer+0x52c>
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <USB_EPStartXfer+0x384>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	029b      	lsls	r3, r3, #10
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	8023      	strh	r3, [r4, #0]
 8003b78:	e0c8      	b.n	8003d0c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	785b      	ldrb	r3, [r3, #1]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d148      	bne.n	8003c14 <USB_EPStartXfer+0x434>
 8003b82:	687c      	ldr	r4, [r7, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	441c      	add	r4, r3
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	4423      	add	r3, r4
 8003b96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b9a:	461c      	mov	r4, r3
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10e      	bne.n	8003bc0 <USB_EPStartXfer+0x3e0>
 8003ba2:	8823      	ldrh	r3, [r4, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	8023      	strh	r3, [r4, #0]
 8003bae:	8823      	ldrh	r3, [r4, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	8023      	strh	r3, [r4, #0]
 8003bbe:	e03d      	b.n	8003c3c <USB_EPStartXfer+0x45c>
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8003bc4:	d810      	bhi.n	8003be8 <USB_EPStartXfer+0x408>
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <USB_EPStartXfer+0x3fc>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	029b      	lsls	r3, r3, #10
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	8023      	strh	r3, [r4, #0]
 8003be6:	e029      	b.n	8003c3c <USB_EPStartXfer+0x45c>
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <USB_EPStartXfer+0x41e>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	8023      	strh	r3, [r4, #0]
 8003c12:	e013      	b.n	8003c3c <USB_EPStartXfer+0x45c>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	785b      	ldrb	r3, [r3, #1]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10f      	bne.n	8003c3c <USB_EPStartXfer+0x45c>
 8003c1c:	687c      	ldr	r4, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	441c      	add	r4, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	4423      	add	r3, r4
 8003c30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c34:	461c      	mov	r4, r3
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	8023      	strh	r3, [r4, #0]
 8003c3c:	687c      	ldr	r4, [r7, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d14e      	bne.n	8003ce4 <USB_EPStartXfer+0x504>
 8003c46:	687c      	ldr	r4, [r7, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	441c      	add	r4, r3
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4423      	add	r3, r4
 8003c5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c5e:	461c      	mov	r4, r3
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10e      	bne.n	8003c84 <USB_EPStartXfer+0x4a4>
 8003c66:	8823      	ldrh	r3, [r4, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	8023      	strh	r3, [r4, #0]
 8003c72:	8823      	ldrh	r3, [r4, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	8023      	strh	r3, [r4, #0]
 8003c82:	e043      	b.n	8003d0c <USB_EPStartXfer+0x52c>
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	2b3e      	cmp	r3, #62	; 0x3e
 8003c88:	d816      	bhi.n	8003cb8 <USB_EPStartXfer+0x4d8>
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <USB_EPStartXfer+0x4c0>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	029b      	lsls	r3, r3, #10
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8023      	strh	r3, [r4, #0]
 8003caa:	e02f      	b.n	8003d0c <USB_EPStartXfer+0x52c>
 8003cac:	ffff80c0 	.word	0xffff80c0
 8003cb0:	ffffc080 	.word	0xffffc080
 8003cb4:	ffff8080 	.word	0xffff8080
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <USB_EPStartXfer+0x4ee>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	029b      	lsls	r3, r3, #10
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8023      	strh	r3, [r4, #0]
 8003ce2:	e013      	b.n	8003d0c <USB_EPStartXfer+0x52c>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	785b      	ldrb	r3, [r3, #1]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10f      	bne.n	8003d0c <USB_EPStartXfer+0x52c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	441c      	add	r4, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	4423      	add	r3, r4
 8003cfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	b29c      	uxth	r4, r3
 8003d24:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d28:	b29c      	uxth	r4, r3
 8003d2a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d2e:	b29c      	uxth	r4, r3
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	441a      	add	r2, r3
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <USB_EPStartXfer+0x56c>)
 8003d3c:	4323      	orrs	r3, r4
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3734      	adds	r7, #52	; 0x34
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	ffff8080 	.word	0xffff8080

08003d50 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d50:	b490      	push	{r4, r7}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	785b      	ldrb	r3, [r3, #1]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d018      	beq.n	8003d94 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d78:	b29c      	uxth	r4, r3
 8003d7a:	f084 0310 	eor.w	r3, r4, #16
 8003d7e:	b29c      	uxth	r4, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <USB_EPSetStall+0x80>)
 8003d8c:	4323      	orrs	r3, r4
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	8013      	strh	r3, [r2, #0]
 8003d92:	e017      	b.n	8003dc4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	b29c      	uxth	r4, r3
 8003dac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003db0:	b29c      	uxth	r4, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	441a      	add	r2, r3
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <USB_EPSetStall+0x80>)
 8003dbe:	4323      	orrs	r3, r4
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc90      	pop	{r4, r7}
 8003dce:	4770      	bx	lr
 8003dd0:	ffff8080 	.word	0xffff8080

08003dd4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003dd4:	b490      	push	{r4, r7}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	7b1b      	ldrb	r3, [r3, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d17d      	bne.n	8003ee2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03d      	beq.n	8003e6a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29c      	uxth	r4, r3
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d014      	beq.n	8003e30 <USB_EPClearStall+0x5c>
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1c:	b29c      	uxth	r4, r3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	441a      	add	r2, r3
 8003e28:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <USB_EPClearStall+0x11c>)
 8003e2a:	4323      	orrs	r3, r4
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	78db      	ldrb	r3, [r3, #3]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d054      	beq.n	8003ee2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4e:	b29c      	uxth	r4, r3
 8003e50:	f084 0320 	eor.w	r3, r4, #32
 8003e54:	b29c      	uxth	r4, r3
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	441a      	add	r2, r3
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <USB_EPClearStall+0x120>)
 8003e62:	4323      	orrs	r3, r4
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	8013      	strh	r3, [r2, #0]
 8003e68:	e03b      	b.n	8003ee2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29c      	uxth	r4, r3
 8003e78:	4623      	mov	r3, r4
 8003e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d014      	beq.n	8003eac <USB_EPClearStall+0xd8>
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e98:	b29c      	uxth	r4, r3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	441a      	add	r2, r3
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <USB_EPClearStall+0x124>)
 8003ea6:	4323      	orrs	r3, r4
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	b29c      	uxth	r4, r3
 8003ec4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003ec8:	b29c      	uxth	r4, r3
 8003eca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003ece:	b29c      	uxth	r4, r3
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <USB_EPClearStall+0x120>)
 8003edc:	4323      	orrs	r3, r4
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc90      	pop	{r4, r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	ffff80c0 	.word	0xffff80c0
 8003ef4:	ffff8080 	.word	0xffff8080
 8003ef8:	ffffc080 	.word	0xffffc080

08003efc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b08d      	sub	sp, #52	; 0x34
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	4611      	mov	r1, r2
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	80fb      	strh	r3, [r7, #6]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003f94:	88bb      	ldrh	r3, [r7, #4]
 8003f96:	3301      	adds	r3, #1
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	005a      	lsls	r2, r3, #1
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb6:	e01e      	b.n	8003ff6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	3301      	adds	r3, #1
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1dd      	bne.n	8003fb8 <USB_WritePMA+0x3a>
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3734      	adds	r7, #52	; 0x34
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004006:	b480      	push	{r7}
 8004008:	b08b      	sub	sp, #44	; 0x2c
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	4611      	mov	r1, r2
 8004012:	461a      	mov	r2, r3
 8004014:	460b      	mov	r3, r1
 8004016:	80fb      	strh	r3, [r7, #6]
 8004018:	4613      	mov	r3, r2
 800401a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800401c:	88bb      	ldrh	r3, [r7, #4]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	b29b      	uxth	r3, r3
 8004022:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	005a      	lsls	r2, r3, #1
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004038:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
 800403e:	e01b      	b.n	8004078 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	3302      	adds	r3, #2
 800404c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3301      	adds	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	b2da      	uxtb	r2, r3
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3301      	adds	r3, #1
 800406a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	3302      	adds	r3, #2
 8004070:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	3b01      	subs	r3, #1
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e0      	bne.n	8004040 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800407e:	88bb      	ldrh	r3, [r7, #4]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	701a      	strb	r2, [r3, #0]
  }
}
 800409a:	bf00      	nop
 800409c:	372c      	adds	r7, #44	; 0x2c
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80040b4:	2302      	movs	r3, #2
 80040b6:	2203      	movs	r2, #3
 80040b8:	2181      	movs	r1, #129	; 0x81
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f002 fbc7 	bl	800684e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80040c6:	2302      	movs	r3, #2
 80040c8:	2203      	movs	r2, #3
 80040ca:	2101      	movs	r1, #1
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f002 fbbe 	bl	800684e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80040da:	2018      	movs	r0, #24
 80040dc:	f002 fcc4 	bl	8006a68 <USBD_static_malloc>
 80040e0:	4602      	mov	r2, r0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	e011      	b.n	800411c <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040fe:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	2304      	movs	r3, #4
 8004114:	2101      	movs	r1, #1
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f002 fc83 	bl	8006a22 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004132:	2181      	movs	r1, #129	; 0x81
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f002 fbb0 	bl	800689a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004140:	2101      	movs	r1, #1
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f002 fba9 	bl	800689a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00e      	beq.n	8004178 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800416a:	4618      	mov	r0, r3
 800416c:	f002 fc88 	bl	8006a80 <USBD_static_free>
    pdev->pClassData = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004194:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d051      	beq.n	8004256 <USBD_CUSTOM_HID_Setup+0xd2>
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	f040 80d8 	bne.w	8004368 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	3b02      	subs	r3, #2
 80041be:	2b09      	cmp	r3, #9
 80041c0:	d841      	bhi.n	8004246 <USBD_CUSTOM_HID_Setup+0xc2>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <USBD_CUSTOM_HID_Setup+0x44>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	08004221 	.word	0x08004221
 80041cc:	080041ff 	.word	0x080041ff
 80041d0:	08004247 	.word	0x08004247
 80041d4:	08004247 	.word	0x08004247
 80041d8:	08004247 	.word	0x08004247
 80041dc:	08004247 	.word	0x08004247
 80041e0:	08004247 	.word	0x08004247
 80041e4:	08004231 	.word	0x08004231
 80041e8:	0800420f 	.word	0x0800420f
 80041ec:	080041f1 	.word	0x080041f1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	885b      	ldrh	r3, [r3, #2]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	605a      	str	r2, [r3, #4]
          break;
 80041fc:	e02a      	b.n	8004254 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3304      	adds	r3, #4
 8004202:	2201      	movs	r2, #1
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 f98e 	bl	8005528 <USBD_CtlSendData>
          break;
 800420c:	e022      	b.n	8004254 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	885b      	ldrh	r3, [r3, #2]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	b29b      	uxth	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	609a      	str	r2, [r3, #8]
          break;
 800421e:	e019      	b.n	8004254 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3308      	adds	r3, #8
 8004224:	2201      	movs	r2, #1
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f001 f97d 	bl	8005528 <USBD_CtlSendData>
          break;
 800422e:	e011      	b.n	8004254 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2201      	movs	r2, #1
 8004234:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004236:	6939      	ldr	r1, [r7, #16]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	88db      	ldrh	r3, [r3, #6]
 800423c:	461a      	mov	r2, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f001 f9a0 	bl	8005584 <USBD_CtlPrepareRx>
          break;
 8004244:	e006      	b.n	8004254 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8004246:	6839      	ldr	r1, [r7, #0]
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f001 f903 	bl	8005454 <USBD_CtlError>
          ret = USBD_FAIL;
 800424e:	2302      	movs	r3, #2
 8004250:	75fb      	strb	r3, [r7, #23]
          break;
 8004252:	bf00      	nop
      }
      break;
 8004254:	e08f      	b.n	8004376 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	785b      	ldrb	r3, [r3, #1]
 800425a:	2b0b      	cmp	r3, #11
 800425c:	d87c      	bhi.n	8004358 <USBD_CUSTOM_HID_Setup+0x1d4>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <USBD_CUSTOM_HID_Setup+0xe0>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004295 	.word	0x08004295
 8004268:	08004359 	.word	0x08004359
 800426c:	08004359 	.word	0x08004359
 8004270:	08004359 	.word	0x08004359
 8004274:	08004359 	.word	0x08004359
 8004278:	08004359 	.word	0x08004359
 800427c:	080042bd 	.word	0x080042bd
 8004280:	08004359 	.word	0x08004359
 8004284:	08004359 	.word	0x08004359
 8004288:	08004359 	.word	0x08004359
 800428c:	0800430b 	.word	0x0800430b
 8004290:	08004333 	.word	0x08004333
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800429a:	2b03      	cmp	r3, #3
 800429c:	d107      	bne.n	80042ae <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800429e:	f107 030e 	add.w	r3, r7, #14
 80042a2:	2202      	movs	r2, #2
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f001 f93e 	bl	8005528 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042ac:	e05b      	b.n	8004366 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80042ae:	6839      	ldr	r1, [r7, #0]
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f001 f8cf 	bl	8005454 <USBD_CtlError>
            ret = USBD_FAIL;
 80042b6:	2302      	movs	r3, #2
 80042b8:	75fb      	strb	r3, [r7, #23]
          break;
 80042ba:	e054      	b.n	8004366 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	885b      	ldrh	r3, [r3, #2]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b22      	cmp	r3, #34	; 0x22
 80042c6:	d10b      	bne.n	80042e0 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	88db      	ldrh	r3, [r3, #6]
 80042cc:	2b22      	cmp	r3, #34	; 0x22
 80042ce:	bf28      	it	cs
 80042d0:	2322      	movcs	r3, #34	; 0x22
 80042d2:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	e00d      	b.n	80042fc <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	885b      	ldrh	r3, [r3, #2]
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b21      	cmp	r3, #33	; 0x21
 80042ea:	d107      	bne.n	80042fc <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80042ee:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	88db      	ldrh	r3, [r3, #6]
 80042f4:	2b09      	cmp	r3, #9
 80042f6:	bf28      	it	cs
 80042f8:	2309      	movcs	r3, #9
 80042fa:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80042fc:	8bfb      	ldrh	r3, [r7, #30]
 80042fe:	461a      	mov	r2, r3
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 f910 	bl	8005528 <USBD_CtlSendData>
          break;
 8004308:	e02d      	b.n	8004366 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004310:	2b03      	cmp	r3, #3
 8004312:	d107      	bne.n	8004324 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	330c      	adds	r3, #12
 8004318:	2201      	movs	r2, #1
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f001 f903 	bl	8005528 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004322:	e020      	b.n	8004366 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8004324:	6839      	ldr	r1, [r7, #0]
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f001 f894 	bl	8005454 <USBD_CtlError>
            ret = USBD_FAIL;
 800432c:	2302      	movs	r3, #2
 800432e:	75fb      	strb	r3, [r7, #23]
          break;
 8004330:	e019      	b.n	8004366 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004338:	2b03      	cmp	r3, #3
 800433a:	d106      	bne.n	800434a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	885b      	ldrh	r3, [r3, #2]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004348:	e00d      	b.n	8004366 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800434a:	6839      	ldr	r1, [r7, #0]
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f001 f881 	bl	8005454 <USBD_CtlError>
            ret = USBD_FAIL;
 8004352:	2302      	movs	r3, #2
 8004354:	75fb      	strb	r3, [r7, #23]
          break;
 8004356:	e006      	b.n	8004366 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8004358:	6839      	ldr	r1, [r7, #0]
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f001 f87a 	bl	8005454 <USBD_CtlError>
          ret = USBD_FAIL;
 8004360:	2302      	movs	r3, #2
 8004362:	75fb      	strb	r3, [r7, #23]
          break;
 8004364:	bf00      	nop
      }
      break;
 8004366:	e006      	b.n	8004376 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8004368:	6839      	ldr	r1, [r7, #0]
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 f872 	bl	8005454 <USBD_CtlError>
      ret = USBD_FAIL;
 8004370:	2302      	movs	r3, #2
 8004372:	75fb      	strb	r3, [r7, #23]
      break;
 8004374:	bf00      	nop
  }
  return ret;
 8004376:	7dfb      	ldrb	r3, [r7, #23]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	200000c4 	.word	0x200000c4

08004384 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	4613      	mov	r3, r2
 8004390:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004398:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d10f      	bne.n	80043c4 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	7d1b      	ldrb	r3, [r3, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2201      	movs	r2, #1
 80043b0:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	2181      	movs	r1, #129	; 0x81
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f002 fb0f 	bl	80069dc <USBD_LL_Transmit>
 80043be:	e001      	b.n	80043c4 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2229      	movs	r2, #41	; 0x29
 80043dc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80043de:	4b03      	ldr	r3, [pc, #12]	; (80043ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	20000040 	.word	0x20000040

080043f0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2229      	movs	r2, #41	; 0x29
 80043fc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80043fe:	4b03      	ldr	r3, [pc, #12]	; (800440c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	2000006c 	.word	0x2000006c

08004410 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2229      	movs	r2, #41	; 0x29
 800441c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800441e:	4b03      	ldr	r3, [pc, #12]	; (800442c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000098 	.word	0x20000098

08004430 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004442:	2200      	movs	r2, #0
 8004444:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004464:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	7810      	ldrb	r0, [r2, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	7852      	ldrb	r2, [r2, #1]
 8004476:	4611      	mov	r1, r2
 8004478:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	2304      	movs	r3, #4
 800447e:	2101      	movs	r1, #1
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f002 face 	bl	8006a22 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800449e:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d10c      	bne.n	80044c2 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	7810      	ldrb	r0, [r2, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	7852      	ldrb	r2, [r2, #1]
 80044b8:	4611      	mov	r1, r2
 80044ba:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	220a      	movs	r2, #10
 80044d8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80044da:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	200000d0 	.word	0x200000d0

080044ec <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80044f6:	2302      	movs	r3, #2
 80044f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	4613      	mov	r3, r2
 8004524:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800452c:	2302      	movs	r3, #2
 800452e:	e01a      	b.n	8004566 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	79fa      	ldrb	r2, [r7, #7]
 800455c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f002 f90a 	bl	8006778 <USBD_LL_Init>

  return USBD_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d006      	beq.n	8004590 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]
 800458e:	e001      	b.n	8004594 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004590:	2302      	movs	r3, #2
 8004592:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f002 f935 	bl	8006818 <USBD_LL_Start>

  return USBD_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80045d8:	2302      	movs	r3, #2
 80045da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	4611      	mov	r1, r2
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4798      	blx	r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	4611      	mov	r1, r2
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3

  return USBD_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 feca 	bl	80053dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004656:	461a      	mov	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	2b01      	cmp	r3, #1
 800466a:	d00c      	beq.n	8004686 <USBD_LL_SetupStage+0x56>
 800466c:	2b01      	cmp	r3, #1
 800466e:	d302      	bcc.n	8004676 <USBD_LL_SetupStage+0x46>
 8004670:	2b02      	cmp	r3, #2
 8004672:	d010      	beq.n	8004696 <USBD_LL_SetupStage+0x66>
 8004674:	e017      	b.n	80046a6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f9ca 	bl	8004a18 <USBD_StdDevReq>
      break;
 8004684:	e01a      	b.n	80046bc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa2c 	bl	8004aec <USBD_StdItfReq>
      break;
 8004694:	e012      	b.n	80046bc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fa6a 	bl	8004b78 <USBD_StdEPReq>
      break;
 80046a4:	e00a      	b.n	80046bc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4619      	mov	r1, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f002 f90f 	bl	80068d8 <USBD_LL_StallEP>
      break;
 80046ba:	bf00      	nop
  }

  return USBD_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	460b      	mov	r3, r1
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80046d4:	7afb      	ldrb	r3, [r7, #11]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d14b      	bne.n	8004772 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80046e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d134      	bne.n	8004756 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d919      	bls.n	800472c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800470e:	429a      	cmp	r2, r3
 8004710:	d203      	bcs.n	800471a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004716:	b29b      	uxth	r3, r3
 8004718:	e002      	b.n	8004720 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800471e:	b29b      	uxth	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 ff4b 	bl	80055c0 <USBD_CtlContinueRx>
 800472a:	e038      	b.n	800479e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800473e:	2b03      	cmp	r3, #3
 8004740:	d105      	bne.n	800474e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 ff48 	bl	80055e4 <USBD_CtlSendStatus>
 8004754:	e023      	b.n	800479e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800475c:	2b05      	cmp	r3, #5
 800475e:	d11e      	bne.n	800479e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004768:	2100      	movs	r1, #0
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f002 f8b4 	bl	80068d8 <USBD_LL_StallEP>
 8004770:	e015      	b.n	800479e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00d      	beq.n	800479a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004784:	2b03      	cmp	r3, #3
 8004786:	d108      	bne.n	800479a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	7afa      	ldrb	r2, [r7, #11]
 8004792:	4611      	mov	r1, r2
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	4798      	blx	r3
 8004798:	e001      	b.n	800479e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800479a:	2302      	movs	r3, #2
 800479c:	e000      	b.n	80047a0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	460b      	mov	r3, r1
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80047b6:	7afb      	ldrb	r3, [r7, #11]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d17f      	bne.n	80048bc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3314      	adds	r3, #20
 80047c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d15c      	bne.n	8004886 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d915      	bls.n	8004804 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	1ad2      	subs	r2, r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 feb5 	bl	8005560 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047f6:	2300      	movs	r3, #0
 80047f8:	2200      	movs	r2, #0
 80047fa:	2100      	movs	r1, #0
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f002 f910 	bl	8006a22 <USBD_LL_PrepareReceive>
 8004802:	e04e      	b.n	80048a2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	6912      	ldr	r2, [r2, #16]
 800480c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004810:	fb02 f201 	mul.w	r2, r2, r1
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d11c      	bne.n	8004854 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004822:	429a      	cmp	r2, r3
 8004824:	d316      	bcc.n	8004854 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004830:	429a      	cmp	r2, r3
 8004832:	d20f      	bcs.n	8004854 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004834:	2200      	movs	r2, #0
 8004836:	2100      	movs	r1, #0
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fe91 	bl	8005560 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004846:	2300      	movs	r3, #0
 8004848:	2200      	movs	r2, #0
 800484a:	2100      	movs	r1, #0
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f002 f8e8 	bl	8006a22 <USBD_LL_PrepareReceive>
 8004852:	e026      	b.n	80048a2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004866:	2b03      	cmp	r3, #3
 8004868:	d105      	bne.n	8004876 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f002 f82d 	bl	80068d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fec3 	bl	800560a <USBD_CtlReceiveStatus>
 8004884:	e00d      	b.n	80048a2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800488c:	2b04      	cmp	r3, #4
 800488e:	d004      	beq.n	800489a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f002 f81b 	bl	80068d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d11d      	bne.n	80048e8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7ff fe83 	bl	80045b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80048ba:	e015      	b.n	80048e8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d108      	bne.n	80048e4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	7afa      	ldrb	r2, [r7, #11]
 80048dc:	4611      	mov	r1, r2
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	4798      	blx	r3
 80048e2:	e001      	b.n	80048e8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80048e4:	2302      	movs	r3, #2
 80048e6:	e000      	b.n	80048ea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80048fa:	2340      	movs	r3, #64	; 0x40
 80048fc:	2200      	movs	r2, #0
 80048fe:	2100      	movs	r1, #0
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f001 ffa4 	bl	800684e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2240      	movs	r2, #64	; 0x40
 8004912:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004916:	2340      	movs	r3, #64	; 0x40
 8004918:	2200      	movs	r2, #0
 800491a:	2180      	movs	r1, #128	; 0x80
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f001 ff96 	bl	800684e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2240      	movs	r2, #64	; 0x40
 800492c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6852      	ldr	r2, [r2, #4]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	4611      	mov	r1, r2
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
  }

  return USBD_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2204      	movs	r2, #4
 80049aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d105      	bne.n	80049d8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d10b      	bne.n	8004a0e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d004      	beq.n	8004a3c <USBD_StdDevReq+0x24>
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d002      	beq.n	8004a3c <USBD_StdDevReq+0x24>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <USBD_StdDevReq+0x34>
 8004a3a:	e04c      	b.n	8004ad6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	6839      	ldr	r1, [r7, #0]
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
      break;
 8004a4a:	e049      	b.n	8004ae0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	d83a      	bhi.n	8004aca <USBD_StdDevReq+0xb2>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <USBD_StdDevReq+0x44>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004aad 	.word	0x08004aad
 8004a60:	08004ac1 	.word	0x08004ac1
 8004a64:	08004acb 	.word	0x08004acb
 8004a68:	08004ab7 	.word	0x08004ab7
 8004a6c:	08004acb 	.word	0x08004acb
 8004a70:	08004a8f 	.word	0x08004a8f
 8004a74:	08004a85 	.word	0x08004a85
 8004a78:	08004acb 	.word	0x08004acb
 8004a7c:	08004aa3 	.word	0x08004aa3
 8004a80:	08004a99 	.word	0x08004a99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9d4 	bl	8004e34 <USBD_GetDescriptor>
          break;
 8004a8c:	e022      	b.n	8004ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fb37 	bl	8005104 <USBD_SetAddress>
          break;
 8004a96:	e01d      	b.n	8004ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fb74 	bl	8005188 <USBD_SetConfig>
          break;
 8004aa0:	e018      	b.n	8004ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fbfd 	bl	80052a4 <USBD_GetConfig>
          break;
 8004aaa:	e013      	b.n	8004ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fc2c 	bl	800530c <USBD_GetStatus>
          break;
 8004ab4:	e00e      	b.n	8004ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fc5a 	bl	8005372 <USBD_SetFeature>
          break;
 8004abe:	e009      	b.n	8004ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fc69 	bl	800539a <USBD_ClrFeature>
          break;
 8004ac8:	e004      	b.n	8004ad4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fcc1 	bl	8005454 <USBD_CtlError>
          break;
 8004ad2:	bf00      	nop
      }
      break;
 8004ad4:	e004      	b.n	8004ae0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004ad6:	6839      	ldr	r1, [r7, #0]
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fcbb 	bl	8005454 <USBD_CtlError>
      break;
 8004ade:	bf00      	nop
  }

  return ret;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop

08004aec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d003      	beq.n	8004b0e <USBD_StdItfReq+0x22>
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d001      	beq.n	8004b0e <USBD_StdItfReq+0x22>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d12a      	bne.n	8004b64 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b14:	3b01      	subs	r3, #1
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d81d      	bhi.n	8004b56 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	889b      	ldrh	r3, [r3, #4]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d813      	bhi.n	8004b4c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	88db      	ldrh	r3, [r3, #6]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d110      	bne.n	8004b60 <USBD_StdItfReq+0x74>
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10d      	bne.n	8004b60 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fd4d 	bl	80055e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004b4a:	e009      	b.n	8004b60 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004b4c:	6839      	ldr	r1, [r7, #0]
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fc80 	bl	8005454 <USBD_CtlError>
          break;
 8004b54:	e004      	b.n	8004b60 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fc7b 	bl	8005454 <USBD_CtlError>
          break;
 8004b5e:	e000      	b.n	8004b62 <USBD_StdItfReq+0x76>
          break;
 8004b60:	bf00      	nop
      }
      break;
 8004b62:	e004      	b.n	8004b6e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fc74 	bl	8005454 <USBD_CtlError>
      break;
 8004b6c:	bf00      	nop
  }

  return USBD_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	889b      	ldrh	r3, [r3, #4]
 8004b8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d004      	beq.n	8004ba2 <USBD_StdEPReq+0x2a>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d002      	beq.n	8004ba2 <USBD_StdEPReq+0x2a>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <USBD_StdEPReq+0x3a>
 8004ba0:	e13d      	b.n	8004e1e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	6839      	ldr	r1, [r7, #0]
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
      break;
 8004bb0:	e13a      	b.n	8004e28 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d10a      	bne.n	8004bd4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
 8004bcc:	4603      	mov	r3, r0
 8004bce:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	e12a      	b.n	8004e2a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d03e      	beq.n	8004c5a <USBD_StdEPReq+0xe2>
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d002      	beq.n	8004be6 <USBD_StdEPReq+0x6e>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d070      	beq.n	8004cc6 <USBD_StdEPReq+0x14e>
 8004be4:	e115      	b.n	8004e12 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d002      	beq.n	8004bf6 <USBD_StdEPReq+0x7e>
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d015      	beq.n	8004c20 <USBD_StdEPReq+0xa8>
 8004bf4:	e02b      	b.n	8004c4e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004bf6:	7bbb      	ldrb	r3, [r7, #14]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00c      	beq.n	8004c16 <USBD_StdEPReq+0x9e>
 8004bfc:	7bbb      	ldrb	r3, [r7, #14]
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d009      	beq.n	8004c16 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004c02:	7bbb      	ldrb	r3, [r7, #14]
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f001 fe66 	bl	80068d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f001 fe62 	bl	80068d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004c14:	e020      	b.n	8004c58 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fc1b 	bl	8005454 <USBD_CtlError>
              break;
 8004c1e:	e01b      	b.n	8004c58 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	885b      	ldrh	r3, [r3, #2]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10e      	bne.n	8004c46 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004c28:	7bbb      	ldrb	r3, [r7, #14]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <USBD_StdEPReq+0xce>
 8004c2e:	7bbb      	ldrb	r3, [r7, #14]
 8004c30:	2b80      	cmp	r3, #128	; 0x80
 8004c32:	d008      	beq.n	8004c46 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	88db      	ldrh	r3, [r3, #6]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004c3c:	7bbb      	ldrb	r3, [r7, #14]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 fe49 	bl	80068d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fccc 	bl	80055e4 <USBD_CtlSendStatus>

              break;
 8004c4c:	e004      	b.n	8004c58 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004c4e:	6839      	ldr	r1, [r7, #0]
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fbff 	bl	8005454 <USBD_CtlError>
              break;
 8004c56:	bf00      	nop
          }
          break;
 8004c58:	e0e0      	b.n	8004e1c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d002      	beq.n	8004c6a <USBD_StdEPReq+0xf2>
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d015      	beq.n	8004c94 <USBD_StdEPReq+0x11c>
 8004c68:	e026      	b.n	8004cb8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c6a:	7bbb      	ldrb	r3, [r7, #14]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <USBD_StdEPReq+0x112>
 8004c70:	7bbb      	ldrb	r3, [r7, #14]
 8004c72:	2b80      	cmp	r3, #128	; 0x80
 8004c74:	d009      	beq.n	8004c8a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004c76:	7bbb      	ldrb	r3, [r7, #14]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f001 fe2c 	bl	80068d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 fe28 	bl	80068d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004c88:	e01c      	b.n	8004cc4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fbe1 	bl	8005454 <USBD_CtlError>
              break;
 8004c92:	e017      	b.n	8004cc4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	885b      	ldrh	r3, [r3, #2]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d112      	bne.n	8004cc2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004c9c:	7bbb      	ldrb	r3, [r7, #14]
 8004c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004ca6:	7bbb      	ldrb	r3, [r7, #14]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 fe33 	bl	8006916 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fc97 	bl	80055e4 <USBD_CtlSendStatus>
              }
              break;
 8004cb6:	e004      	b.n	8004cc2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004cb8:	6839      	ldr	r1, [r7, #0]
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fbca 	bl	8005454 <USBD_CtlError>
              break;
 8004cc0:	e000      	b.n	8004cc4 <USBD_StdEPReq+0x14c>
              break;
 8004cc2:	bf00      	nop
          }
          break;
 8004cc4:	e0aa      	b.n	8004e1c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d002      	beq.n	8004cd6 <USBD_StdEPReq+0x15e>
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d032      	beq.n	8004d3a <USBD_StdEPReq+0x1c2>
 8004cd4:	e097      	b.n	8004e06 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004cd6:	7bbb      	ldrb	r3, [r7, #14]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <USBD_StdEPReq+0x174>
 8004cdc:	7bbb      	ldrb	r3, [r7, #14]
 8004cde:	2b80      	cmp	r3, #128	; 0x80
 8004ce0:	d004      	beq.n	8004cec <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fbb5 	bl	8005454 <USBD_CtlError>
                break;
 8004cea:	e091      	b.n	8004e10 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da0b      	bge.n	8004d0c <USBD_StdEPReq+0x194>
 8004cf4:	7bbb      	ldrb	r3, [r7, #14]
 8004cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	3310      	adds	r3, #16
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	3304      	adds	r3, #4
 8004d0a:	e00b      	b.n	8004d24 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004d0c:	7bbb      	ldrb	r3, [r7, #14]
 8004d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	3304      	adds	r3, #4
 8004d24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fbf8 	bl	8005528 <USBD_CtlSendData>
              break;
 8004d38:	e06a      	b.n	8004e10 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004d3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	da11      	bge.n	8004d66 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d42:	7bbb      	ldrb	r3, [r7, #14]
 8004d44:	f003 020f 	and.w	r2, r3, #15
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	3318      	adds	r3, #24
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d117      	bne.n	8004d8c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fb78 	bl	8005454 <USBD_CtlError>
                  break;
 8004d64:	e054      	b.n	8004e10 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004d66:	7bbb      	ldrb	r3, [r7, #14]
 8004d68:	f003 020f 	and.w	r2, r3, #15
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fb65 	bl	8005454 <USBD_CtlError>
                  break;
 8004d8a:	e041      	b.n	8004e10 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da0b      	bge.n	8004dac <USBD_StdEPReq+0x234>
 8004d94:	7bbb      	ldrb	r3, [r7, #14]
 8004d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	3310      	adds	r3, #16
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	3304      	adds	r3, #4
 8004daa:	e00b      	b.n	8004dc4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004dac:	7bbb      	ldrb	r3, [r7, #14]
 8004dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004dc6:	7bbb      	ldrb	r3, [r7, #14]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <USBD_StdEPReq+0x25a>
 8004dcc:	7bbb      	ldrb	r3, [r7, #14]
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d103      	bne.n	8004dda <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e00e      	b.n	8004df8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004dda:	7bbb      	ldrb	r3, [r7, #14]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 fdb8 	bl	8006954 <USBD_LL_IsStallEP>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e002      	b.n	8004df8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fb92 	bl	8005528 <USBD_CtlSendData>
              break;
 8004e04:	e004      	b.n	8004e10 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb23 	bl	8005454 <USBD_CtlError>
              break;
 8004e0e:	bf00      	nop
          }
          break;
 8004e10:	e004      	b.n	8004e1c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fb1d 	bl	8005454 <USBD_CtlError>
          break;
 8004e1a:	bf00      	nop
      }
      break;
 8004e1c:	e004      	b.n	8004e28 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fb17 	bl	8005454 <USBD_CtlError>
      break;
 8004e26:	bf00      	nop
  }

  return ret;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	885b      	ldrh	r3, [r3, #2]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	2b06      	cmp	r3, #6
 8004e56:	f200 8128 	bhi.w	80050aa <USBD_GetDescriptor+0x276>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <USBD_GetDescriptor+0x2c>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e7d 	.word	0x08004e7d
 8004e64:	08004e95 	.word	0x08004e95
 8004e68:	08004ed5 	.word	0x08004ed5
 8004e6c:	080050ab 	.word	0x080050ab
 8004e70:	080050ab 	.word	0x080050ab
 8004e74:	0800504b 	.word	0x0800504b
 8004e78:	08005077 	.word	0x08005077
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	7c12      	ldrb	r2, [r2, #16]
 8004e88:	f107 0108 	add.w	r1, r7, #8
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4798      	blx	r3
 8004e90:	60f8      	str	r0, [r7, #12]
      break;
 8004e92:	e112      	b.n	80050ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7c1b      	ldrb	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10d      	bne.n	8004eb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	f107 0208 	add.w	r2, r7, #8
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4798      	blx	r3
 8004eac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004eb6:	e100      	b.n	80050ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	f107 0208 	add.w	r2, r7, #8
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4798      	blx	r3
 8004ec8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	2202      	movs	r2, #2
 8004ed0:	701a      	strb	r2, [r3, #0]
      break;
 8004ed2:	e0f2      	b.n	80050ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	885b      	ldrh	r3, [r3, #2]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	f200 80ac 	bhi.w	8005038 <USBD_GetDescriptor+0x204>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <USBD_GetDescriptor+0xb4>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004f01 	.word	0x08004f01
 8004eec:	08004f35 	.word	0x08004f35
 8004ef0:	08004f69 	.word	0x08004f69
 8004ef4:	08004f9d 	.word	0x08004f9d
 8004ef8:	08004fd1 	.word	0x08004fd1
 8004efc:	08005005 	.word	0x08005005
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	7c12      	ldrb	r2, [r2, #16]
 8004f18:	f107 0108 	add.w	r1, r7, #8
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4798      	blx	r3
 8004f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f22:	e091      	b.n	8005048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fa94 	bl	8005454 <USBD_CtlError>
            err++;
 8004f2c:	7afb      	ldrb	r3, [r7, #11]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	72fb      	strb	r3, [r7, #11]
          break;
 8004f32:	e089      	b.n	8005048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	7c12      	ldrb	r2, [r2, #16]
 8004f4c:	f107 0108 	add.w	r1, r7, #8
 8004f50:	4610      	mov	r0, r2
 8004f52:	4798      	blx	r3
 8004f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f56:	e077      	b.n	8005048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa7a 	bl	8005454 <USBD_CtlError>
            err++;
 8004f60:	7afb      	ldrb	r3, [r7, #11]
 8004f62:	3301      	adds	r3, #1
 8004f64:	72fb      	strb	r3, [r7, #11]
          break;
 8004f66:	e06f      	b.n	8005048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00b      	beq.n	8004f8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	7c12      	ldrb	r2, [r2, #16]
 8004f80:	f107 0108 	add.w	r1, r7, #8
 8004f84:	4610      	mov	r0, r2
 8004f86:	4798      	blx	r3
 8004f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f8a:	e05d      	b.n	8005048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fa60 	bl	8005454 <USBD_CtlError>
            err++;
 8004f94:	7afb      	ldrb	r3, [r7, #11]
 8004f96:	3301      	adds	r3, #1
 8004f98:	72fb      	strb	r3, [r7, #11]
          break;
 8004f9a:	e055      	b.n	8005048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	7c12      	ldrb	r2, [r2, #16]
 8004fb4:	f107 0108 	add.w	r1, r7, #8
 8004fb8:	4610      	mov	r0, r2
 8004fba:	4798      	blx	r3
 8004fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004fbe:	e043      	b.n	8005048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fa46 	bl	8005454 <USBD_CtlError>
            err++;
 8004fc8:	7afb      	ldrb	r3, [r7, #11]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8004fce:	e03b      	b.n	8005048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	7c12      	ldrb	r2, [r2, #16]
 8004fe8:	f107 0108 	add.w	r1, r7, #8
 8004fec:	4610      	mov	r0, r2
 8004fee:	4798      	blx	r3
 8004ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004ff2:	e029      	b.n	8005048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa2c 	bl	8005454 <USBD_CtlError>
            err++;
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	3301      	adds	r3, #1
 8005000:	72fb      	strb	r3, [r7, #11]
          break;
 8005002:	e021      	b.n	8005048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00b      	beq.n	8005028 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	7c12      	ldrb	r2, [r2, #16]
 800501c:	f107 0108 	add.w	r1, r7, #8
 8005020:	4610      	mov	r0, r2
 8005022:	4798      	blx	r3
 8005024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005026:	e00f      	b.n	8005048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005028:	6839      	ldr	r1, [r7, #0]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa12 	bl	8005454 <USBD_CtlError>
            err++;
 8005030:	7afb      	ldrb	r3, [r7, #11]
 8005032:	3301      	adds	r3, #1
 8005034:	72fb      	strb	r3, [r7, #11]
          break;
 8005036:	e007      	b.n	8005048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa0a 	bl	8005454 <USBD_CtlError>
          err++;
 8005040:	7afb      	ldrb	r3, [r7, #11]
 8005042:	3301      	adds	r3, #1
 8005044:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005046:	e038      	b.n	80050ba <USBD_GetDescriptor+0x286>
 8005048:	e037      	b.n	80050ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	7c1b      	ldrb	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	f107 0208 	add.w	r2, r7, #8
 800505e:	4610      	mov	r0, r2
 8005060:	4798      	blx	r3
 8005062:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005064:	e029      	b.n	80050ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f9f3 	bl	8005454 <USBD_CtlError>
        err++;
 800506e:	7afb      	ldrb	r3, [r7, #11]
 8005070:	3301      	adds	r3, #1
 8005072:	72fb      	strb	r3, [r7, #11]
      break;
 8005074:	e021      	b.n	80050ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7c1b      	ldrb	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	f107 0208 	add.w	r2, r7, #8
 800508a:	4610      	mov	r0, r2
 800508c:	4798      	blx	r3
 800508e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
 8005094:	2207      	movs	r2, #7
 8005096:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005098:	e00f      	b.n	80050ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f9d9 	bl	8005454 <USBD_CtlError>
        err++;
 80050a2:	7afb      	ldrb	r3, [r7, #11]
 80050a4:	3301      	adds	r3, #1
 80050a6:	72fb      	strb	r3, [r7, #11]
      break;
 80050a8:	e007      	b.n	80050ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f9d1 	bl	8005454 <USBD_CtlError>
      err++;
 80050b2:	7afb      	ldrb	r3, [r7, #11]
 80050b4:	3301      	adds	r3, #1
 80050b6:	72fb      	strb	r3, [r7, #11]
      break;
 80050b8:	bf00      	nop
  }

  if (err != 0U)
 80050ba:	7afb      	ldrb	r3, [r7, #11]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d11c      	bne.n	80050fa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80050c0:	893b      	ldrh	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d011      	beq.n	80050ea <USBD_GetDescriptor+0x2b6>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	88db      	ldrh	r3, [r3, #6]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00d      	beq.n	80050ea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	88da      	ldrh	r2, [r3, #6]
 80050d2:	893b      	ldrh	r3, [r7, #8]
 80050d4:	4293      	cmp	r3, r2
 80050d6:	bf28      	it	cs
 80050d8:	4613      	movcs	r3, r2
 80050da:	b29b      	uxth	r3, r3
 80050dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80050de:	893b      	ldrh	r3, [r7, #8]
 80050e0:	461a      	mov	r2, r3
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fa1f 	bl	8005528 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	88db      	ldrh	r3, [r3, #6]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fa76 	bl	80055e4 <USBD_CtlSendStatus>
 80050f8:	e000      	b.n	80050fc <USBD_GetDescriptor+0x2c8>
    return;
 80050fa:	bf00      	nop
    }
  }
}
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop

08005104 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	889b      	ldrh	r3, [r3, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d130      	bne.n	8005178 <USBD_SetAddress+0x74>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	88db      	ldrh	r3, [r3, #6]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d12c      	bne.n	8005178 <USBD_SetAddress+0x74>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	885b      	ldrh	r3, [r3, #2]
 8005122:	2b7f      	cmp	r3, #127	; 0x7f
 8005124:	d828      	bhi.n	8005178 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	885b      	ldrh	r3, [r3, #2]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005130:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005138:	2b03      	cmp	r3, #3
 800513a:	d104      	bne.n	8005146 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f988 	bl	8005454 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005144:	e01c      	b.n	8005180 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 fc23 	bl	800699e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa43 	bl	80055e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800516c:	e008      	b.n	8005180 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005176:	e003      	b.n	8005180 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f96a 	bl	8005454 <USBD_CtlError>
  }
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	885b      	ldrh	r3, [r3, #2]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	4b41      	ldr	r3, [pc, #260]	; (80052a0 <USBD_SetConfig+0x118>)
 800519a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800519c:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <USBD_SetConfig+0x118>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d904      	bls.n	80051ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f954 	bl	8005454 <USBD_CtlError>
 80051ac:	e075      	b.n	800529a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d002      	beq.n	80051be <USBD_SetConfig+0x36>
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d023      	beq.n	8005204 <USBD_SetConfig+0x7c>
 80051bc:	e062      	b.n	8005284 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80051be:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <USBD_SetConfig+0x118>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01a      	beq.n	80051fc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80051c6:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <USBD_SetConfig+0x118>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2203      	movs	r2, #3
 80051d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80051d8:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <USBD_SetConfig+0x118>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff f9f4 	bl	80045cc <USBD_SetClassConfig>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d104      	bne.n	80051f4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f931 	bl	8005454 <USBD_CtlError>
            return;
 80051f2:	e052      	b.n	800529a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f9f5 	bl	80055e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80051fa:	e04e      	b.n	800529a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f9f1 	bl	80055e4 <USBD_CtlSendStatus>
        break;
 8005202:	e04a      	b.n	800529a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005204:	4b26      	ldr	r3, [pc, #152]	; (80052a0 <USBD_SetConfig+0x118>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d112      	bne.n	8005232 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005214:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <USBD_SetConfig+0x118>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800521e:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <USBD_SetConfig+0x118>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	4619      	mov	r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff f9f0 	bl	800460a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9da 	bl	80055e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005230:	e033      	b.n	800529a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <USBD_SetConfig+0x118>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d01d      	beq.n	800527c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff f9de 	bl	800460a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800524e:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <USBD_SetConfig+0x118>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <USBD_SetConfig+0x118>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff f9b4 	bl	80045cc <USBD_SetClassConfig>
 8005264:	4603      	mov	r3, r0
 8005266:	2b02      	cmp	r3, #2
 8005268:	d104      	bne.n	8005274 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f8f1 	bl	8005454 <USBD_CtlError>
            return;
 8005272:	e012      	b.n	800529a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f9b5 	bl	80055e4 <USBD_CtlSendStatus>
        break;
 800527a:	e00e      	b.n	800529a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f9b1 	bl	80055e4 <USBD_CtlSendStatus>
        break;
 8005282:	e00a      	b.n	800529a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005284:	6839      	ldr	r1, [r7, #0]
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8e4 	bl	8005454 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <USBD_SetConfig+0x118>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff f9b9 	bl	800460a <USBD_ClrClassConfig>
        break;
 8005298:	bf00      	nop
    }
  }
}
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000188 	.word	0x20000188

080052a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	88db      	ldrh	r3, [r3, #6]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d004      	beq.n	80052c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f8cb 	bl	8005454 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80052be:	e021      	b.n	8005304 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	db17      	blt.n	80052fa <USBD_GetConfig+0x56>
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	dd02      	ble.n	80052d4 <USBD_GetConfig+0x30>
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d00b      	beq.n	80052ea <USBD_GetConfig+0x46>
 80052d2:	e012      	b.n	80052fa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3308      	adds	r3, #8
 80052de:	2201      	movs	r2, #1
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f920 	bl	8005528 <USBD_CtlSendData>
        break;
 80052e8:	e00c      	b.n	8005304 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	2201      	movs	r2, #1
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f918 	bl	8005528 <USBD_CtlSendData>
        break;
 80052f8:	e004      	b.n	8005304 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f8a9 	bl	8005454 <USBD_CtlError>
        break;
 8005302:	bf00      	nop
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531c:	3b01      	subs	r3, #1
 800531e:	2b02      	cmp	r3, #2
 8005320:	d81e      	bhi.n	8005360 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	88db      	ldrh	r3, [r3, #6]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d004      	beq.n	8005334 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f891 	bl	8005454 <USBD_CtlError>
        break;
 8005332:	e01a      	b.n	800536a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f043 0202 	orr.w	r2, r3, #2
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	330c      	adds	r3, #12
 8005354:	2202      	movs	r2, #2
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8e5 	bl	8005528 <USBD_CtlSendData>
      break;
 800535e:	e004      	b.n	800536a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f876 	bl	8005454 <USBD_CtlError>
      break;
 8005368:	bf00      	nop
  }
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	885b      	ldrh	r3, [r3, #2]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d106      	bne.n	8005392 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f929 	bl	80055e4 <USBD_CtlSendStatus>
  }
}
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053aa:	3b01      	subs	r3, #1
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d80b      	bhi.n	80053c8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	885b      	ldrh	r3, [r3, #2]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d10c      	bne.n	80053d2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f90f 	bl	80055e4 <USBD_CtlSendStatus>
      }
      break;
 80053c6:	e004      	b.n	80053d2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f842 	bl	8005454 <USBD_CtlError>
      break;
 80053d0:	e000      	b.n	80053d4 <USBD_ClrFeature+0x3a>
      break;
 80053d2:	bf00      	nop
  }
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	785a      	ldrb	r2, [r3, #1]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	3302      	adds	r3, #2
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	3303      	adds	r3, #3
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	b29b      	uxth	r3, r3
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	b29b      	uxth	r3, r3
 800540a:	4413      	add	r3, r2
 800540c:	b29a      	uxth	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	3304      	adds	r3, #4
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	3305      	adds	r3, #5
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	b29b      	uxth	r3, r3
 8005426:	4413      	add	r3, r2
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	3306      	adds	r3, #6
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	b29a      	uxth	r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	3307      	adds	r3, #7
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	b29b      	uxth	r3, r3
 8005442:	4413      	add	r3, r2
 8005444:	b29a      	uxth	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	80da      	strh	r2, [r3, #6]

}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f001 fa39 	bl	80068d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005466:	2100      	movs	r1, #0
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f001 fa35 	bl	80068d8 <USBD_LL_StallEP>
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d032      	beq.n	80054f2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f834 	bl	80054fa <USBD_GetLen>
 8005492:	4603      	mov	r3, r0
 8005494:	3301      	adds	r3, #1
 8005496:	b29b      	uxth	r3, r3
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	75fa      	strb	r2, [r7, #23]
 80054a6:	461a      	mov	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4413      	add	r3, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	7812      	ldrb	r2, [r2, #0]
 80054b0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	75fa      	strb	r2, [r7, #23]
 80054b8:	461a      	mov	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4413      	add	r3, r2
 80054be:	2203      	movs	r2, #3
 80054c0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80054c2:	e012      	b.n	80054ea <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	60fa      	str	r2, [r7, #12]
 80054ca:	7dfa      	ldrb	r2, [r7, #23]
 80054cc:	1c51      	adds	r1, r2, #1
 80054ce:	75f9      	strb	r1, [r7, #23]
 80054d0:	4611      	mov	r1, r2
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	440a      	add	r2, r1
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80054da:	7dfb      	ldrb	r3, [r7, #23]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	75fa      	strb	r2, [r7, #23]
 80054e0:	461a      	mov	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4413      	add	r3, r2
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e8      	bne.n	80054c4 <USBD_GetString+0x4e>
    }
  }
}
 80054f2:	bf00      	nop
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005506:	e005      	b.n	8005514 <USBD_GetLen+0x1a>
  {
    len++;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	3301      	adds	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3301      	adds	r3, #1
 8005512:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f5      	bne.n	8005508 <USBD_GetLen+0xe>
  }

  return len;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr

08005528 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2202      	movs	r2, #2
 800553a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	2100      	movs	r1, #0
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f001 fa43 	bl	80069dc <USBD_LL_Transmit>

  return USBD_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	2100      	movs	r1, #0
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f001 fa31 	bl	80069dc <USBD_LL_Transmit>

  return USBD_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2203      	movs	r2, #3
 8005596:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	2100      	movs	r1, #0
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f001 fa36 	bl	8006a22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	2100      	movs	r1, #0
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f001 fa24 	bl	8006a22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2204      	movs	r2, #4
 80055f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80055f4:	2300      	movs	r3, #0
 80055f6:	2200      	movs	r2, #0
 80055f8:	2100      	movs	r1, #0
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f001 f9ee 	bl	80069dc <USBD_LL_Transmit>

  return USBD_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2205      	movs	r2, #5
 8005616:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800561a:	2300      	movs	r3, #0
 800561c:	2200      	movs	r2, #0
 800561e:	2100      	movs	r1, #0
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 f9fe 	bl	8006a22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <ENT_Init>:

extern TIM_HandleTypeDef htim1;

static uint32_t freqToPeriod(const EntSoundFrequency freq);

void ENT_Init(EntertainmentCtrl* entCtrl) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
    if (!entCtrl) return;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <ENT_Init+0x18>

    HAL_TIM_PWM_Start(&htim1, START_SIGNAL_PWM_CHANNEL); // need to start timer
 800563e:	2104      	movs	r1, #4
 8005640:	4803      	ldr	r0, [pc, #12]	; (8005650 <ENT_Init+0x20>)
 8005642:	f7fc fea1 	bl	8002388 <HAL_TIM_PWM_Start>
 8005646:	e000      	b.n	800564a <ENT_Init+0x1a>
    if (!entCtrl) return;
 8005648:	bf00      	nop
}
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	200001b0 	.word	0x200001b0

08005654 <ENT_EnableSound>:
    if (!entCtrl) return;

//    HAL_GPIO_WritePin(START_LED_GPIO_Port, START_LED_Pin, GPIO_PIN_RESET);
}

void ENT_EnableSound(EntertainmentCtrl* entCtrl) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(BuzzerEnable_GPIO_Port, BuzzerEnable_Pin, GPIO_PIN_RESET);
 800565c:	2200      	movs	r2, #0
 800565e:	2110      	movs	r1, #16
 8005660:	4803      	ldr	r0, [pc, #12]	; (8005670 <ENT_EnableSound+0x1c>)
 8005662:	f7fb f876 	bl	8000752 <HAL_GPIO_WritePin>
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40010c00 	.word	0x40010c00

08005674 <ENT_SoundOn>:

void ENT_DisableSound(EntertainmentCtrl* entCtrl) {
    HAL_GPIO_WritePin(BuzzerEnable_GPIO_Port, BuzzerEnable_Pin, GPIO_PIN_SET);
}

void ENT_SoundOn(EntertainmentCtrl* entCtrl, EntSoundFrequency freq) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
    if (!entCtrl) return;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d024      	beq.n	80056d0 <ENT_SoundOn+0x5c>

    if (ENT_SOUND_UNDEFINED == freq) return; // no sound output, nothing to change // TODO return error code from here
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d023      	beq.n	80056d4 <ENT_SoundOn+0x60>
    if (entCtrl->freq == freq) return; // sound is on and has the same freq - nothing to change
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	78fa      	ldrb	r2, [r7, #3]
 8005692:	429a      	cmp	r2, r3
 8005694:	d020      	beq.n	80056d8 <ENT_SoundOn+0x64>

    uint32_t divider = freqToPeriod(freq);
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f84f 	bl	800573c <freqToPeriod>
 800569e:	60f8      	str	r0, [r7, #12]
    __HAL_TIM_SET_CLOCKDIVISION(&htim1, divider);
 80056a0:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <ENT_SoundOn+0x6c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <ENT_SoundOn+0x6c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <ENT_SoundOn+0x6c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6819      	ldr	r1, [r3, #0]
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <ENT_SoundOn+0x6c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <ENT_SoundOn+0x6c>)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6113      	str	r3, [r2, #16]
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80056c6:	2100      	movs	r1, #0
 80056c8:	4805      	ldr	r0, [pc, #20]	; (80056e0 <ENT_SoundOn+0x6c>)
 80056ca:	f7fc fe5d 	bl	8002388 <HAL_TIM_PWM_Start>
 80056ce:	e004      	b.n	80056da <ENT_SoundOn+0x66>
    if (!entCtrl) return;
 80056d0:	bf00      	nop
 80056d2:	e002      	b.n	80056da <ENT_SoundOn+0x66>
    if (ENT_SOUND_UNDEFINED == freq) return; // no sound output, nothing to change // TODO return error code from here
 80056d4:	bf00      	nop
 80056d6:	e000      	b.n	80056da <ENT_SoundOn+0x66>
    if (entCtrl->freq == freq) return; // sound is on and has the same freq - nothing to change
 80056d8:	bf00      	nop
}
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	200001b0 	.word	0x200001b0

080056e4 <ENT_SoundOff>:

void ENT_SoundOff(EntertainmentCtrl* entCtrl) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
    if (!entCtrl) return;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01d      	beq.n	800572e <ENT_SoundOff+0x4a>

    __HAL_TIM_SET_CLOCKDIVISION(&htim1, freqToPeriod(ENT_SOUND_UNDEFINED)); // switch to 1kHz period for consistency
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <ENT_SoundOff+0x54>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <ENT_SoundOff+0x54>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	2000      	movs	r0, #0
 8005704:	f000 f81a 	bl	800573c <freqToPeriod>
 8005708:	4601      	mov	r1, r0
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <ENT_SoundOff+0x54>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <ENT_SoundOff+0x54>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	2000      	movs	r0, #0
 800571a:	f000 f80f 	bl	800573c <freqToPeriod>
 800571e:	4602      	mov	r2, r0
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <ENT_SoundOff+0x54>)
 8005722:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8005724:	2100      	movs	r1, #0
 8005726:	4804      	ldr	r0, [pc, #16]	; (8005738 <ENT_SoundOff+0x54>)
 8005728:	f7fc fe60 	bl	80023ec <HAL_TIM_PWM_Stop>
 800572c:	e000      	b.n	8005730 <ENT_SoundOff+0x4c>
    if (!entCtrl) return;
 800572e:	bf00      	nop
}
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200001b0 	.word	0x200001b0

0800573c <freqToPeriod>:

static uint32_t freqToPeriod(const EntSoundFrequency freq) {
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
    switch (freq) {
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d816      	bhi.n	800577a <freqToPeriod+0x3e>
 800574c:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <freqToPeriod+0x18>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	08005775 	.word	0x08005775
 8005758:	08005765 	.word	0x08005765
 800575c:	0800576b 	.word	0x0800576b
 8005760:	08005771 	.word	0x08005771
    case ENT_SOUND_START: return TIM_CLOCKDIVISION_DIV2;
 8005764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005768:	e007      	b.n	800577a <freqToPeriod+0x3e>
    case ENT_SOUND_PRESSED: return TIM_CLOCKDIVISION_DIV4;
 800576a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800576e:	e004      	b.n	800577a <freqToPeriod+0x3e>
    case ENT_SOUND_FALSE_START: return TIM_CLOCKDIVISION_DIV1;
 8005770:	2300      	movs	r3, #0
 8005772:	e002      	b.n	800577a <freqToPeriod+0x3e>
    case ENT_SOUND_UNDEFINED: return TIM_CLOCKDIVISION_DIV2; // Undefined means no sound output but timer can also be used for start signal PWM generation
 8005774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005778:	e7ff      	b.n	800577a <freqToPeriod+0x3e>
    }

}
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <sendCmd>:
extern SPI_HandleTypeDef hspi1;

static void sendInitSequence(LcdCtrl* lcdctrl);
static void fillWithColor(LcdCtrl* lcdctrl, uint16_t color, uint32_t pixelsCount);

static void sendCmd(uint8_t cmd) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	71fb      	strb	r3, [r7, #7]
    switchToCommands();
 800578e:	2200      	movs	r2, #0
 8005790:	2110      	movs	r1, #16
 8005792:	480b      	ldr	r0, [pc, #44]	; (80057c0 <sendCmd+0x3c>)
 8005794:	f7fa ffdd 	bl	8000752 <HAL_GPIO_WritePin>
    selectDisplay();
 8005798:	2200      	movs	r2, #0
 800579a:	2101      	movs	r1, #1
 800579c:	4808      	ldr	r0, [pc, #32]	; (80057c0 <sendCmd+0x3c>)
 800579e:	f7fa ffd8 	bl	8000752 <HAL_GPIO_WritePin>
//    LL_SPI_TransmitData8(SPI1, cmd);
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 1);
 80057a2:	1df9      	adds	r1, r7, #7
 80057a4:	2301      	movs	r3, #1
 80057a6:	2201      	movs	r2, #1
 80057a8:	4806      	ldr	r0, [pc, #24]	; (80057c4 <sendCmd+0x40>)
 80057aa:	f7fc fbd2 	bl	8001f52 <HAL_SPI_Transmit>
    unselectDisplay();
 80057ae:	2201      	movs	r2, #1
 80057b0:	2101      	movs	r1, #1
 80057b2:	4803      	ldr	r0, [pc, #12]	; (80057c0 <sendCmd+0x3c>)
 80057b4:	f7fa ffcd 	bl	8000752 <HAL_GPIO_WritePin>
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40010800 	.word	0x40010800
 80057c4:	200001f0 	.word	0x200001f0

080057c8 <sendData>:

static void sendData(uint8_t data) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	71fb      	strb	r3, [r7, #7]
    switchToData();
 80057d2:	2201      	movs	r2, #1
 80057d4:	2110      	movs	r1, #16
 80057d6:	480b      	ldr	r0, [pc, #44]	; (8005804 <sendData+0x3c>)
 80057d8:	f7fa ffbb 	bl	8000752 <HAL_GPIO_WritePin>
    selectDisplay();
 80057dc:	2200      	movs	r2, #0
 80057de:	2101      	movs	r1, #1
 80057e0:	4808      	ldr	r0, [pc, #32]	; (8005804 <sendData+0x3c>)
 80057e2:	f7fa ffb6 	bl	8000752 <HAL_GPIO_WritePin>
//    LL_SPI_TransmitData8(SPI1, data);
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 80057e6:	1df9      	adds	r1, r7, #7
 80057e8:	2301      	movs	r3, #1
 80057ea:	2201      	movs	r2, #1
 80057ec:	4806      	ldr	r0, [pc, #24]	; (8005808 <sendData+0x40>)
 80057ee:	f7fc fbb0 	bl	8001f52 <HAL_SPI_Transmit>
    unselectDisplay();
 80057f2:	2201      	movs	r2, #1
 80057f4:	2101      	movs	r1, #1
 80057f6:	4803      	ldr	r0, [pc, #12]	; (8005804 <sendData+0x3c>)
 80057f8:	f7fa ffab 	bl	8000752 <HAL_GPIO_WritePin>
}
 80057fc:	bf00      	nop
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40010800 	.word	0x40010800
 8005808:	200001f0 	.word	0x200001f0

0800580c <LCD_Init>:

void LCD_Init(LcdCtrl* lcdctrl) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
    if (!lcdctrl) return;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d019      	beq.n	800584e <LCD_Init+0x42>

    lcdctrl->width = DISPLAY_WIDTH;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005820:	801a      	strh	r2, [r3, #0]
    lcdctrl->height = DISPLAY_HEIGHT;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	22f0      	movs	r2, #240	; 0xf0
 8005826:	805a      	strh	r2, [r3, #2]

    HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8005828:	2200      	movs	r2, #0
 800582a:	2101      	movs	r1, #1
 800582c:	480a      	ldr	r0, [pc, #40]	; (8005858 <LCD_Init+0x4c>)
 800582e:	f7fa ff90 	bl	8000752 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8005832:	2200      	movs	r2, #0
 8005834:	2101      	movs	r1, #1
 8005836:	4809      	ldr	r0, [pc, #36]	; (800585c <LCD_Init+0x50>)
 8005838:	f7fa ff8b 	bl	8000752 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800583c:	2201      	movs	r2, #1
 800583e:	2102      	movs	r1, #2
 8005840:	4806      	ldr	r0, [pc, #24]	; (800585c <LCD_Init+0x50>)
 8005842:	f7fa ff86 	bl	8000752 <HAL_GPIO_WritePin>

    sendInitSequence(lcdctrl);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f93e 	bl	8005ac8 <sendInitSequence>
 800584c:	e000      	b.n	8005850 <LCD_Init+0x44>
    if (!lcdctrl) return;
 800584e:	bf00      	nop
//    LCD_ChangeRotation(lcdctrl, LCD_ORIENTATION_DEFAULT);
}
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40010c00 	.word	0x40010c00
 800585c:	40010800 	.word	0x40010800

08005860 <LCD_SetArea>:
//
//    sendCmd(ILI9341_CMD_Memory_Access_Control);
//    sendData(command);
//}

void LCD_SetArea(LcdCtrl* lcdctrl, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	4608      	mov	r0, r1
 800586a:	4611      	mov	r1, r2
 800586c:	461a      	mov	r2, r3
 800586e:	4603      	mov	r3, r0
 8005870:	817b      	strh	r3, [r7, #10]
 8005872:	460b      	mov	r3, r1
 8005874:	813b      	strh	r3, [r7, #8]
 8005876:	4613      	mov	r3, r2
 8005878:	80fb      	strh	r3, [r7, #6]
    if (!lcdctrl) return;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d04c      	beq.n	800591a <LCD_SetArea+0xba>

    if (x1 < 0) x1 = 0;
    if (x2 >= lcdctrl->width) x2 = lcdctrl->width - 1;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	88fa      	ldrh	r2, [r7, #6]
 8005886:	429a      	cmp	r2, r3
 8005888:	d303      	bcc.n	8005892 <LCD_SetArea+0x32>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	3b01      	subs	r3, #1
 8005890:	80fb      	strh	r3, [r7, #6]
    if (y1 < 0) y1 = 0;
    if (y2 >= lcdctrl->height) y2 = lcdctrl->height - 1;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	885b      	ldrh	r3, [r3, #2]
 8005896:	8b3a      	ldrh	r2, [r7, #24]
 8005898:	429a      	cmp	r2, r3
 800589a:	d303      	bcc.n	80058a4 <LCD_SetArea+0x44>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	885b      	ldrh	r3, [r3, #2]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	833b      	strh	r3, [r7, #24]

    sendCmd(ILI9341_CMD_Column_Address_Set);
 80058a4:	232a      	movs	r3, #42	; 0x2a
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff ff6b 	bl	8005784 <sendCmd>
    sendData(x1 >> 8);
 80058ae:	897b      	ldrh	r3, [r7, #10]
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff ff86 	bl	80057c8 <sendData>
    sendData(x1);
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff ff81 	bl	80057c8 <sendData>
    sendData(x2 >> 8);
 80058c6:	88fb      	ldrh	r3, [r7, #6]
 80058c8:	0a1b      	lsrs	r3, r3, #8
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff ff7a 	bl	80057c8 <sendData>
    sendData(x2);
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff ff75 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Page_Address_Set);
 80058de:	232b      	movs	r3, #43	; 0x2b
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff ff4e 	bl	8005784 <sendCmd>
    sendData(y1 >> 8);
 80058e8:	893b      	ldrh	r3, [r7, #8]
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff ff69 	bl	80057c8 <sendData>
    sendData(y1);
 80058f6:	893b      	ldrh	r3, [r7, #8]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff64 	bl	80057c8 <sendData>
    sendData(y2 >> 8);
 8005900:	8b3b      	ldrh	r3, [r7, #24]
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	b29b      	uxth	r3, r3
 8005906:	b2db      	uxtb	r3, r3
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff ff5d 	bl	80057c8 <sendData>
    sendData(y2);
 800590e:	8b3b      	ldrh	r3, [r7, #24]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff ff58 	bl	80057c8 <sendData>
 8005918:	e000      	b.n	800591c <LCD_SetArea+0xbc>
    if (!lcdctrl) return;
 800591a:	bf00      	nop
}
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <fillWithColor>:

static void fillWithColor(LcdCtrl* lcdctrl, uint16_t color, uint32_t pixelsCount) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	460b      	mov	r3, r1
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	817b      	strh	r3, [r7, #10]
    {
        const uint32_t maxSize = lcdctrl->width * lcdctrl->height;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	885b      	ldrh	r3, [r3, #2]
 800593c:	fb03 f302 	mul.w	r3, r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        if (pixelsCount > maxSize) pixelsCount = maxSize;
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	429a      	cmp	r2, r3
 8005948:	d901      	bls.n	800594e <fillWithColor+0x2a>
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	607b      	str	r3, [r7, #4]
    }

    sendCmd(ILI9341_CMD_Memory_Write);
 800594e:	232c      	movs	r3, #44	; 0x2c
 8005950:	b2db      	uxtb	r3, r3
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ff16 	bl	8005784 <sendCmd>

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8005958:	2201      	movs	r2, #1
 800595a:	2110      	movs	r1, #16
 800595c:	4818      	ldr	r0, [pc, #96]	; (80059c0 <fillWithColor+0x9c>)
 800595e:	f7fa fef8 	bl	8000752 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8005962:	2200      	movs	r2, #0
 8005964:	2101      	movs	r1, #1
 8005966:	4816      	ldr	r0, [pc, #88]	; (80059c0 <fillWithColor+0x9c>)
 8005968:	f7fa fef3 	bl	8000752 <HAL_GPIO_WritePin>

    uint8_t c1 = (uint8_t) (color >> 8);
 800596c:	897b      	ldrh	r3, [r7, #10]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	b29b      	uxth	r3, r3
 8005972:	b2db      	uxtb	r3, r3
 8005974:	75fb      	strb	r3, [r7, #23]
    uint8_t c2 = (uint8_t) color;
 8005976:	897b      	ldrh	r3, [r7, #10]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	75bb      	strb	r3, [r7, #22]

    for (uint32_t i = 0; i < pixelsCount; ++i) {
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e010      	b.n	80059a4 <fillWithColor+0x80>
//        LL_SPI_TransmitData8(SPI1, c1);
//        LL_SPI_TransmitData8(SPI1, c2);
        HAL_SPI_Transmit(&hspi1, &c1, 1, 1);
 8005982:	f107 0117 	add.w	r1, r7, #23
 8005986:	2301      	movs	r3, #1
 8005988:	2201      	movs	r2, #1
 800598a:	480e      	ldr	r0, [pc, #56]	; (80059c4 <fillWithColor+0xa0>)
 800598c:	f7fc fae1 	bl	8001f52 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&hspi1, &c2, 1, 1);
 8005990:	f107 0116 	add.w	r1, r7, #22
 8005994:	2301      	movs	r3, #1
 8005996:	2201      	movs	r2, #1
 8005998:	480a      	ldr	r0, [pc, #40]	; (80059c4 <fillWithColor+0xa0>)
 800599a:	f7fc fada 	bl	8001f52 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < pixelsCount; ++i) {
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	3301      	adds	r3, #1
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d3ea      	bcc.n	8005982 <fillWithColor+0x5e>
    }

    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80059ac:	2201      	movs	r2, #1
 80059ae:	2101      	movs	r1, #1
 80059b0:	4803      	ldr	r0, [pc, #12]	; (80059c0 <fillWithColor+0x9c>)
 80059b2:	f7fa fece 	bl	8000752 <HAL_GPIO_WritePin>
}
 80059b6:	bf00      	nop
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40010800 	.word	0x40010800
 80059c4:	200001f0 	.word	0x200001f0

080059c8 <LCD_FillScreen>:

void LCD_FillScreen(LcdCtrl* lcdctrl, uint16_t color) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
    if (!lcdctrl) return;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <LCD_FillScreen+0x2e>

    LCD_DrawFilledRectangle(lcdctrl, 0, 0, lcdctrl->width, lcdctrl->height, color);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8819      	ldrh	r1, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	885b      	ldrh	r3, [r3, #2]
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	9201      	str	r2, [sp, #4]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	460b      	mov	r3, r1
 80059ea:	2200      	movs	r2, #0
 80059ec:	2100      	movs	r1, #0
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f805 	bl	80059fe <LCD_DrawFilledRectangle>
 80059f4:	e000      	b.n	80059f8 <LCD_FillScreen+0x30>
    if (!lcdctrl) return;
 80059f6:	bf00      	nop
}
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle(LcdCtrl* lcdctrl, int16_t x, int16_t y, uint16_t width, uint16_t height, uint16_t color) {
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b088      	sub	sp, #32
 8005a02:	af02      	add	r7, sp, #8
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	4608      	mov	r0, r1
 8005a08:	4611      	mov	r1, r2
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	817b      	strh	r3, [r7, #10]
 8005a10:	460b      	mov	r3, r1
 8005a12:	813b      	strh	r3, [r7, #8]
 8005a14:	4613      	mov	r3, r2
 8005a16:	80fb      	strh	r3, [r7, #6]
    if (!lcdctrl) return;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d04c      	beq.n	8005ab8 <LCD_DrawFilledRectangle+0xba>

    if (width <= 0 || height <= 0) return; // can't draw zero-size rectangular
 8005a1e:	88fb      	ldrh	r3, [r7, #6]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d04b      	beq.n	8005abc <LCD_DrawFilledRectangle+0xbe>
 8005a24:	8c3b      	ldrh	r3, [r7, #32]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d048      	beq.n	8005abc <LCD_DrawFilledRectangle+0xbe>
    if (x >= lcdctrl->width || y >= lcdctrl->height) return; // top left point is outside of screen area, can't draw in any way
 8005a2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	8812      	ldrh	r2, [r2, #0]
 8005a32:	4293      	cmp	r3, r2
 8005a34:	da44      	bge.n	8005ac0 <LCD_DrawFilledRectangle+0xc2>
 8005a36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	8852      	ldrh	r2, [r2, #2]
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	da3e      	bge.n	8005ac0 <LCD_DrawFilledRectangle+0xc2>

    // even if x or y are negative, calculate rectangle from that point
    uint16_t x2 = x + width;
 8005a42:	897a      	ldrh	r2, [r7, #10]
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	4413      	add	r3, r2
 8005a48:	82fb      	strh	r3, [r7, #22]
    uint16_t y2 = y + height;
 8005a4a:	893a      	ldrh	r2, [r7, #8]
 8005a4c:	8c3b      	ldrh	r3, [r7, #32]
 8005a4e:	4413      	add	r3, r2
 8005a50:	82bb      	strh	r3, [r7, #20]

    if (x < 0) x = 0;
 8005a52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	da01      	bge.n	8005a5e <LCD_DrawFilledRectangle+0x60>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	817b      	strh	r3, [r7, #10]
    if (y < 0) y = 0;
 8005a5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	da01      	bge.n	8005a6a <LCD_DrawFilledRectangle+0x6c>
 8005a66:	2300      	movs	r3, #0
 8005a68:	813b      	strh	r3, [r7, #8]
    if (x2 >= lcdctrl->width) x2 = lcdctrl->width - 1;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	8afa      	ldrh	r2, [r7, #22]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d303      	bcc.n	8005a7c <LCD_DrawFilledRectangle+0x7e>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	82fb      	strh	r3, [r7, #22]
    if (y2 >= lcdctrl->height) y2 = lcdctrl->height - 1;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	885b      	ldrh	r3, [r3, #2]
 8005a80:	8aba      	ldrh	r2, [r7, #20]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d303      	bcc.n	8005a8e <LCD_DrawFilledRectangle+0x90>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	885b      	ldrh	r3, [r3, #2]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	82bb      	strh	r3, [r7, #20]

    uint32_t size = width * height;
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	8c3a      	ldrh	r2, [r7, #32]
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	613b      	str	r3, [r7, #16]
    if (size < 0) size = -size;

    LCD_SetArea(lcdctrl, x, y, x2, y2);
 8005a98:	8979      	ldrh	r1, [r7, #10]
 8005a9a:	893a      	ldrh	r2, [r7, #8]
 8005a9c:	8af8      	ldrh	r0, [r7, #22]
 8005a9e:	8abb      	ldrh	r3, [r7, #20]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fedb 	bl	8005860 <LCD_SetArea>
    fillWithColor(lcdctrl, color, size);
 8005aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff ff37 	bl	8005924 <fillWithColor>
 8005ab6:	e004      	b.n	8005ac2 <LCD_DrawFilledRectangle+0xc4>
    if (!lcdctrl) return;
 8005ab8:	bf00      	nop
 8005aba:	e002      	b.n	8005ac2 <LCD_DrawFilledRectangle+0xc4>
    if (width <= 0 || height <= 0) return; // can't draw zero-size rectangular
 8005abc:	bf00      	nop
 8005abe:	e000      	b.n	8005ac2 <LCD_DrawFilledRectangle+0xc4>
    if (x >= lcdctrl->width || y >= lcdctrl->height) return; // top left point is outside of screen area, can't draw in any way
 8005ac0:	bf00      	nop
}
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <sendInitSequence>:
    if (!lcdctrl) return;


}

static void sendInitSequence(LcdCtrl* lcdctrl) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
    sendCmd(ILI9341_CMD_Software_Reset);
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fe55 	bl	8005784 <sendCmd>
    HAL_Delay(1000); // TODO check whether this one is really needed // TODO use device abstraction "singleDelay()" call // TODO represent display init as FSM
 8005ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ade:	f7fa fb97 	bl	8000210 <HAL_Delay>

    sendCmd(0xef); // undocumented
 8005ae2:	20ef      	movs	r0, #239	; 0xef
 8005ae4:	f7ff fe4e 	bl	8005784 <sendCmd>
    sendData(0x03);
 8005ae8:	2003      	movs	r0, #3
 8005aea:	f7ff fe6d 	bl	80057c8 <sendData>
    sendData(0x80);
 8005aee:	2080      	movs	r0, #128	; 0x80
 8005af0:	f7ff fe6a 	bl	80057c8 <sendData>
    sendData(0x02);
 8005af4:	2002      	movs	r0, #2
 8005af6:	f7ff fe67 	bl	80057c8 <sendData>

    sendCmd(0xca); // undocumented
 8005afa:	20ca      	movs	r0, #202	; 0xca
 8005afc:	f7ff fe42 	bl	8005784 <sendCmd>
    sendData(0xc3);
 8005b00:	20c3      	movs	r0, #195	; 0xc3
 8005b02:	f7ff fe61 	bl	80057c8 <sendData>
    sendData(0x08);
 8005b06:	2008      	movs	r0, #8
 8005b08:	f7ff fe5e 	bl	80057c8 <sendData>
    sendData(0x50);
 8005b0c:	2050      	movs	r0, #80	; 0x50
 8005b0e:	f7ff fe5b 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Power_Control_A);
 8005b12:	23cb      	movs	r3, #203	; 0xcb
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fe34 	bl	8005784 <sendCmd>
    sendData(0x39);
 8005b1c:	2039      	movs	r0, #57	; 0x39
 8005b1e:	f7ff fe53 	bl	80057c8 <sendData>
    sendData(0x2C);
 8005b22:	202c      	movs	r0, #44	; 0x2c
 8005b24:	f7ff fe50 	bl	80057c8 <sendData>
    sendData(0x00);
 8005b28:	2000      	movs	r0, #0
 8005b2a:	f7ff fe4d 	bl	80057c8 <sendData>
    sendData(0x34);
 8005b2e:	2034      	movs	r0, #52	; 0x34
 8005b30:	f7ff fe4a 	bl	80057c8 <sendData>
    sendData(0x02);
 8005b34:	2002      	movs	r0, #2
 8005b36:	f7ff fe47 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Power_Control_B);
 8005b3a:	23cf      	movs	r3, #207	; 0xcf
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fe20 	bl	8005784 <sendCmd>
    sendData(0x00);
 8005b44:	2000      	movs	r0, #0
 8005b46:	f7ff fe3f 	bl	80057c8 <sendData>
    sendData(0xc1); // default 0x81 - PCEQ: PC and EQ operation for power saving -  1:enable this function
 8005b4a:	20c1      	movs	r0, #193	; 0xc1
 8005b4c:	f7ff fe3c 	bl	80057c8 <sendData>
    sendData(0x30);
 8005b50:	2030      	movs	r0, #48	; 0x30
 8005b52:	f7ff fe39 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Driver_Timing_Control_A);
 8005b56:	23e8      	movs	r3, #232	; 0xe8
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff fe12 	bl	8005784 <sendCmd>
    sendData(0x85); // def 54
 8005b60:	2085      	movs	r0, #133	; 0x85
 8005b62:	f7ff fe31 	bl	80057c8 <sendData>
    sendData(0x00); // def 11
 8005b66:	2000      	movs	r0, #0
 8005b68:	f7ff fe2e 	bl	80057c8 <sendData>
    sendData(0x78); // def 7a
 8005b6c:	2078      	movs	r0, #120	; 0x78
 8005b6e:	f7ff fe2b 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Driver_Timing_Control_B);
 8005b72:	23ea      	movs	r3, #234	; 0xea
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fe04 	bl	8005784 <sendCmd>
    sendData(0x00); // def 66
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f7ff fe23 	bl	80057c8 <sendData>
    sendData(0x00);
 8005b82:	2000      	movs	r0, #0
 8005b84:	f7ff fe20 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Power_On_Sequence_Control);
 8005b88:	23ed      	movs	r3, #237	; 0xed
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fdf9 	bl	8005784 <sendCmd>
    sendData(0x64); // def 55
 8005b92:	2064      	movs	r0, #100	; 0x64
 8005b94:	f7ff fe18 	bl	80057c8 <sendData>
    sendData(0x03); // def 01
 8005b98:	2003      	movs	r0, #3
 8005b9a:	f7ff fe15 	bl	80057c8 <sendData>
    sendData(0x12); // def 23
 8005b9e:	2012      	movs	r0, #18
 8005ba0:	f7ff fe12 	bl	80057c8 <sendData>
    sendData(0x81); // def 1
 8005ba4:	2081      	movs	r0, #129	; 0x81
 8005ba6:	f7ff fe0f 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Pump_Ratio_Control);
 8005baa:	23f7      	movs	r3, #247	; 0xf7
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff fde8 	bl	8005784 <sendCmd>
    sendData(0x20); // def 10
 8005bb4:	2020      	movs	r0, #32
 8005bb6:	f7ff fe07 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Power_Control_1);
 8005bba:	23c0      	movs	r3, #192	; 0xc0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff fde0 	bl	8005784 <sendCmd>
    sendData(0x23); // def 21(4.5V) while 23 -> 4.6V
 8005bc4:	2023      	movs	r0, #35	; 0x23
 8005bc6:	f7ff fdff 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Power_Control_2);
 8005bca:	23c1      	movs	r3, #193	; 0xc1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff fdd8 	bl	8005784 <sendCmd>
    sendData(0x10);
 8005bd4:	2010      	movs	r0, #16
 8005bd6:	f7ff fdf7 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_VCOM_Control_1);
 8005bda:	23c5      	movs	r3, #197	; 0xc5
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff fdd0 	bl	8005784 <sendCmd>
    sendData(0x3E); // def 31
 8005be4:	203e      	movs	r0, #62	; 0x3e
 8005be6:	f7ff fdef 	bl	80057c8 <sendData>
    sendData(0x28); // def 3c
 8005bea:	2028      	movs	r0, #40	; 0x28
 8005bec:	f7ff fdec 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_VCOM_Control_2);
 8005bf0:	23c7      	movs	r3, #199	; 0xc7
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fdc5 	bl	8005784 <sendCmd>
    sendData(0x86); // def c0, 86 -> VMH=58 VML=58
 8005bfa:	2086      	movs	r0, #134	; 0x86
 8005bfc:	f7ff fde4 	bl	80057c8 <sendData>

    // change from RGB to BGR is here
    sendCmd(ILI9341_CMD_Memory_Access_Control);
 8005c00:	2336      	movs	r3, #54	; 0x36
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff fdbd 	bl	8005784 <sendCmd>
    sendData(BIT_MY_ROW_ACCESS_ORDER | BIT_MX_COLUMN_ACCESS_ORDER | BIT_MV_ROW_COLUMN_EXCHANGE
 8005c0a:	20e8      	movs	r0, #232	; 0xe8
 8005c0c:	f7ff fddc 	bl	80057c8 <sendData>
            | DISPLAY_COLOR_SPACE); // def 00, MX = 1, BGR = 1 !!! Not RGB for some reason !!!

    sendCmd(ILI9341_CMD_COLMOD_Pixel_Format_Set);
 8005c10:	233a      	movs	r3, #58	; 0x3a
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fdb5 	bl	8005784 <sendCmd>
    sendData(0x55); // def 66(18 bits/pixel), while 55 -> 16 bits/pixel
 8005c1a:	2055      	movs	r0, #85	; 0x55
 8005c1c:	f7ff fdd4 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Frame_Rate_Control_In_Normal_Mode_Full_Colors);
 8005c20:	23b1      	movs	r3, #177	; 0xb1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fdad 	bl	8005784 <sendCmd>
    sendData(0x00);
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	f7ff fdcc 	bl	80057c8 <sendData>
    sendData(0x18); // def 1b(70Hz), while 18 -> 79
 8005c30:	2018      	movs	r0, #24
 8005c32:	f7ff fdc9 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Display_Function_Control);
 8005c36:	23b6      	movs	r3, #182	; 0xb6
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fda2 	bl	8005784 <sendCmd>
    sendData(0x08); // def 0a
 8005c40:	2008      	movs	r0, #8
 8005c42:	f7ff fdc1 	bl	80057c8 <sendData>
    sendData(0x82);
 8005c46:	2082      	movs	r0, #130	; 0x82
 8005c48:	f7ff fdbe 	bl	80057c8 <sendData>
    sendData(0x27);
 8005c4c:	2027      	movs	r0, #39	; 0x27
 8005c4e:	f7ff fdbb 	bl	80057c8 <sendData>
    // may need 4th data

    // TODO check with 0x02 - default value
    sendCmd(ILI9341_CMD_Enable_3G);
 8005c52:	23f2      	movs	r3, #242	; 0xf2
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fd94 	bl	8005784 <sendCmd>
    sendData(0x00); // def 02, this change is very strange, for 02 3 gamma control is also disabled
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	f7ff fdb3 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Gamma_Set);
 8005c62:	2326      	movs	r3, #38	; 0x26
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fd8c 	bl	8005784 <sendCmd>
    sendData(0x01);
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	f7ff fdab 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Positive_Gamma_Correction);
 8005c72:	23e0      	movs	r3, #224	; 0xe0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff fd84 	bl	8005784 <sendCmd>
    sendData(0x0F); // def 08
 8005c7c:	200f      	movs	r0, #15
 8005c7e:	f7ff fda3 	bl	80057c8 <sendData>
    sendData(0x31); // no def
 8005c82:	2031      	movs	r0, #49	; 0x31
 8005c84:	f7ff fda0 	bl	80057c8 <sendData>
    sendData(0x2B); // no def
 8005c88:	202b      	movs	r0, #43	; 0x2b
 8005c8a:	f7ff fd9d 	bl	80057c8 <sendData>
    sendData(0x0C); // def 05
 8005c8e:	200c      	movs	r0, #12
 8005c90:	f7ff fd9a 	bl	80057c8 <sendData>
    sendData(0x0E); // no def
 8005c94:	200e      	movs	r0, #14
 8005c96:	f7ff fd97 	bl	80057c8 <sendData>
    sendData(0x08); // def 09
 8005c9a:	2008      	movs	r0, #8
 8005c9c:	f7ff fd94 	bl	80057c8 <sendData>
    sendData(0x4E); // no def
 8005ca0:	204e      	movs	r0, #78	; 0x4e
 8005ca2:	f7ff fd91 	bl	80057c8 <sendData>
    sendData(0xF1); // no def
 8005ca6:	20f1      	movs	r0, #241	; 0xf1
 8005ca8:	f7ff fd8e 	bl	80057c8 <sendData>
    sendData(0x37); // no def
 8005cac:	2037      	movs	r0, #55	; 0x37
 8005cae:	f7ff fd8b 	bl	80057c8 <sendData>
    sendData(0x07); // def 0b
 8005cb2:	2007      	movs	r0, #7
 8005cb4:	f7ff fd88 	bl	80057c8 <sendData>
    sendData(0x10); // no def
 8005cb8:	2010      	movs	r0, #16
 8005cba:	f7ff fd85 	bl	80057c8 <sendData>
    sendData(0x03); // def 00
 8005cbe:	2003      	movs	r0, #3
 8005cc0:	f7ff fd82 	bl	80057c8 <sendData>
    sendData(0x0E); // no def
 8005cc4:	200e      	movs	r0, #14
 8005cc6:	f7ff fd7f 	bl	80057c8 <sendData>
    sendData(0x09); // no def
 8005cca:	2009      	movs	r0, #9
 8005ccc:	f7ff fd7c 	bl	80057c8 <sendData>
    sendData(0x00); // def 00==
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	f7ff fd79 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Negative_Gamma_Correction);
 8005cd6:	23e1      	movs	r3, #225	; 0xe1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fd52 	bl	8005784 <sendCmd>
    sendData(0x00); // def 08
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f7ff fd71 	bl	80057c8 <sendData>
    sendData(0x0E); // no def
 8005ce6:	200e      	movs	r0, #14
 8005ce8:	f7ff fd6e 	bl	80057c8 <sendData>
    sendData(0x14); // no def
 8005cec:	2014      	movs	r0, #20
 8005cee:	f7ff fd6b 	bl	80057c8 <sendData>
    sendData(0x03); // def 07
 8005cf2:	2003      	movs	r0, #3
 8005cf4:	f7ff fd68 	bl	80057c8 <sendData>
    sendData(0x11); // no def
 8005cf8:	2011      	movs	r0, #17
 8005cfa:	f7ff fd65 	bl	80057c8 <sendData>
    sendData(0x07); // def 05
 8005cfe:	2007      	movs	r0, #7
 8005d00:	f7ff fd62 	bl	80057c8 <sendData>
    sendData(0x31); // no def
 8005d04:	2031      	movs	r0, #49	; 0x31
 8005d06:	f7ff fd5f 	bl	80057c8 <sendData>
    sendData(0xC1); // no def
 8005d0a:	20c1      	movs	r0, #193	; 0xc1
 8005d0c:	f7ff fd5c 	bl	80057c8 <sendData>
    sendData(0x48); // no def
 8005d10:	2048      	movs	r0, #72	; 0x48
 8005d12:	f7ff fd59 	bl	80057c8 <sendData>
    sendData(0x08); // def 04
 8005d16:	2008      	movs	r0, #8
 8005d18:	f7ff fd56 	bl	80057c8 <sendData>
    sendData(0x0F); // no def
 8005d1c:	200f      	movs	r0, #15
 8005d1e:	f7ff fd53 	bl	80057c8 <sendData>
    sendData(0x0C); // def 0f
 8005d22:	200c      	movs	r0, #12
 8005d24:	f7ff fd50 	bl	80057c8 <sendData>
    sendData(0x31); // no def
 8005d28:	2031      	movs	r0, #49	; 0x31
 8005d2a:	f7ff fd4d 	bl	80057c8 <sendData>
    sendData(0x36); // no def
 8005d2e:	2036      	movs	r0, #54	; 0x36
 8005d30:	f7ff fd4a 	bl	80057c8 <sendData>
    sendData(0x0F); // def 0f==
 8005d34:	200f      	movs	r0, #15
 8005d36:	f7ff fd47 	bl	80057c8 <sendData>

    sendCmd(ILI9341_CMD_Sleep_Out);
 8005d3a:	2311      	movs	r3, #17
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fd20 	bl	8005784 <sendCmd>
    HAL_Delay(120);
 8005d44:	2078      	movs	r0, #120	; 0x78
 8005d46:	f7fa fa63 	bl	8000210 <HAL_Delay>

    sendCmd(ILI9341_CMD_Display_ON);
 8005d4a:	2329      	movs	r3, #41	; 0x29
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fd18 	bl	8005784 <sendCmd>
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d60:	f7fa f9f4 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d64:	f000 f824 	bl	8005db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d68:	f000 f962 	bl	8006030 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8005d6c:	f000 fc18 	bl	80065a0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8005d70:	f000 f878 	bl	8005e64 <MX_SPI1_Init>
  MX_TIM1_Init();
 8005d74:	f000 f8ac 	bl	8005ed0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  PlayerLeds_Init(&playerLedsCtrl, &sendPlayerLeds);
 8005d78:	4909      	ldr	r1, [pc, #36]	; (8005da0 <main+0x44>)
 8005d7a:	480a      	ldr	r0, [pc, #40]	; (8005da4 <main+0x48>)
 8005d7c:	f000 fa26 	bl	80061cc <PlayerLeds_Init>

  ENT_Init(&entCtrl);
 8005d80:	4809      	ldr	r0, [pc, #36]	; (8005da8 <main+0x4c>)
 8005d82:	f7ff fc55 	bl	8005630 <ENT_Init>
  ENT_EnableSound(&entCtrl);
 8005d86:	4808      	ldr	r0, [pc, #32]	; (8005da8 <main+0x4c>)
 8005d88:	f7ff fc64 	bl	8005654 <ENT_EnableSound>

  LCD_Init(&mainLcdCtrl);
 8005d8c:	4807      	ldr	r0, [pc, #28]	; (8005dac <main+0x50>)
 8005d8e:	f7ff fd3d 	bl	800580c <LCD_Init>
  LCD_FillScreen(&mainLcdCtrl, LCD_COLOR_WHITE);
 8005d92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d96:	4805      	ldr	r0, [pc, #20]	; (8005dac <main+0x50>)
 8005d98:	f7ff fe16 	bl	80059c8 <LCD_FillScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005d9c:	e7fe      	b.n	8005d9c <main+0x40>
 8005d9e:	bf00      	nop
 8005da0:	0800617d 	.word	0x0800617d
 8005da4:	2000024c 	.word	0x2000024c
 8005da8:	20000248 	.word	0x20000248
 8005dac:	200001ac 	.word	0x200001ac

08005db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b094      	sub	sp, #80	; 0x50
 8005db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dba:	2228      	movs	r2, #40	; 0x28
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f8f2 	bl	8006fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005dc4:	f107 0314 	add.w	r3, r7, #20
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	60da      	str	r2, [r3, #12]
 8005dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
 8005dde:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005dea:	2300      	movs	r3, #0
 8005dec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005dee:	2301      	movs	r3, #1
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005df2:	2302      	movs	r3, #2
 8005df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005dfc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fb fba2 	bl	8001550 <HAL_RCC_OscConfig>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005e12:	f000 f9d5 	bl	80061c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e16:	230f      	movs	r3, #15
 8005e18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	2102      	movs	r1, #2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fb fe0c 	bl	8001a50 <HAL_RCC_ClockConfig>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005e3e:	f000 f9bf 	bl	80061c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005e42:	2310      	movs	r3, #16
 8005e44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fb ff69 	bl	8001d24 <HAL_RCCEx_PeriphCLKConfig>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8005e58:	f000 f9b2 	bl	80061c0 <Error_Handler>
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	3750      	adds	r7, #80	; 0x50
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005e68:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e6a:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <MX_SPI1_Init+0x68>)
 8005e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005e6e:	4b16      	ldr	r3, [pc, #88]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e7c:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e88:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e98:	2208      	movs	r2, #8
 8005e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ea2:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea8:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005eb0:	220a      	movs	r2, #10
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005eb4:	4804      	ldr	r0, [pc, #16]	; (8005ec8 <MX_SPI1_Init+0x64>)
 8005eb6:	f7fb ffeb 	bl	8001e90 <HAL_SPI_Init>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005ec0:	f000 f97e 	bl	80061c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005ec4:	bf00      	nop
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200001f0 	.word	0x200001f0
 8005ecc:	40013000 	.word	0x40013000

08005ed0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b096      	sub	sp, #88	; 0x58
 8005ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ed6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	605a      	str	r2, [r3, #4]
 8005ee0:	609a      	str	r2, [r3, #8]
 8005ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ee4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	609a      	str	r2, [r3, #8]
 8005efa:	60da      	str	r2, [r3, #12]
 8005efc:	611a      	str	r2, [r3, #16]
 8005efe:	615a      	str	r2, [r3, #20]
 8005f00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f02:	1d3b      	adds	r3, r7, #4
 8005f04:	2220      	movs	r2, #32
 8005f06:	2100      	movs	r1, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 f84d 	bl	8006fa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005f0e:	4b46      	ldr	r3, [pc, #280]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f10:	4a46      	ldr	r2, [pc, #280]	; (800602c <MX_TIM1_Init+0x15c>)
 8005f12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8005f14:	4b44      	ldr	r3, [pc, #272]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f16:	2247      	movs	r2, #71	; 0x47
 8005f18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f1a:	4b43      	ldr	r3, [pc, #268]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8005f20:	4b41      	ldr	r3, [pc, #260]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f22:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005f26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8005f28:	4b3f      	ldr	r3, [pc, #252]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005f30:	4b3d      	ldr	r3, [pc, #244]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f36:	4b3c      	ldr	r3, [pc, #240]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005f3c:	483a      	ldr	r0, [pc, #232]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f3e:	f7fc f9c4 	bl	80022ca <HAL_TIM_Base_Init>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005f48:	f000 f93a 	bl	80061c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f56:	4619      	mov	r1, r3
 8005f58:	4833      	ldr	r0, [pc, #204]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f5a:	f7fc fb59 	bl	8002610 <HAL_TIM_ConfigClockSource>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005f64:	f000 f92c 	bl	80061c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005f68:	482f      	ldr	r0, [pc, #188]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f6a:	f7fc f9d9 	bl	8002320 <HAL_TIM_PWM_Init>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005f74:	f000 f924 	bl	80061c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005f80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f84:	4619      	mov	r1, r3
 8005f86:	4828      	ldr	r0, [pc, #160]	; (8006028 <MX_TIM1_Init+0x158>)
 8005f88:	f7fc fe9e 	bl	8002cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8005f92:	f000 f915 	bl	80061c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f96:	2360      	movs	r3, #96	; 0x60
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 249;
 8005f9a:	23f9      	movs	r3, #249	; 0xf9
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005faa:	2300      	movs	r3, #0
 8005fac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4619      	mov	r1, r3
 8005fba:	481b      	ldr	r0, [pc, #108]	; (8006028 <MX_TIM1_Init+0x158>)
 8005fbc:	f7fc fa62 	bl	8002484 <HAL_TIM_PWM_ConfigChannel>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8005fc6:	f000 f8fb 	bl	80061c0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4814      	ldr	r0, [pc, #80]	; (8006028 <MX_TIM1_Init+0x158>)
 8005fd8:	f7fc fa54 	bl	8002484 <HAL_TIM_PWM_ConfigChannel>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8005fe2:	f000 f8ed 	bl	80061c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ffe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006000:	2300      	movs	r3, #0
 8006002:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006004:	1d3b      	adds	r3, r7, #4
 8006006:	4619      	mov	r1, r3
 8006008:	4807      	ldr	r0, [pc, #28]	; (8006028 <MX_TIM1_Init+0x158>)
 800600a:	f7fc fea1 	bl	8002d50 <HAL_TIMEx_ConfigBreakDeadTime>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8006014:	f000 f8d4 	bl	80061c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006018:	4803      	ldr	r0, [pc, #12]	; (8006028 <MX_TIM1_Init+0x158>)
 800601a:	f000 fa11 	bl	8006440 <HAL_TIM_MspPostInit>

}
 800601e:	bf00      	nop
 8006020:	3758      	adds	r7, #88	; 0x58
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200001b0 	.word	0x200001b0
 800602c:	40012c00 	.word	0x40012c00

08006030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006036:	f107 0310 	add.w	r3, r7, #16
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	605a      	str	r2, [r3, #4]
 8006040:	609a      	str	r2, [r3, #8]
 8006042:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006044:	4b48      	ldr	r3, [pc, #288]	; (8006168 <MX_GPIO_Init+0x138>)
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	4a47      	ldr	r2, [pc, #284]	; (8006168 <MX_GPIO_Init+0x138>)
 800604a:	f043 0310 	orr.w	r3, r3, #16
 800604e:	6193      	str	r3, [r2, #24]
 8006050:	4b45      	ldr	r3, [pc, #276]	; (8006168 <MX_GPIO_Init+0x138>)
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800605c:	4b42      	ldr	r3, [pc, #264]	; (8006168 <MX_GPIO_Init+0x138>)
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	4a41      	ldr	r2, [pc, #260]	; (8006168 <MX_GPIO_Init+0x138>)
 8006062:	f043 0320 	orr.w	r3, r3, #32
 8006066:	6193      	str	r3, [r2, #24]
 8006068:	4b3f      	ldr	r3, [pc, #252]	; (8006168 <MX_GPIO_Init+0x138>)
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006074:	4b3c      	ldr	r3, [pc, #240]	; (8006168 <MX_GPIO_Init+0x138>)
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	4a3b      	ldr	r2, [pc, #236]	; (8006168 <MX_GPIO_Init+0x138>)
 800607a:	f043 0304 	orr.w	r3, r3, #4
 800607e:	6193      	str	r3, [r2, #24]
 8006080:	4b39      	ldr	r3, [pc, #228]	; (8006168 <MX_GPIO_Init+0x138>)
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800608c:	4b36      	ldr	r3, [pc, #216]	; (8006168 <MX_GPIO_Init+0x138>)
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	4a35      	ldr	r2, [pc, #212]	; (8006168 <MX_GPIO_Init+0x138>)
 8006092:	f043 0308 	orr.w	r3, r3, #8
 8006096:	6193      	str	r3, [r2, #24]
 8006098:	4b33      	ldr	r3, [pc, #204]	; (8006168 <MX_GPIO_Init+0x138>)
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	603b      	str	r3, [r7, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET);
 80060a4:	2200      	movs	r2, #0
 80060a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060aa:	4830      	ldr	r0, [pc, #192]	; (800616c <MX_GPIO_Init+0x13c>)
 80060ac:	f7fa fb51 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80060b0:	2200      	movs	r2, #0
 80060b2:	2113      	movs	r1, #19
 80060b4:	482e      	ldr	r0, [pc, #184]	; (8006170 <MX_GPIO_Init+0x140>)
 80060b6:	f7fa fb4c 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|BuzzerEnable_Pin|EXTRA_TICK_Pin, GPIO_PIN_RESET);
 80060ba:	2200      	movs	r2, #0
 80060bc:	2131      	movs	r1, #49	; 0x31
 80060be:	482d      	ldr	r0, [pc, #180]	; (8006174 <MX_GPIO_Init+0x144>)
 80060c0:	f7fa fb47 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueLed_Pin */
  GPIO_InitStruct.Pin = BlueLed_Pin;
 80060c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060ca:	2301      	movs	r3, #1
 80060cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060d2:	2302      	movs	r3, #2
 80060d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BlueLed_GPIO_Port, &GPIO_InitStruct);
 80060d6:	f107 0310 	add.w	r3, r7, #16
 80060da:	4619      	mov	r1, r3
 80060dc:	4823      	ldr	r0, [pc, #140]	; (800616c <MX_GPIO_Init+0x13c>)
 80060de:	f7fa f9c7 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RESET_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RESET_Pin|LCD_DC_Pin;
 80060e2:	2313      	movs	r3, #19
 80060e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060e6:	2301      	movs	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ee:	2302      	movs	r3, #2
 80060f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f2:	f107 0310 	add.w	r3, r7, #16
 80060f6:	4619      	mov	r1, r3
 80060f8:	481d      	ldr	r0, [pc, #116]	; (8006170 <MX_GPIO_Init+0x140>)
 80060fa:	f7fa f9b9 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin EXTRA_TICK_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|EXTRA_TICK_Pin;
 80060fe:	2321      	movs	r3, #33	; 0x21
 8006100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006102:	2301      	movs	r3, #1
 8006104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006106:	2300      	movs	r3, #0
 8006108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800610a:	2302      	movs	r3, #2
 800610c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800610e:	f107 0310 	add.w	r3, r7, #16
 8006112:	4619      	mov	r1, r3
 8006114:	4817      	ldr	r0, [pc, #92]	; (8006174 <MX_GPIO_Init+0x144>)
 8006116:	f7fa f9ab 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin|Button3_Pin;
 800611a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800611e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006120:	4b15      	ldr	r3, [pc, #84]	; (8006178 <MX_GPIO_Init+0x148>)
 8006122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006124:	2301      	movs	r3, #1
 8006126:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006128:	f107 0310 	add.w	r3, r7, #16
 800612c:	4619      	mov	r1, r3
 800612e:	4811      	ldr	r0, [pc, #68]	; (8006174 <MX_GPIO_Init+0x144>)
 8006130:	f7fa f99e 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pin : BuzzerEnable_Pin */
  GPIO_InitStruct.Pin = BuzzerEnable_Pin;
 8006134:	2310      	movs	r3, #16
 8006136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006138:	2311      	movs	r3, #17
 800613a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800613c:	2301      	movs	r3, #1
 800613e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006140:	2302      	movs	r3, #2
 8006142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BuzzerEnable_GPIO_Port, &GPIO_InitStruct);
 8006144:	f107 0310 	add.w	r3, r7, #16
 8006148:	4619      	mov	r1, r3
 800614a:	480a      	ldr	r0, [pc, #40]	; (8006174 <MX_GPIO_Init+0x144>)
 800614c:	f7fa f990 	bl	8000470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006150:	2200      	movs	r2, #0
 8006152:	2100      	movs	r1, #0
 8006154:	2028      	movs	r0, #40	; 0x28
 8006156:	f7fa f954 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800615a:	2028      	movs	r0, #40	; 0x28
 800615c:	f7fa f96d 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 8006160:	bf00      	nop
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40021000 	.word	0x40021000
 800616c:	40011000 	.word	0x40011000
 8006170:	40010800 	.word	0x40010800
 8006174:	40010c00 	.word	0x40010c00
 8006178:	10310000 	.word	0x10310000

0800617c <sendPlayerLeds>:

/* USER CODE BEGIN 4 */

static void sendPlayerLeds(uint8_t data) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(EXTRA_TICK_GPIO_Port, EXTRA_TICK_Pin, GPIO_PIN_RESET);
 8006186:	2200      	movs	r2, #0
 8006188:	2120      	movs	r1, #32
 800618a:	480b      	ldr	r0, [pc, #44]	; (80061b8 <sendPlayerLeds+0x3c>)
 800618c:	f7fa fae1 	bl	8000752 <HAL_GPIO_WritePin>
//    LL_SPI_TransmitData8(SPI1, data);
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8006190:	1df9      	adds	r1, r7, #7
 8006192:	2301      	movs	r3, #1
 8006194:	2201      	movs	r2, #1
 8006196:	4809      	ldr	r0, [pc, #36]	; (80061bc <sendPlayerLeds+0x40>)
 8006198:	f7fb fedb 	bl	8001f52 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(EXTRA_TICK_GPIO_Port, EXTRA_TICK_Pin, GPIO_PIN_SET);
 800619c:	2201      	movs	r2, #1
 800619e:	2120      	movs	r1, #32
 80061a0:	4805      	ldr	r0, [pc, #20]	; (80061b8 <sendPlayerLeds+0x3c>)
 80061a2:	f7fa fad6 	bl	8000752 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EXTRA_TICK_GPIO_Port, EXTRA_TICK_Pin, GPIO_PIN_RESET);
 80061a6:	2200      	movs	r2, #0
 80061a8:	2120      	movs	r1, #32
 80061aa:	4803      	ldr	r0, [pc, #12]	; (80061b8 <sendPlayerLeds+0x3c>)
 80061ac:	f7fa fad1 	bl	8000752 <HAL_GPIO_WritePin>
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40010c00 	.word	0x40010c00
 80061bc:	200001f0 	.word	0x200001f0

080061c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr

080061cc <PlayerLeds_Init>:
#define PLAYER_1_SYSTEM_LED (1 << 4)
#define PLAYER_2_SYSTEM_LED (1 << 5)
#define PLAYER_3_SYSTEM_LED (1 << 6)
#define PLAYER_4_SYSTEM_LED (1 << 7)

void PlayerLeds_Init(PlayerLedsCtrl* ctrl, LedsDataSender sender) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
    if (!ctrl) return;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d006      	beq.n	80061ea <PlayerLeds_Init+0x1e>
    ctrl->sender = sender;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	605a      	str	r2, [r3, #4]

    PlayerLeds_ClearAll(ctrl);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f805 	bl	80061f2 <PlayerLeds_ClearAll>
 80061e8:	e000      	b.n	80061ec <PlayerLeds_Init+0x20>
    if (!ctrl) return;
 80061ea:	bf00      	nop
}
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <PlayerLeds_ClearAll>:

void PlayerLeds_ClearAll(PlayerLedsCtrl* ctrl) {
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
    if (!ctrl) return;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <PlayerLeds_ClearAll+0x2a>

    ctrl->state = 0;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
    if (ctrl->sender) ctrl->sender(ctrl->state);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <PlayerLeds_ClearAll+0x2c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	4610      	mov	r0, r2
 8006218:	4798      	blx	r3
 800621a:	e000      	b.n	800621e <PlayerLeds_ClearAll+0x2c>
    if (!ctrl) return;
 800621c:	bf00      	nop
}
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <PlayerLeds_SetPlayer>:

void PlayerLeds_SetPlayer(PlayerLedsCtrl* ctrl, Players player, PlayerVisMode mode) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
 8006230:	4613      	mov	r3, r2
 8006232:	70bb      	strb	r3, [r7, #2]
    if (!ctrl) return;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d063      	beq.n	8006302 <PlayerLeds_SetPlayer+0xde>
    uint8_t mask;
    if (mode & PLAYER_VIS_ONLY_BUTTON_LIGHT) {
 800623a:	78bb      	ldrb	r3, [r7, #2]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01d      	beq.n	8006280 <PlayerLeds_SetPlayer+0x5c>
        switch (player) {
 8006244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006248:	3301      	adds	r3, #1
 800624a:	2b04      	cmp	r3, #4
 800624c:	d818      	bhi.n	8006280 <PlayerLeds_SetPlayer+0x5c>
 800624e:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <PlayerLeds_SetPlayer+0x30>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	08006281 	.word	0x08006281
 8006258:	08006269 	.word	0x08006269
 800625c:	0800626f 	.word	0x0800626f
 8006260:	08006275 	.word	0x08006275
 8006264:	0800627b 	.word	0x0800627b
        case PLAYER_1:
            mask = PLAYER_1_BUTTON_LED;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
            break;
 800626c:	e008      	b.n	8006280 <PlayerLeds_SetPlayer+0x5c>
        case PLAYER_2:
            mask = PLAYER_2_BUTTON_LED;
 800626e:	2302      	movs	r3, #2
 8006270:	73fb      	strb	r3, [r7, #15]
            break;
 8006272:	e005      	b.n	8006280 <PlayerLeds_SetPlayer+0x5c>
        case PLAYER_3:
            mask = PLAYER_3_BUTTON_LED;
 8006274:	2304      	movs	r3, #4
 8006276:	73fb      	strb	r3, [r7, #15]
            break;
 8006278:	e002      	b.n	8006280 <PlayerLeds_SetPlayer+0x5c>
        case PLAYER_4:
            mask = PLAYER_4_BUTTON_LED;
 800627a:	2308      	movs	r3, #8
 800627c:	73fb      	strb	r3, [r7, #15]
            break;
 800627e:	bf00      	nop
        case PLAYER_UNDEFINED:
            break;
        }
    }

    if (mode & PLAYER_VIS_ONLY_SYSTEM) {
 8006280:	78bb      	ldrb	r3, [r7, #2]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d026      	beq.n	80062d8 <PlayerLeds_SetPlayer+0xb4>
        switch (player) {
 800628a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800628e:	3301      	adds	r3, #1
 8006290:	2b04      	cmp	r3, #4
 8006292:	d821      	bhi.n	80062d8 <PlayerLeds_SetPlayer+0xb4>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <PlayerLeds_SetPlayer+0x78>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062d9 	.word	0x080062d9
 80062a0:	080062b1 	.word	0x080062b1
 80062a4:	080062bb 	.word	0x080062bb
 80062a8:	080062c5 	.word	0x080062c5
 80062ac:	080062cf 	.word	0x080062cf
        case PLAYER_1:
            mask |= PLAYER_1_SYSTEM_LED;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	f043 0310 	orr.w	r3, r3, #16
 80062b6:	73fb      	strb	r3, [r7, #15]
            break;
 80062b8:	e00e      	b.n	80062d8 <PlayerLeds_SetPlayer+0xb4>
        case PLAYER_2:
            mask |= PLAYER_2_SYSTEM_LED;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	f043 0320 	orr.w	r3, r3, #32
 80062c0:	73fb      	strb	r3, [r7, #15]
            break;
 80062c2:	e009      	b.n	80062d8 <PlayerLeds_SetPlayer+0xb4>
        case PLAYER_3:
            mask |= PLAYER_3_SYSTEM_LED;
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ca:	73fb      	strb	r3, [r7, #15]
            break;
 80062cc:	e004      	b.n	80062d8 <PlayerLeds_SetPlayer+0xb4>
        case PLAYER_4:
            mask |= PLAYER_4_SYSTEM_LED;
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062d4:	73fb      	strb	r3, [r7, #15]
            break;
 80062d6:	bf00      	nop
        case PLAYER_UNDEFINED:
            break;
        }
    }

    if (mask) {
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d012      	beq.n	8006304 <PlayerLeds_SetPlayer+0xe0>
        ctrl->state |= mask;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	781a      	ldrb	r2, [r3, #0]
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	701a      	strb	r2, [r3, #0]
        if (ctrl->sender) ctrl->sender(ctrl->state);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <PlayerLeds_SetPlayer+0xe0>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	e000      	b.n	8006304 <PlayerLeds_SetPlayer+0xe0>
    if (!ctrl) return;
 8006302:	bf00      	nop
    }
}
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop

0800630c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006312:	4b15      	ldr	r3, [pc, #84]	; (8006368 <HAL_MspInit+0x5c>)
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	4a14      	ldr	r2, [pc, #80]	; (8006368 <HAL_MspInit+0x5c>)
 8006318:	f043 0301 	orr.w	r3, r3, #1
 800631c:	6193      	str	r3, [r2, #24]
 800631e:	4b12      	ldr	r3, [pc, #72]	; (8006368 <HAL_MspInit+0x5c>)
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	60bb      	str	r3, [r7, #8]
 8006328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800632a:	4b0f      	ldr	r3, [pc, #60]	; (8006368 <HAL_MspInit+0x5c>)
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	4a0e      	ldr	r2, [pc, #56]	; (8006368 <HAL_MspInit+0x5c>)
 8006330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006334:	61d3      	str	r3, [r2, #28]
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <HAL_MspInit+0x5c>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633e:	607b      	str	r3, [r7, #4]
 8006340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8006342:	4b0a      	ldr	r3, [pc, #40]	; (800636c <HAL_MspInit+0x60>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	4a04      	ldr	r2, [pc, #16]	; (800636c <HAL_MspInit+0x60>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800635e:	bf00      	nop
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr
 8006368:	40021000 	.word	0x40021000
 800636c:	40010000 	.word	0x40010000

08006370 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006378:	f107 0310 	add.w	r3, r7, #16
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	605a      	str	r2, [r3, #4]
 8006382:	609a      	str	r2, [r3, #8]
 8006384:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1b      	ldr	r2, [pc, #108]	; (80063f8 <HAL_SPI_MspInit+0x88>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d12f      	bne.n	80063f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006390:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <HAL_SPI_MspInit+0x8c>)
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	4a19      	ldr	r2, [pc, #100]	; (80063fc <HAL_SPI_MspInit+0x8c>)
 8006396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800639a:	6193      	str	r3, [r2, #24]
 800639c:	4b17      	ldr	r3, [pc, #92]	; (80063fc <HAL_SPI_MspInit+0x8c>)
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063a8:	4b14      	ldr	r3, [pc, #80]	; (80063fc <HAL_SPI_MspInit+0x8c>)
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	4a13      	ldr	r2, [pc, #76]	; (80063fc <HAL_SPI_MspInit+0x8c>)
 80063ae:	f043 0304 	orr.w	r3, r3, #4
 80063b2:	6193      	str	r3, [r2, #24]
 80063b4:	4b11      	ldr	r3, [pc, #68]	; (80063fc <HAL_SPI_MspInit+0x8c>)
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80063c0:	23a0      	movs	r3, #160	; 0xa0
 80063c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063c4:	2302      	movs	r3, #2
 80063c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063c8:	2303      	movs	r3, #3
 80063ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063cc:	f107 0310 	add.w	r3, r7, #16
 80063d0:	4619      	mov	r1, r3
 80063d2:	480b      	ldr	r0, [pc, #44]	; (8006400 <HAL_SPI_MspInit+0x90>)
 80063d4:	f7fa f84c 	bl	8000470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80063d8:	2340      	movs	r3, #64	; 0x40
 80063da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063e4:	f107 0310 	add.w	r3, r7, #16
 80063e8:	4619      	mov	r1, r3
 80063ea:	4805      	ldr	r0, [pc, #20]	; (8006400 <HAL_SPI_MspInit+0x90>)
 80063ec:	f7fa f840 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80063f0:	bf00      	nop
 80063f2:	3720      	adds	r7, #32
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40013000 	.word	0x40013000
 80063fc:	40021000 	.word	0x40021000
 8006400:	40010800 	.word	0x40010800

08006404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a09      	ldr	r2, [pc, #36]	; (8006438 <HAL_TIM_Base_MspInit+0x34>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d10b      	bne.n	800642e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006416:	4b09      	ldr	r3, [pc, #36]	; (800643c <HAL_TIM_Base_MspInit+0x38>)
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	4a08      	ldr	r2, [pc, #32]	; (800643c <HAL_TIM_Base_MspInit+0x38>)
 800641c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006420:	6193      	str	r3, [r2, #24]
 8006422:	4b06      	ldr	r3, [pc, #24]	; (800643c <HAL_TIM_Base_MspInit+0x38>)
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40021000 	.word	0x40021000

08006440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006448:	f107 0310 	add.w	r3, r7, #16
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a10      	ldr	r2, [pc, #64]	; (800649c <HAL_TIM_MspPostInit+0x5c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d118      	bne.n	8006492 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <HAL_TIM_MspPostInit+0x60>)
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	4a0e      	ldr	r2, [pc, #56]	; (80064a0 <HAL_TIM_MspPostInit+0x60>)
 8006466:	f043 0304 	orr.w	r3, r3, #4
 800646a:	6193      	str	r3, [r2, #24]
 800646c:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <HAL_TIM_MspPostInit+0x60>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = SOUND_PWM_Pin|GPIO_PIN_9;
 8006478:	f44f 7340 	mov.w	r3, #768	; 0x300
 800647c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647e:	2302      	movs	r3, #2
 8006480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006482:	2302      	movs	r3, #2
 8006484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006486:	f107 0310 	add.w	r3, r7, #16
 800648a:	4619      	mov	r1, r3
 800648c:	4805      	ldr	r0, [pc, #20]	; (80064a4 <HAL_TIM_MspPostInit+0x64>)
 800648e:	f7f9 ffef 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006492:	bf00      	nop
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40021000 	.word	0x40021000
 80064a4:	40010800 	.word	0x40010800

080064a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80064ac:	bf00      	nop
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064b8:	e7fe      	b.n	80064b8 <HardFault_Handler+0x4>

080064ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064ba:	b480      	push	{r7}
 80064bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064be:	e7fe      	b.n	80064be <MemManage_Handler+0x4>

080064c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064c4:	e7fe      	b.n	80064c4 <BusFault_Handler+0x4>

080064c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064c6:	b480      	push	{r7}
 80064c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064ca:	e7fe      	b.n	80064ca <UsageFault_Handler+0x4>

080064cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064d0:	bf00      	nop
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr

080064d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064dc:	bf00      	nop
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr

080064f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064f4:	f7f9 fe70 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064f8:	bf00      	nop
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006500:	4802      	ldr	r0, [pc, #8]	; (800650c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006502:	f7fa fa5e 	bl	80009c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006506:	bf00      	nop
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000518 	.word	0x20000518

08006510 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8006514:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006518:	f7fa f934 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800651c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006520:	f7fa f930 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006524:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006528:	f7fa f92c 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800652c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006530:	f7fa f928 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006534:	bf00      	nop
 8006536:	bd80      	pop	{r7, pc}

08006538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800653c:	4b15      	ldr	r3, [pc, #84]	; (8006594 <SystemInit+0x5c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a14      	ldr	r2, [pc, #80]	; (8006594 <SystemInit+0x5c>)
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006548:	4b12      	ldr	r3, [pc, #72]	; (8006594 <SystemInit+0x5c>)
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4911      	ldr	r1, [pc, #68]	; (8006594 <SystemInit+0x5c>)
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <SystemInit+0x60>)
 8006550:	4013      	ands	r3, r2
 8006552:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006554:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <SystemInit+0x5c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a0e      	ldr	r2, [pc, #56]	; (8006594 <SystemInit+0x5c>)
 800655a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800655e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006562:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006564:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <SystemInit+0x5c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a0a      	ldr	r2, [pc, #40]	; (8006594 <SystemInit+0x5c>)
 800656a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800656e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006570:	4b08      	ldr	r3, [pc, #32]	; (8006594 <SystemInit+0x5c>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4a07      	ldr	r2, [pc, #28]	; (8006594 <SystemInit+0x5c>)
 8006576:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800657a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <SystemInit+0x5c>)
 800657e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006582:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <SystemInit+0x64>)
 8006586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800658a:	609a      	str	r2, [r3, #8]
#endif 
}
 800658c:	bf00      	nop
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr
 8006594:	40021000 	.word	0x40021000
 8006598:	f8ff0000 	.word	0xf8ff0000
 800659c:	e000ed00 	.word	0xe000ed00

080065a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80065a4:	2200      	movs	r2, #0
 80065a6:	4912      	ldr	r1, [pc, #72]	; (80065f0 <MX_USB_DEVICE_Init+0x50>)
 80065a8:	4812      	ldr	r0, [pc, #72]	; (80065f4 <MX_USB_DEVICE_Init+0x54>)
 80065aa:	f7fd ffb5 	bl	8004518 <USBD_Init>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80065b4:	f7ff fe04 	bl	80061c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80065b8:	490f      	ldr	r1, [pc, #60]	; (80065f8 <MX_USB_DEVICE_Init+0x58>)
 80065ba:	480e      	ldr	r0, [pc, #56]	; (80065f4 <MX_USB_DEVICE_Init+0x54>)
 80065bc:	f7fd ffd7 	bl	800456e <USBD_RegisterClass>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80065c6:	f7ff fdfb 	bl	80061c0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80065ca:	490c      	ldr	r1, [pc, #48]	; (80065fc <MX_USB_DEVICE_Init+0x5c>)
 80065cc:	4809      	ldr	r0, [pc, #36]	; (80065f4 <MX_USB_DEVICE_Init+0x54>)
 80065ce:	f7fd ff8d 	bl	80044ec <USBD_CUSTOM_HID_RegisterInterface>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80065d8:	f7ff fdf2 	bl	80061c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80065dc:	4805      	ldr	r0, [pc, #20]	; (80065f4 <MX_USB_DEVICE_Init+0x54>)
 80065de:	f7fd ffdf 	bl	80045a0 <USBD_Start>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80065e8:	f7ff fdea 	bl	80061c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80065ec:	bf00      	nop
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	2000011c 	.word	0x2000011c
 80065f4:	20000254 	.word	0x20000254
 80065f8:	20000008 	.word	0x20000008
 80065fc:	2000010c 	.word	0x2000010c

08006600 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a0d      	ldr	r2, [pc, #52]	; (8006644 <HAL_PCD_MspInit+0x44>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d113      	bne.n	800663a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006612:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <HAL_PCD_MspInit+0x48>)
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <HAL_PCD_MspInit+0x48>)
 8006618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800661c:	61d3      	str	r3, [r2, #28]
 800661e:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <HAL_PCD_MspInit+0x48>)
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800662a:	2200      	movs	r2, #0
 800662c:	2100      	movs	r1, #0
 800662e:	2014      	movs	r0, #20
 8006630:	f7f9 fee7 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006634:	2014      	movs	r0, #20
 8006636:	f7f9 ff00 	bl	800043a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40005c00 	.word	0x40005c00
 8006648:	40021000 	.word	0x40021000

0800664c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f7fd ffe4 	bl	8004630 <USBD_LL_SetupStage>
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	015b      	lsls	r3, r3, #5
 8006688:	4413      	add	r3, r2
 800668a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	4619      	mov	r1, r3
 8006694:	f7fe f817 	bl	80046c6 <USBD_LL_DataOutStage>
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	015b      	lsls	r3, r3, #5
 80066b8:	4413      	add	r3, r2
 80066ba:	333c      	adds	r3, #60	; 0x3c
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	4619      	mov	r1, r3
 80066c2:	f7fe f871 	bl	80047a8 <USBD_LL_DataInStage>
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe f981 	bl	80049e4 <USBD_LL_SOF>
}
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80066f2:	2301      	movs	r3, #1
 80066f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d001      	beq.n	8006702 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80066fe:	f7ff fd5f 	bl	80061c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006708:	7bfa      	ldrb	r2, [r7, #15]
 800670a:	4611      	mov	r1, r2
 800670c:	4618      	mov	r0, r3
 800670e:	f7fe f931 	bl	8004974 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe f8ea 	bl	80048f2 <USBD_LL_Reset>
}
 800671e:	bf00      	nop
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe f92b 	bl	8004992 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <HAL_PCD_SuspendCallback+0x30>)
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	4a03      	ldr	r2, [pc, #12]	; (8006758 <HAL_PCD_SuspendCallback+0x30>)
 800674a:	f043 0306 	orr.w	r3, r3, #6
 800674e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed00 	.word	0xe000ed00

0800675c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe f925 	bl	80049ba <USBD_LL_Resume>
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006780:	4a23      	ldr	r2, [pc, #140]	; (8006810 <USBD_LL_Init+0x98>)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a21      	ldr	r2, [pc, #132]	; (8006810 <USBD_LL_Init+0x98>)
 800678c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006790:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <USBD_LL_Init+0x98>)
 8006792:	4a20      	ldr	r2, [pc, #128]	; (8006814 <USBD_LL_Init+0x9c>)
 8006794:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006796:	4b1e      	ldr	r3, [pc, #120]	; (8006810 <USBD_LL_Init+0x98>)
 8006798:	2208      	movs	r2, #8
 800679a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800679c:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <USBD_LL_Init+0x98>)
 800679e:	2202      	movs	r2, #2
 80067a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80067a2:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <USBD_LL_Init+0x98>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80067a8:	4b19      	ldr	r3, [pc, #100]	; (8006810 <USBD_LL_Init+0x98>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80067ae:	4b18      	ldr	r3, [pc, #96]	; (8006810 <USBD_LL_Init+0x98>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80067b4:	4816      	ldr	r0, [pc, #88]	; (8006810 <USBD_LL_Init+0x98>)
 80067b6:	f7f9 fffd 	bl	80007b4 <HAL_PCD_Init>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80067c0:	f7ff fcfe 	bl	80061c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067ca:	2318      	movs	r3, #24
 80067cc:	2200      	movs	r2, #0
 80067ce:	2100      	movs	r1, #0
 80067d0:	f7fa fe82 	bl	80014d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067da:	2358      	movs	r3, #88	; 0x58
 80067dc:	2200      	movs	r2, #0
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	f7fa fe7a 	bl	80014d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067ea:	2398      	movs	r3, #152	; 0x98
 80067ec:	2200      	movs	r2, #0
 80067ee:	2181      	movs	r1, #129	; 0x81
 80067f0:	f7fa fe72 	bl	80014d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067fa:	23d8      	movs	r3, #216	; 0xd8
 80067fc:	2200      	movs	r2, #0
 80067fe:	2101      	movs	r1, #1
 8006800:	f7fa fe6a 	bl	80014d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000518 	.word	0x20000518
 8006814:	40005c00 	.word	0x40005c00

08006818 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800682e:	4618      	mov	r0, r3
 8006830:	f7fa f8a1 	bl	8000976 <HAL_PCD_Start>
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f934 	bl	8006aa8 <USBD_Get_USB_Status>
 8006840:	4603      	mov	r3, r0
 8006842:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006844:	7bbb      	ldrb	r3, [r7, #14]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	4608      	mov	r0, r1
 8006858:	4611      	mov	r1, r2
 800685a:	461a      	mov	r2, r3
 800685c:	4603      	mov	r3, r0
 800685e:	70fb      	strb	r3, [r7, #3]
 8006860:	460b      	mov	r3, r1
 8006862:	70bb      	strb	r3, [r7, #2]
 8006864:	4613      	mov	r3, r2
 8006866:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006876:	78bb      	ldrb	r3, [r7, #2]
 8006878:	883a      	ldrh	r2, [r7, #0]
 800687a:	78f9      	ldrb	r1, [r7, #3]
 800687c:	f7fa f9d4 	bl	8000c28 <HAL_PCD_EP_Open>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f90e 	bl	8006aa8 <USBD_Get_USB_Status>
 800688c:	4603      	mov	r3, r0
 800688e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006890:	7bbb      	ldrb	r3, [r7, #14]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068b4:	78fa      	ldrb	r2, [r7, #3]
 80068b6:	4611      	mov	r1, r2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fa fa15 	bl	8000ce8 <HAL_PCD_EP_Close>
 80068be:	4603      	mov	r3, r0
 80068c0:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 f8ef 	bl	8006aa8 <USBD_Get_USB_Status>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fa faab 	bl	8000e52 <HAL_PCD_EP_SetStall>
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f8d0 	bl	8006aa8 <USBD_Get_USB_Status>
 8006908:	4603      	mov	r3, r0
 800690a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800690c:	7bbb      	ldrb	r3, [r7, #14]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	460b      	mov	r3, r1
 8006920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006930:	78fa      	ldrb	r2, [r7, #3]
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f7fa fae6 	bl	8000f06 <HAL_PCD_EP_ClrStall>
 800693a:	4603      	mov	r3, r0
 800693c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	4618      	mov	r0, r3
 8006942:	f000 f8b1 	bl	8006aa8 <USBD_Get_USB_Status>
 8006946:	4603      	mov	r3, r0
 8006948:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800694a:	7bbb      	ldrb	r3, [r7, #14]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006966:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800696c:	2b00      	cmp	r3, #0
 800696e:	da08      	bge.n	8006982 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	015b      	lsls	r3, r3, #5
 800697a:	4413      	add	r3, r2
 800697c:	332a      	adds	r3, #42	; 0x2a
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	e008      	b.n	8006994 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	015b      	lsls	r3, r3, #5
 800698c:	4413      	add	r3, r2
 800698e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006992:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069b8:	78fa      	ldrb	r2, [r7, #3]
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fa f90e 	bl	8000bde <HAL_PCD_SetAddress>
 80069c2:	4603      	mov	r3, r0
 80069c4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 f86d 	bl	8006aa8 <USBD_Get_USB_Status>
 80069ce:	4603      	mov	r3, r0
 80069d0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	607a      	str	r2, [r7, #4]
 80069e6:	461a      	mov	r2, r3
 80069e8:	460b      	mov	r3, r1
 80069ea:	72fb      	strb	r3, [r7, #11]
 80069ec:	4613      	mov	r3, r2
 80069ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069fe:	893b      	ldrh	r3, [r7, #8]
 8006a00:	7af9      	ldrb	r1, [r7, #11]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	f7fa f9ec 	bl	8000de0 <HAL_PCD_EP_Transmit>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f84a 	bl	8006aa8 <USBD_Get_USB_Status>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006a18:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	460b      	mov	r3, r1
 8006a30:	72fb      	strb	r3, [r7, #11]
 8006a32:	4613      	mov	r3, r2
 8006a34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a44:	893b      	ldrh	r3, [r7, #8]
 8006a46:	7af9      	ldrb	r1, [r7, #11]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	f7fa f98f 	bl	8000d6c <HAL_PCD_EP_Receive>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 f827 	bl	8006aa8 <USBD_Get_USB_Status>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006a5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006a70:	4b02      	ldr	r3, [pc, #8]	; (8006a7c <USBD_static_malloc+0x14>)
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr
 8006a7c:	2000018c 	.word	0x2000018c

08006a80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr

08006aa8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d817      	bhi.n	8006aec <USBD_Get_USB_Status+0x44>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <USBD_Get_USB_Status+0x1c>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006adb 	.word	0x08006adb
 8006acc:	08006ae1 	.word	0x08006ae1
 8006ad0:	08006ae7 	.word	0x08006ae7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ad8:	e00b      	b.n	8006af2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ada:	2302      	movs	r3, #2
 8006adc:	73fb      	strb	r3, [r7, #15]
    break;
 8006ade:	e008      	b.n	8006af2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ae4:	e005      	b.n	8006af2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8006aea:	e002      	b.n	8006af2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006aec:	2302      	movs	r3, #2
 8006aee:	73fb      	strb	r3, [r7, #15]
    break;
 8006af0:	bf00      	nop
  }
  return usb_status;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr

08006b0e <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006b12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	4603      	mov	r3, r0
 8006b24:	460a      	mov	r2, r1
 8006b26:	71fb      	strb	r3, [r7, #7]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <CUSTOM_HID_OutEvent_FS+0x4c>)
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b32:	60fb      	str	r3, [r7, #12]
//  memcpy(usbData, hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  switch (hhid->Report_buf[0]) {
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d002      	beq.n	8006b42 <CUSTOM_HID_OutEvent_FS+0x26>
 8006b3c:	2b05      	cmp	r3, #5
 8006b3e:	d007      	beq.n	8006b50 <CUSTOM_HID_OutEvent_FS+0x34>
  case 2: HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_SET); break;
  case 5: HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET); break;
  default: break;
 8006b40:	e00d      	b.n	8006b5e <CUSTOM_HID_OutEvent_FS+0x42>
  case 2: HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_SET); break;
 8006b42:	2201      	movs	r2, #1
 8006b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b48:	4808      	ldr	r0, [pc, #32]	; (8006b6c <CUSTOM_HID_OutEvent_FS+0x50>)
 8006b4a:	f7f9 fe02 	bl	8000752 <HAL_GPIO_WritePin>
 8006b4e:	e006      	b.n	8006b5e <CUSTOM_HID_OutEvent_FS+0x42>
  case 5: HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET); break;
 8006b50:	2200      	movs	r2, #0
 8006b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b56:	4805      	ldr	r0, [pc, #20]	; (8006b6c <CUSTOM_HID_OutEvent_FS+0x50>)
 8006b58:	f7f9 fdfb 	bl	8000752 <HAL_GPIO_WritePin>
 8006b5c:	bf00      	nop
  }

  return (USBD_OK);
 8006b5e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20000254 	.word	0x20000254
 8006b6c:	40011000 	.word	0x40011000

08006b70 <handleButtonChange>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

static void handleButtonChange(uint8_t isPressed) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, isPressed ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bf0c      	ite	eq
 8006b80:	2301      	moveq	r3, #1
 8006b82:	2300      	movne	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b8c:	4807      	ldr	r0, [pc, #28]	; (8006bac <handleButtonChange+0x3c>)
 8006b8e:	f7f9 fde0 	bl	8000752 <HAL_GPIO_WritePin>

	dataToSend[1] = isPressed;
 8006b92:	4a07      	ldr	r2, [pc, #28]	; (8006bb0 <handleButtonChange+0x40>)
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	7053      	strb	r3, [r2, #1]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, sizeof(dataToSend));
 8006b98:	2205      	movs	r2, #5
 8006b9a:	4905      	ldr	r1, [pc, #20]	; (8006bb0 <handleButtonChange+0x40>)
 8006b9c:	4805      	ldr	r0, [pc, #20]	; (8006bb4 <handleButtonChange+0x44>)
 8006b9e:	f7fd fbf1 	bl	8004384 <USBD_CUSTOM_HID_SendReport>
}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40011000 	.word	0x40011000
 8006bb0:	20000104 	.word	0x20000104
 8006bb4:	20000254 	.word	0x20000254

08006bb8 <HAL_GPIO_EXTI_Callback>:

#define ACTIVE_BUTTON_PIN (GPIO_PIN_SET)

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	80fb      	strh	r3, [r7, #6]
	if (ACTIVE_BUTTON_PIN == HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin)) {
 8006bc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bc6:	4848      	ldr	r0, [pc, #288]	; (8006ce8 <HAL_GPIO_EXTI_Callback+0x130>)
 8006bc8:	f7f9 fdac 	bl	8000724 <HAL_GPIO_ReadPin>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d117      	bne.n	8006c02 <HAL_GPIO_EXTI_Callback+0x4a>
		handleButtonChange(10);
 8006bd2:	200a      	movs	r0, #10
 8006bd4:	f7ff ffcc 	bl	8006b70 <handleButtonChange>
		PlayerLeds_SetPlayer(&playerLedsCtrl, PLAYER_1, PLAYER_VIS_ONLY_SYSTEM);
 8006bd8:	2202      	movs	r2, #2
 8006bda:	2100      	movs	r1, #0
 8006bdc:	4843      	ldr	r0, [pc, #268]	; (8006cec <HAL_GPIO_EXTI_Callback+0x134>)
 8006bde:	f7ff fb21 	bl	8006224 <PlayerLeds_SetPlayer>
		LCD_DrawFilledRectangle(&mainLcdCtrl, 65, 170, 40, 60, LCD_COLOR_RED);
 8006be2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	233c      	movs	r3, #60	; 0x3c
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	2328      	movs	r3, #40	; 0x28
 8006bee:	22aa      	movs	r2, #170	; 0xaa
 8006bf0:	2141      	movs	r1, #65	; 0x41
 8006bf2:	483f      	ldr	r0, [pc, #252]	; (8006cf0 <HAL_GPIO_EXTI_Callback+0x138>)
 8006bf4:	f7fe ff03 	bl	80059fe <LCD_DrawFilledRectangle>
		ENT_SoundOn(&entCtrl, ENT_SOUND_START);
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	483e      	ldr	r0, [pc, #248]	; (8006cf4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006bfc:	f7fe fd3a 	bl	8005674 <ENT_SoundOn>
		handleButtonChange(0);
		ENT_SoundOff(&entCtrl);
		PlayerLeds_ClearAll(&playerLedsCtrl);
		LCD_DrawFilledRectangle(&mainLcdCtrl, 65, 170, 190, 60, LCD_COLOR_WHITE);
	}
}
 8006c00:	e06e      	b.n	8006ce0 <HAL_GPIO_EXTI_Callback+0x128>
	} else if (ACTIVE_BUTTON_PIN == HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin)) {
 8006c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c06:	4838      	ldr	r0, [pc, #224]	; (8006ce8 <HAL_GPIO_EXTI_Callback+0x130>)
 8006c08:	f7f9 fd8c 	bl	8000724 <HAL_GPIO_ReadPin>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d117      	bne.n	8006c42 <HAL_GPIO_EXTI_Callback+0x8a>
		handleButtonChange(20);
 8006c12:	2014      	movs	r0, #20
 8006c14:	f7ff ffac 	bl	8006b70 <handleButtonChange>
		PlayerLeds_SetPlayer(&playerLedsCtrl, PLAYER_2, PLAYER_VIS_ONLY_SYSTEM);
 8006c18:	2202      	movs	r2, #2
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	4833      	ldr	r0, [pc, #204]	; (8006cec <HAL_GPIO_EXTI_Callback+0x134>)
 8006c1e:	f7ff fb01 	bl	8006224 <PlayerLeds_SetPlayer>
		LCD_DrawFilledRectangle(&mainLcdCtrl, 115, 170, 40, 60, LCD_COLOR_GREEN);
 8006c22:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	233c      	movs	r3, #60	; 0x3c
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	2328      	movs	r3, #40	; 0x28
 8006c2e:	22aa      	movs	r2, #170	; 0xaa
 8006c30:	2173      	movs	r1, #115	; 0x73
 8006c32:	482f      	ldr	r0, [pc, #188]	; (8006cf0 <HAL_GPIO_EXTI_Callback+0x138>)
 8006c34:	f7fe fee3 	bl	80059fe <LCD_DrawFilledRectangle>
		ENT_SoundOn(&entCtrl, ENT_SOUND_PRESSED);
 8006c38:	2102      	movs	r1, #2
 8006c3a:	482e      	ldr	r0, [pc, #184]	; (8006cf4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006c3c:	f7fe fd1a 	bl	8005674 <ENT_SoundOn>
}
 8006c40:	e04e      	b.n	8006ce0 <HAL_GPIO_EXTI_Callback+0x128>
	} else if (ACTIVE_BUTTON_PIN == HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin)) {
 8006c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c46:	4828      	ldr	r0, [pc, #160]	; (8006ce8 <HAL_GPIO_EXTI_Callback+0x130>)
 8006c48:	f7f9 fd6c 	bl	8000724 <HAL_GPIO_ReadPin>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d117      	bne.n	8006c82 <HAL_GPIO_EXTI_Callback+0xca>
		handleButtonChange(30);
 8006c52:	201e      	movs	r0, #30
 8006c54:	f7ff ff8c 	bl	8006b70 <handleButtonChange>
		PlayerLeds_SetPlayer(&playerLedsCtrl, PLAYER_3, PLAYER_VIS_ONLY_SYSTEM);
 8006c58:	2202      	movs	r2, #2
 8006c5a:	2102      	movs	r1, #2
 8006c5c:	4823      	ldr	r0, [pc, #140]	; (8006cec <HAL_GPIO_EXTI_Callback+0x134>)
 8006c5e:	f7ff fae1 	bl	8006224 <PlayerLeds_SetPlayer>
		LCD_DrawFilledRectangle(&mainLcdCtrl, 165, 170, 40, 60, LCD_COLOR_YELLOW);
 8006c62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	233c      	movs	r3, #60	; 0x3c
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	2328      	movs	r3, #40	; 0x28
 8006c6e:	22aa      	movs	r2, #170	; 0xaa
 8006c70:	21a5      	movs	r1, #165	; 0xa5
 8006c72:	481f      	ldr	r0, [pc, #124]	; (8006cf0 <HAL_GPIO_EXTI_Callback+0x138>)
 8006c74:	f7fe fec3 	bl	80059fe <LCD_DrawFilledRectangle>
		ENT_SoundOn(&entCtrl, ENT_SOUND_FALSE_START);
 8006c78:	2103      	movs	r1, #3
 8006c7a:	481e      	ldr	r0, [pc, #120]	; (8006cf4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006c7c:	f7fe fcfa 	bl	8005674 <ENT_SoundOn>
}
 8006c80:	e02e      	b.n	8006ce0 <HAL_GPIO_EXTI_Callback+0x128>
	} else if (ACTIVE_BUTTON_PIN == HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin)) {
 8006c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c86:	4818      	ldr	r0, [pc, #96]	; (8006ce8 <HAL_GPIO_EXTI_Callback+0x130>)
 8006c88:	f7f9 fd4c 	bl	8000724 <HAL_GPIO_ReadPin>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d112      	bne.n	8006cb8 <HAL_GPIO_EXTI_Callback+0x100>
		handleButtonChange(40);
 8006c92:	2028      	movs	r0, #40	; 0x28
 8006c94:	f7ff ff6c 	bl	8006b70 <handleButtonChange>
		PlayerLeds_SetPlayer(&playerLedsCtrl, PLAYER_4, PLAYER_VIS_ONLY_SYSTEM);
 8006c98:	2202      	movs	r2, #2
 8006c9a:	2103      	movs	r1, #3
 8006c9c:	4813      	ldr	r0, [pc, #76]	; (8006cec <HAL_GPIO_EXTI_Callback+0x134>)
 8006c9e:	f7ff fac1 	bl	8006224 <PlayerLeds_SetPlayer>
		LCD_DrawFilledRectangle(&mainLcdCtrl, 215, 170, 40, 60, LCD_COLOR_BLUE);
 8006ca2:	231f      	movs	r3, #31
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	233c      	movs	r3, #60	; 0x3c
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	2328      	movs	r3, #40	; 0x28
 8006cac:	22aa      	movs	r2, #170	; 0xaa
 8006cae:	21d7      	movs	r1, #215	; 0xd7
 8006cb0:	480f      	ldr	r0, [pc, #60]	; (8006cf0 <HAL_GPIO_EXTI_Callback+0x138>)
 8006cb2:	f7fe fea4 	bl	80059fe <LCD_DrawFilledRectangle>
}
 8006cb6:	e013      	b.n	8006ce0 <HAL_GPIO_EXTI_Callback+0x128>
		handleButtonChange(0);
 8006cb8:	2000      	movs	r0, #0
 8006cba:	f7ff ff59 	bl	8006b70 <handleButtonChange>
		ENT_SoundOff(&entCtrl);
 8006cbe:	480d      	ldr	r0, [pc, #52]	; (8006cf4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006cc0:	f7fe fd10 	bl	80056e4 <ENT_SoundOff>
		PlayerLeds_ClearAll(&playerLedsCtrl);
 8006cc4:	4809      	ldr	r0, [pc, #36]	; (8006cec <HAL_GPIO_EXTI_Callback+0x134>)
 8006cc6:	f7ff fa94 	bl	80061f2 <PlayerLeds_ClearAll>
		LCD_DrawFilledRectangle(&mainLcdCtrl, 65, 170, 190, 60, LCD_COLOR_WHITE);
 8006cca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	233c      	movs	r3, #60	; 0x3c
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	23be      	movs	r3, #190	; 0xbe
 8006cd6:	22aa      	movs	r2, #170	; 0xaa
 8006cd8:	2141      	movs	r1, #65	; 0x41
 8006cda:	4805      	ldr	r0, [pc, #20]	; (8006cf0 <HAL_GPIO_EXTI_Callback+0x138>)
 8006cdc:	f7fe fe8f 	bl	80059fe <LCD_DrawFilledRectangle>
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40010c00 	.word	0x40010c00
 8006cec:	2000024c 	.word	0x2000024c
 8006cf0:	200001ac 	.word	0x200001ac
 8006cf4:	20000248 	.word	0x20000248

08006cf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2212      	movs	r2, #18
 8006d08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	20000138 	.word	0x20000138

08006d1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d2e:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	2000014c 	.word	0x2000014c

08006d40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	6039      	str	r1, [r7, #0]
 8006d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d105      	bne.n	8006d5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	4907      	ldr	r1, [pc, #28]	; (8006d74 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d56:	4808      	ldr	r0, [pc, #32]	; (8006d78 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d58:	f7fe fb8d 	bl	8005476 <USBD_GetString>
 8006d5c:	e004      	b.n	8006d68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	4904      	ldr	r1, [pc, #16]	; (8006d74 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d62:	4805      	ldr	r0, [pc, #20]	; (8006d78 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d64:	f7fe fb87 	bl	8005476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d68:	4b02      	ldr	r3, [pc, #8]	; (8006d74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000784 	.word	0x20000784
 8006d78:	08006fe4 	.word	0x08006fe4

08006d7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	4904      	ldr	r1, [pc, #16]	; (8006d9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d8c:	4804      	ldr	r0, [pc, #16]	; (8006da0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d8e:	f7fe fb72 	bl	8005476 <USBD_GetString>
  return USBD_StrDesc;
 8006d92:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20000784 	.word	0x20000784
 8006da0:	08006ff8 	.word	0x08006ff8

08006da4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	221a      	movs	r2, #26
 8006db4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006db6:	f000 f843 	bl	8006e40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dba:	4b02      	ldr	r3, [pc, #8]	; (8006dc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000150 	.word	0x20000150

08006dc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	6039      	str	r1, [r7, #0]
 8006dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	4907      	ldr	r1, [pc, #28]	; (8006dfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dde:	4808      	ldr	r0, [pc, #32]	; (8006e00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006de0:	f7fe fb49 	bl	8005476 <USBD_GetString>
 8006de4:	e004      	b.n	8006df0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4904      	ldr	r1, [pc, #16]	; (8006dfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dea:	4805      	ldr	r0, [pc, #20]	; (8006e00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dec:	f7fe fb43 	bl	8005476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006df0:	4b02      	ldr	r3, [pc, #8]	; (8006dfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000784 	.word	0x20000784
 8006e00:	08007004 	.word	0x08007004

08006e04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	6039      	str	r1, [r7, #0]
 8006e0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d105      	bne.n	8006e22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	4907      	ldr	r1, [pc, #28]	; (8006e38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e1a:	4808      	ldr	r0, [pc, #32]	; (8006e3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e1c:	f7fe fb2b 	bl	8005476 <USBD_GetString>
 8006e20:	e004      	b.n	8006e2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	4904      	ldr	r1, [pc, #16]	; (8006e38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e26:	4805      	ldr	r0, [pc, #20]	; (8006e3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e28:	f7fe fb25 	bl	8005476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e2c:	4b02      	ldr	r3, [pc, #8]	; (8006e38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000784 	.word	0x20000784
 8006e3c:	08007018 	.word	0x08007018

08006e40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e46:	4b0f      	ldr	r3, [pc, #60]	; (8006e84 <Get_SerialNum+0x44>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e4c:	4b0e      	ldr	r3, [pc, #56]	; (8006e88 <Get_SerialNum+0x48>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e52:	4b0e      	ldr	r3, [pc, #56]	; (8006e8c <Get_SerialNum+0x4c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e66:	2208      	movs	r2, #8
 8006e68:	4909      	ldr	r1, [pc, #36]	; (8006e90 <Get_SerialNum+0x50>)
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f814 	bl	8006e98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e70:	2204      	movs	r2, #4
 8006e72:	4908      	ldr	r1, [pc, #32]	; (8006e94 <Get_SerialNum+0x54>)
 8006e74:	68b8      	ldr	r0, [r7, #8]
 8006e76:	f000 f80f 	bl	8006e98 <IntToUnicode>
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	1ffff7e8 	.word	0x1ffff7e8
 8006e88:	1ffff7ec 	.word	0x1ffff7ec
 8006e8c:	1ffff7f0 	.word	0x1ffff7f0
 8006e90:	20000152 	.word	0x20000152
 8006e94:	20000162 	.word	0x20000162

08006e98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75fb      	strb	r3, [r7, #23]
 8006eae:	e027      	b.n	8006f00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	0f1b      	lsrs	r3, r3, #28
 8006eb4:	2b09      	cmp	r3, #9
 8006eb6:	d80b      	bhi.n	8006ed0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	0f1b      	lsrs	r3, r3, #28
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3230      	adds	r2, #48	; 0x30
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e00a      	b.n	8006ee6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	0f1b      	lsrs	r3, r3, #28
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4619      	mov	r1, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	440b      	add	r3, r1
 8006ee0:	3237      	adds	r2, #55	; 0x37
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	3301      	adds	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]
 8006f00:	7dfa      	ldrb	r2, [r7, #23]
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d3d3      	bcc.n	8006eb0 <IntToUnicode+0x18>
  }
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr
	...

08006f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006f14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006f16:	e003      	b.n	8006f20 <LoopCopyDataInit>

08006f18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006f18:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006f1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006f1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006f1e:	3104      	adds	r1, #4

08006f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006f20:	480a      	ldr	r0, [pc, #40]	; (8006f4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006f24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006f26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006f28:	d3f6      	bcc.n	8006f18 <CopyDataInit>
  ldr r2, =_sbss
 8006f2a:	4a0a      	ldr	r2, [pc, #40]	; (8006f54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006f2c:	e002      	b.n	8006f34 <LoopFillZerobss>

08006f2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006f2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006f30:	f842 3b04 	str.w	r3, [r2], #4

08006f34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006f34:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006f36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006f38:	d3f9      	bcc.n	8006f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006f3a:	f7ff fafd 	bl	8006538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f3e:	f000 f80f 	bl	8006f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006f42:	f7fe ff0b 	bl	8005d5c <main>
  bx lr
 8006f46:	4770      	bx	lr
  ldr r3, =_sidata
 8006f48:	08007048 	.word	0x08007048
  ldr r0, =_sdata
 8006f4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006f50:	2000016c 	.word	0x2000016c
  ldr r2, =_sbss
 8006f54:	2000016c 	.word	0x2000016c
  ldr r3, = _ebss
 8006f58:	20000984 	.word	0x20000984

08006f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f5c:	e7fe      	b.n	8006f5c <ADC1_2_IRQHandler>
	...

08006f60 <__libc_init_array>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	2500      	movs	r5, #0
 8006f64:	4e0c      	ldr	r6, [pc, #48]	; (8006f98 <__libc_init_array+0x38>)
 8006f66:	4c0d      	ldr	r4, [pc, #52]	; (8006f9c <__libc_init_array+0x3c>)
 8006f68:	1ba4      	subs	r4, r4, r6
 8006f6a:	10a4      	asrs	r4, r4, #2
 8006f6c:	42a5      	cmp	r5, r4
 8006f6e:	d109      	bne.n	8006f84 <__libc_init_array+0x24>
 8006f70:	f000 f822 	bl	8006fb8 <_init>
 8006f74:	2500      	movs	r5, #0
 8006f76:	4e0a      	ldr	r6, [pc, #40]	; (8006fa0 <__libc_init_array+0x40>)
 8006f78:	4c0a      	ldr	r4, [pc, #40]	; (8006fa4 <__libc_init_array+0x44>)
 8006f7a:	1ba4      	subs	r4, r4, r6
 8006f7c:	10a4      	asrs	r4, r4, #2
 8006f7e:	42a5      	cmp	r5, r4
 8006f80:	d105      	bne.n	8006f8e <__libc_init_array+0x2e>
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f88:	4798      	blx	r3
 8006f8a:	3501      	adds	r5, #1
 8006f8c:	e7ee      	b.n	8006f6c <__libc_init_array+0xc>
 8006f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f92:	4798      	blx	r3
 8006f94:	3501      	adds	r5, #1
 8006f96:	e7f2      	b.n	8006f7e <__libc_init_array+0x1e>
 8006f98:	08007040 	.word	0x08007040
 8006f9c:	08007040 	.word	0x08007040
 8006fa0:	08007040 	.word	0x08007040
 8006fa4:	08007044 	.word	0x08007044

08006fa8 <memset>:
 8006fa8:	4603      	mov	r3, r0
 8006faa:	4402      	add	r2, r0
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d100      	bne.n	8006fb2 <memset+0xa>
 8006fb0:	4770      	bx	lr
 8006fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb6:	e7f9      	b.n	8006fac <memset+0x4>

08006fb8 <_init>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr

08006fc4 <_fini>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr
